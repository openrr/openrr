searchState.loadedDescShard("xml_rpc", 0, "Contains the error value\nContains the success value\nA parsed URL record.\nReturn the serialization of this URL.\nReturn whether this URL is a cannot-be-a-base URL, meaning …\nIf this URL has a host and it is a domain name (not an IP …\nReturn this URL’s fragment identifier, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a directory name as <code>std::path::Path</code> into an URL in …\nConvert a file name as <code>std::path::Path</code> into an URL in the …\nReturn whether the URL has an ‘authority’, which can …\nEquivalent to <code>url.host().is_some()</code>.\nReturn the parsed representation of the host for this URL. …\nReturn the string representation of the host (domain or IP …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the serialization of this URL.\nParse a string as an URL, with this URL as the base URL.\nReturn a default <code>ParseOptions</code> that can fully configure the …\nReturn the origin of this URL (…\nParse an absolute URL from a string.\nParse an absolute URL from a string and add params to its …\nReturn the password for this URL, if any, as a …\nReturn the path for this URL, as a percent-encoded ASCII …\nUnless this URL is cannot-be-a-base, return an iterator of …\nReturn an object with methods to manipulate this URL’s …\nReturn the port number for this URL, if any.\nReturn the port number for this URL, or the default port …\nReturn this URL’s query string, if any, as a …\nParse the URL’s query string, if any, as …\nManipulate this URL’s query string, viewed as a sequence …\nReturn the scheme of this URL, lower-cased, as an ASCII …\nChange this URL’s fragment identifier.\nChange this URL’s host.\nChange this URL’s host to the given IP address.\nChange this URL’s password.\nChange this URL’s path.\nChange this URL’s port number.\nChange this URL’s query string.\nChange this URL’s scheme.\nChange this URL’s username.\nAssuming the URL is in the <code>file</code> scheme or similar, convert …\nReturn the username for this URL (typically the empty …\nIf the URL has a host, return something that implements …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nThe Error type.\nThe kind of an error.\nThe Error type.\nThe kind of an error.\nA convenient variant for String.\nA convenient variant for String.\nContains the success value\nConvenient wrapper around <code>std::Result</code>.\nAdditional methods for <code>Result</code>, for easy interaction with …\nReturns the backtrace associated with this error.\nReturns the backtrace associated with this error.\nIf the <code>Result</code> is an <code>Err</code> then <code>chain_err</code> evaluates the …\nExtends the error chain with a new entry.\nExtends the error chain with a new entry.\nA short description of the error. This method is identical …\nA string describing the error kind.\nA short description of the error. This method is identical …\nA string describing the error kind.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an error from a kind, and generates a backtrace.\nConstructs an error from a kind, and generates a backtrace.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates over the error chain.\nIterates over the error chain.\nReturns the kind of the error.\nReturns the kind of the error.\nConstruct a chained error from another boxed error and a …\nConstruct a chained error from another boxed error and a …\nConstructs a chained error from another error and a kind, …\nConstructs a chained error from another error and a kind, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")