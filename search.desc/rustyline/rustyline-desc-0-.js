searchState.loadedDescShard("rustyline", 0, "Readline for Rust\nEscape or Alt modifier\nAlt + Shift\nabort\naccept-line\nEither accepts or inserts a newline\nAfter cursor\nAfter end of word.\nWhere to paste (relative to cursor position)\nWildcard. Useful if you want to filter out some keys.\nWhere to move with respect to word boundary\n⇤ (usually Shift-Tab)\n⌫ or Ctrl-H\nBackward search\nBackward search until\nbackward-char\nbackward-word, vi-prev-word\nBefore cursor\nBefore end of word.\nbeginning-of-buffer\nbeginning-of-history\nbeginning-of-line\nnon-blanks characters\nPaste (on unix platform)\nPaste (on unix platform)\nControl modifier\nCtrl + Alt\nCtrl + Alt + Shift\nCtrl + Shift\ncapitalize-word\nUndo manager\nSingle char\ncharacter search\nclear-screen\nCommands\nVi Command/Alternate\ncomplete\ncomplete-backward\ncomplete-hint\nhandler behaviour depends on input state\nMay behave differently depending on:\nCompletion/suggestion context\nDedent current line\nDefault editor with no helper and <code>DefaultHistory</code>\n⌦\n↓ arrow key\ndowncase-word\nLine editor\nalphanumeric characters\n⇲\nend-of-buffer\nvi-eof-maybe\nend-of-history\nend-of-line\n↵ or Ctrl-M\nContains the error value\nEscape or Ctrl-[\nInput event\nGive access to user input.\nEvent handler\nExternal printer\nFunction key\nForward search\nForward search until\nforward-char\nforward-search-history (incremental search)\nforward-word, vi-end-word, vi-next-word\nSyntax specific helper.\nhistory-search-backward (common prefix search)\nhistory-search-forward (common prefix search)\n⇱\nIndent current line\nVi input modes\nInsert text\nInsert/Input mode\nInsert key\nInterrupt signal (Ctrl-C)\nInput key pressed\nInput key pressed and modifiers\nKey sequence\nbackward-delete-char, backward-kill-line, …\n← arrow key\nmove to the same column on the next line\nmoves cursor to the line below or switches to next history …\nmove to the same column on the previous line\nmoves cursor to the line above or switches to prev history …\nThe set of modifier keys that were triggered along with a …\nTODO Mouse event\nbackward-char, backward-word, beginning-of-line, …\nWhere to move\nNo modifier\nInserts a newline\nnext-history\nNo action\n\\0\nContains the success value\nvi-replace\n⇟\n⇞\nprevious-history\nquoted-insert\nrepaint\nThe number of times one command should be repeated.\nvi-change-to, vi-substitute\nOverwrite mode\nvi-change-char\nThe error type for I/O and Linux Syscalls (Errno)\nreverse-search-history (incremental search)\n→ arrow key\nShift modifier\nself-insert\nunconditional command\nStart of word.\nSuspend signal (Ctrl-Z on unix platform)\n⇥ or Ctrl-I\ntranspose-chars\ntranspose-words\nundo\nUnsupported / unexpected\nUnsupported escape sequence (on unix platform)\n↑ arrow key\nupcase-word\nalphanumeric (and ‘_’) characters\ncharacter-search, character-search-backward, vi-char-search\nvi-first-print\nvi-yank-to\nWhole user input (not really a movement but a range)\nWhole current line (not really a movement but a range)\nDifferent word definitions\nyank, vi-put\nyank-pop\nAdd a new entry in the history.\nGet a flags value with all known bits set.\nConstructor from <code>char</code> with Alt modifier\nAppend new entries in the specified file.\nBind a sequence to a command.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nClear history.\nClear the screen.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCompletion API\nCustomize line editor\nWhether all set bits in a source flags value are also set …\nCreate an external printer\nConstructor from <code>char</code> with Ctrl modifier\nThe intersection of a source flags value with the …\nIf output stream is a tty, this function returns its width …\nGet a flags value with all bits unset.\nContains error type for handling I/O and Errno errors\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturn <code>i</code>th key event\nTakes the current input state and returns the command to …\nReturns <code>true</code> if there is a hint displayed.\nReturn an immutable reference to the helper.\nReturn a mutable reference to the helper.\nSyntax highlighting\nHints (suggestions at the right of the prompt as you type).\nReturns the hint text that is shown after the current …\nHistory API\nReturn an immutable reference to the history object.\nReturn an immutable reference to the history object.\nThe history index we are currently editing\nReturn a mutable reference to the history object.\nvi input mode\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nReturns an iterator over edited lines. Iterator ends at EOF…\nYield a set of contained flags values.\nYield a set of contained named flags values.\ncurrently edited line\nLine buffer with current cursor position\nLoad the history from the specified file.\nemacs or vi mode\nConstructor. Visible for testing.\nCreate an editor with the default configuration\nConstructor from <code>char</code> and modifiers\nctrl-a =&gt; ctrl-A (uppercase) shift-A =&gt; A (no SHIFT …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCurrent cursor position (byte position)\nPrint message to stdout\nThis method will read a line from STDIN and will display a …\nThis function behaves in the exact same manner as <code>readline</code>…\nThe intersection of a source flags value with the …\nSave the history in the specified file.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nChange cursor visibility\nRegister a callback function to be called for …\nTells if current command should reset kill ring.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRemove a binding for the given sequence.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInput validation API (Multi-line editing)\nCreate an editor with a specific configuration.\nCreate an editor with a custom history impl.\nWhether this commands accepts input if the cursor not at …\nA completion candidate.\nSpecific completion candidate.\nTo be called for tab-completion.\nDouble quote: <code>&quot;</code>\nA <code>Completer</code> for file and folder names.\nNo quote\nCompletion candidate pair\nKind of quote.\nSingle quote: <code>&#39;</code>\nTakes the currently edited <code>line</code> with the cursor <code>pos</code>ition …\nTakes the currently edited <code>line</code> with the cursor <code>pos</code>ition …\nSimilar to <code>Self::complete_path</code>, but the returned paths are …\nText to display when listing alternatives.\nText to display when listing alternatives.\nEscape any <code>break_chars</code> in <code>input</code> string with <code>esc_char</code>. For …\nGiven a <code>line</code> and a cursor <code>pos</code>ition, try to find backward …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the longest common prefix among all …\nConstructor\nText to insert in line.\nText to insert in line.\nRemove escape char\nUpdates the edited <code>line</code> with the <code>elected</code> candidate.\nNo filter\nBeep\nShould the editor use stdio\nBeep or flash or nothing\nConfiguration builder\nComplete the next full match (like in Vim by default)\nColorization mode\nTab completion style\nUser preferences\nTrait for component that holds a <code>Config</code>.\nDeactivate highlighting even if platform/terminal is …\nStyle of editing / Standard keymaps\nEmacs keymap\nActivate highlighting if platform/terminal is supported.\nActivate highlighting even if platform is not supported …\nHistory filter\na line will not be added to the history if it matches the …\nComplete till longest match. When more than one match, …\nSilent\nUse terminal-style interaction whenever possible, even if …\nUse stdin / stdout\nVi keymap\nFlash screen (not supported)\nTell if lines are automatically added to the history.\nTell if lines are automatically added to the history.\nWhether to use stdio or not\nWhether to use stdio or not\nBell style: beep, flash or nothing.\nSet bell style: beep, flash or nothing.\nEnable or disable bracketed paste on unix platform\nBuilds a <code>Config</code> with the settings specified so far.\nReturns a <code>Config</code> builder.\nCheck if cursor position is at leftmost before displaying …\nCheck if cursor position is at leftmost before displaying …\nTell if colors should be enabled.\nForces colorization on or off.\nWhen listing completion alternatives, only display one …\nThe number of possible completions that determines when …\nCompletion behaviour.\nSet <code>completion_type</code>.\n<code>Config</code> accessor.\nEmacs or Vi mode\nChoose between Emacs or Vi mode.\nEnable or disable bracketed paste on unix platform\nBracketed paste on unix platform\nEnable or disable signals in termios\nEnable or disable signals in termios\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTell if lines which match the previous history entry are …\nTell if lines which match the previous history entry are …\nTell if lines which begin with a space character are saved …\nTell if lines which begin with a space character are saved …\nIndentation size used by indentation commands\nIndentation size\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDuration (milliseconds) Rustyline will wait for a …\nTimeout for ambiguous key sequences in milliseconds. …\nTell the maximum length (i.e. number of entries) for the …\nSet the maximum length for the history.\nReturns a <code>Config</code> builder.\nTell if lines are automatically added to the history.\nWhether to use stdio or not\nSet bell style: beep, flash or nothing.\nCheck if cursor position is at leftmost before displaying …\nForces colorization on or off.\nThe number of possible completions that determines when …\nSet <code>completion_type</code>.\nChoose between Emacs or Vi mode.\nEnable or disable signals in termios\nTell if lines which match the previous history entry are …\nTell if lines which begin with a space character are saved …\nIndentation size for indent/dedent commands\nTimeout for ambiguous key sequences in milliseconds.\nSet the maximum length for the history.\nHorizontal space taken by a tab.\nHorizontal space taken by a tab.\nHorizontal space taken by a tab.\nEOF (VEOF / Ctrl-D)\nUnix Error from syscall\nInterrupt signal (VINTR / VQUIT / Ctrl-C)\nI/O Error\nThe error type for Rustyline errors that can arise from …\nError generated on <code>WINDOW_BUFFER_SIZE_EVENT</code> / <code>SIGWINCH</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDescribe which kind of action has been triggering the call …\nForced / final refresh (no auto-suggestion / hint, no …\nSyntax highlighter with ANSI color.\nHighlight matching bracket when typed or cursor moved on.\nCursor moved\nOther action\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes the currently edited <code>line</code> with the cursor <code>pos</code>ition …\nTakes the completion <code>candidate</code> and returns the highlighted …\nTells if <code>line</code> needs to be highlighted when a specific char …\nTakes the <code>hint</code> and returns the highlighted version (with …\nTakes the <code>prompt</code> and returns the highlighted version (with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor\nA hint returned by Hinter\nSpecific hint type\nHints provider\nAdd suggestion based on previous history entries matching …\nText to insert in line when right arrow is pressed\nText to display when hint is active\nReturns the argument unchanged.\nTakes the currently edited <code>line</code> with the cursor <code>pos</code>ition …\nCalls <code>U::from(self)</code>.\nCreate a new <code>HistoryHinter</code>\nDefault file-based history implementation\nCurrent state of the history stored in a file.\nSearch history forward\nInterface for navigating/loading/storing history\nTransient in-memory history implementation.\nSearch history backward\nSearch direction\nHistory search result\nAdd a new entry in the history.\nAdd a new entry in the history.\nAppend new entries in the specified file.\nClear in-memory history\nhistory entry\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the history entry at position <code>index</code>, starting from …\nhistory index\nIgnore consecutive duplicates\nIgnore lines which begin with a space or not\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the history has no entry.\nReturn a forward iterator.\nReturn the number of entries in the history.\nLoad the history from the specified file.\nDefault constructor\nDefault constructor\nmatch position in <code>entry</code>\nSave the history in the specified file.\nSearch history (start position inclusive [0, len-1]).\nSet the maximum length for the history. This function can …\nAnchored search\nCustomized constructor with:\nCustomized constructor with:\nBefore cursor\nCapitalize word\nListener to be notified when the line is modified.\nListener to be notified when some text is deleted.\nDelete (kill) direction\nAfter cursor\nRepresent the current input (text and cursor position).\nlowercase word\nuppercase word\nWord’s case change\nExtracts a string slice containing the entire buffer.\nDelete the character at the left of the cursor. Basically …\nReturn the content between current cursor position and <code>mvt</code> …\n<code>string</code> deleted at <code>idx</code> index\nDelete the character at the right of the cursor without …\nDelete the previous word, maintaining the cursor at the …\nRemove the specified <code>range</code> in the line.\nDelete range specified by <code>cs</code> search.\nKill from the cursor to the end of the current word, or, …\nKill backward from point to the beginning of the buffer.\nKill backward from point to the beginning of the line.\nAlter the next word.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndent range specified by <code>mvt</code>.\nInsert the character <code>ch</code> at current cursor position and …\n<code>c</code>har inserted at <code>idx</code> index\n<code>string</code> inserted at <code>idx</code> index\nInsert the <code>s</code>tring at the specified position. Return <code>true</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a buffer into a <code>String</code> without copying or …\nReturns <code>true</code> if this buffer has a length of zero.\nIs cursor at the end of input (whitespaces after cursor is …\nKill range specified by <code>mvt</code>.\nKill the text from point to the end of the buffer.\nKill the text from point to the end of the line.\nReturns the length of this buffer, in bytes.\nMove cursor on the left.\nMove cursor to the end of the buffer.\nMove cursor to the start of the buffer.\nMove cursor to the end of the line.\nMove cursor on the right.\nMove cursor to the start of the line.\nMove cursor to the matching character position. Return <code>true</code>…\nMoves the cursor to the same column in the line above\nMoves the cursor to the same column in the line above\nMoves the cursor to the end of next word.\nMoves the cursor to the beginning of previous word.\nReturns the position of the character just after the …\nCurrent cursor position (byte position)\n<code>old</code> text replaced by <code>new</code> text at <code>idx</code> index\nReplaces the content between [<code>start</code>..<code>end</code>] with <code>text</code> and …\nSet cursor position (byte position)\nused to make the distinction between simple character(s) …\nused to make the distinction between simple character(s) …\nExchange the char before cursor with the character at …\nTranspose two words\nSet line content (<code>buf</code>) and cursor position (<code>pos</code>).\nCreate a new line buffer with the given maximum <code>capacity</code>.\nYank/paste <code>text</code> at current position. Return <code>None</code> when …\nDelete previously yanked text and yank/paste <code>text</code> at …\nIncomplete input\nValidation fails with an optional error message. User must …\nSimple matching bracket validator.\nValidation succeeds with an optional message\nGive access to user input.\nInput validation result\nThis trait provides an extension interface for determining …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns user input.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor\nTakes the currently edited <code>input</code> and returns a …\nConfigure whether validation is performed while typing or …")