searchState.loadedDescShard("rosrust", 0, "Represents <code>some_type[]</code> or <code>some_type[length]</code>.\nRepresents <code>bool</code>.\nROS representation of duration, with nanosecond precision\nRepresents <code>duration</code>.\nRepresents <code>float32</code>.\nRepresents <code>float64</code>.\nRepresents <code>int16</code>.\nRepresents <code>int32</code>.\nRepresents <code>int64</code>.\nRepresents <code>int8</code> or <code>byte</code>.\nRepresents an embedded message.\nRepresents an arbitrary ROS message.\nRepresents an arbitrary ROS message or value in it.\nRepresents <code>string</code>.\nROS representation of time, with nanosecond precision\nRepresents <code>time</code>.\nRepresents <code>uint16</code>.\nRepresents <code>uint32</code>.\nRepresents <code>uint64</code>.\nRepresents <code>uint8</code> or <code>char</code>.\nReturns the content if <code>Value</code> is a <code>bool</code>.\nReturns the content if <code>Value</code> is a <code>Duration</code> struct.\nReturns the content if <code>Value</code> is an <code>f32</code>.\nReturns the content if <code>Value</code> is an <code>f64</code>.\nReturns the content if <code>Value</code> is an <code>i16</code>.\nReturns the content if <code>Value</code> is an <code>i32</code>.\nReturns the content if <code>Value</code> is an <code>i64</code>.\nReturns the content if <code>Value</code> is an <code>i8</code>.\nReturns a reference to the content if <code>Value</code> is a message.\nReturns a reference to the content if <code>Value</code> is an array.\nReturns a <code>&amp;str</code> if <code>Value</code> is a <code>String</code>.\nReturns the content if <code>Value</code> is a <code>Time</code> struct.\nReturns the content if <code>Value</code> is a <code>u16</code>.\nReturns the content if <code>Value</code> is a <code>u32</code>.\nReturns the content if <code>Value</code> is a <code>u64</code>.\nReturns the content if <code>Value</code> is a <code>u8</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a time of the given number of nanoseconds.\nCreates a duration of the given number of nanoseconds.\nCreates a time of the given number of seconds.\nCreates a duration of the given number of seconds.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of nanoseconds in the time.\nReturns the number of nanoseconds in the duration.\nCreates a new time of zero value.\nCreates a new duration of zero value.\nNumber of nanoseconds inside the current second.\nNumber of nanoseconds inside the current second. Negative …\nNumber of seconds.\nNumber of seconds. Negative for negative durations.\nReturns the number of seconds in the time.\nReturns the number of seconds in the duration.\nReturns the content if <code>Value</code> is a message.\nReturns the content if <code>Value</code> is a <code>String</code>.\nReturns the content if <code>Value</code> is an array.\nUtilities for time information based on the system clock.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nThe Error type.\nThe kind of an error.\nA convenient variant for String.\nContains the success value\nConvenient wrapper around <code>std::Result</code>.\nAdditional methods for <code>Result</code>, for easy interaction with …\nReturns the backtrace associated with this error.\nIf the <code>Result</code> is an <code>Err</code> then <code>chain_err</code> evaluates the …\nExtends the error chain with a new entry.\nA short description of the error. This method is identical …\nA string describing the error kind.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an error from a kind, and generates a backtrace.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates over the error chain.\nReturns the kind of the error.\nConstruct a chained error from another boxed error and a …\nConstructs a chained error from another error and a kind, …\nContains the error value\nThe Error type.\nThe kind of an error.\nA convenient variant for String.\nContains the success value\nConvenient wrapper around <code>std::Result</code>.\nAdditional methods for <code>Result</code>, for easy interaction with …\nReturns the backtrace associated with this error.\nIf the <code>Result</code> is an <code>Err</code> then <code>chain_err</code> evaluates the …\nExtends the error chain with a new entry.\nA short description of the error. This method is identical …\nA string describing the error kind.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an error from a kind, and generates a backtrace.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates over the error chain.\nReturns the kind of the error.\nConstruct a chained error from another boxed error and a …\nConstructs a chained error from another error and a kind, …\nContains the error value\nThe Error type.\nThe kind of an error.\nA convenient variant for String.\nContains the success value\nConvenient wrapper around <code>std::Result</code>.\nAdditional methods for <code>Result</code>, for easy interaction with …\nReturns the backtrace associated with this error.\nIf the <code>Result</code> is an <code>Err</code> then <code>chain_err</code> evaluates the …\nExtends the error chain with a new entry.\nA short description of the error. This method is identical …\nA string describing the error kind.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an error from a kind, and generates a backtrace.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates over the error chain.\nReturns the kind of the error.\nConstruct a chained error from another boxed error and a …\nConstructs a chained error from another error and a kind, …\nContains the error value\nThe Error type.\nThe kind of an error.\nA convenient variant for String.\nContains the success value\nConvenient wrapper around <code>std::Result</code>.\nAdditional methods for <code>Result</code>, for easy interaction with …\nReturns the backtrace associated with this error.\nIf the <code>Result</code> is an <code>Err</code> then <code>chain_err</code> evaluates the …\nExtends the error chain with a new entry.\nA short description of the error. This method is identical …\nA string describing the error kind.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an error from a kind, and generates a backtrace.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates over the error chain.\nReturns the kind of the error.\nConstruct a chained error from another boxed error and a …\nConstructs a chained error from another error and a kind, …\nContains the error value\nThe Error type.\nThe kind of an error.\nA convenient variant for String.\nContains the success value\nConvenient wrapper around <code>std::Result</code>.\nAdditional methods for <code>Result</code>, for easy interaction with …\nReturns the backtrace associated with this error.\nIf the <code>Result</code> is an <code>Err</code> then <code>chain_err</code> evaluates the …\nExtends the error chain with a new entry.\nA short description of the error. This method is identical …\nA string describing the error kind.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an error from a kind, and generates a backtrace.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates over the error chain.\nReturns the kind of the error.\nConstruct a chained error from another boxed error and a …\nConstructs a chained error from another error and a kind, …\nHandles all calls involved with a subscription\nCalled before any message is accepted from a certain …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalled upon receiving any message\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWait until all the subscribers reported by rosmaster have …\nGet the current time from the system clock.")