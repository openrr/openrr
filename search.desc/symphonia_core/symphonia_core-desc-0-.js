searchState.loadedDescShard("symphonia_core", 0, "The <code>audio</code> module provides primitives for working with …\nThe <code>checksum</code> module provides implementations of common …\nThe <code>codec</code> module provides the traits and support …\nThe <code>conv</code> module provides methods to convert samples …\nThe <code>dsp</code> module provides efficient implementations of …\nThe <code>errors</code> module defines the common error type.\nThe <code>format</code> module provides the traits and support …\nThe <code>io</code> module implements composable bit- and byte-level …\nThe <code>meta</code> module defines basic metadata elements, and …\nThe <code>probe</code> module provides methods and traits to support …\nThe <code>sample</code> module defines the core audio sample trait and …\nConvenience macro for declaring a <code>CodecDescriptor</code>.\nConvenience macro for declaring a probe <code>Descriptor</code> for a …\nConvenience macro for declaring a probe <code>Descriptor</code> for a …\nThe <code>units</code> module provides definitions for common units.\nThe <code>util</code> module provides a repository of commonly used …\n<code>AsAudioBufferRef</code> is a trait implemented for <code>AudioBuffer</code>s …\n<code>AudioBuffer</code> is a container for multi-channel planar audio …\n<code>AudioBufferRef</code> is a copy-on-write reference to an …\n<code>AudioPlanes</code> provides immutable slices to each audio …\n<code>AudioPlanesMut</code> provides mutable slices to each audio …\nA bitmask representing the audio channels in an audio …\nAn iterator over individual channels within a <code>Channels</code> …\nFront-centre (centre) channel.\nFront centre-high channel.\nFront-left (left) or the Mono channel.\nFront left-of-centre (left center) channel.\nFront left-high channel.\nFront left-wide channel.\nFront-right (right) channel.\nFront right-of-centre (right center) channel.\nFront right-high channel.\nFront right-wide channel.\nFront Left and Right, Rear Left and Right, and a single …\nLow frequency channel 1.\nLow frequency channel 2.\n<code>Layout</code> describes common audio channel configurations.\nSingle centre channel.\nRear-centre (surround rear centre) channel.\nRear-left (surround rear left) channel.\nRear left-of-centre channel.\nRear-right (surround rear right) channel.\nRear right-of-centre channel.\n<code>RawSample</code> provides a typed interface for converting a …\nA <code>RawSampleBuffer</code>, is a byte-oriented sample buffer. All …\nThe <code>RawType</code> is a primitive data type, or fixed-size byte …\nSide left (surround left) channel.\nSide right (surround right) channel.\nA <code>SampleBuffer</code>, is a sample oriented buffer. It is …\nThe <code>Signal</code> trait provides methods for rendering and …\n<code>SignalSpec</code> describes the characteristics of a Signal.\nLeft and Right channels.\nTop centre channel.\nTop centre channel.\nTop front-left channel.\nTop front-right channel.\nTop rear-centre channel.\nTop rear-left channel.\nTop rear-right channel.\nLeft and Right channels with a single low-frequency …\nReturns the set containing all flags.\nGet an <code>AudioBufferRef</code> reference.\nGets an immutable slice to the bytes of the sample’s …\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nGets the maximum number of samples the <code>SampleBuffer</code> may …\nGets the maximum number of samples the <code>RawSampleBuffer</code> may …\nGets the total capacity of the buffer. The capacity is the …\nGets the total capacity of the buffer. The capacity is the …\nGets an immutable reference to all the written samples in …\nGets a mutable reference to all the written samples in the …\nGets two mutable references to two different channels.\nThe channel assignments of the signal. The order of the …\nClears all written frames from the buffer. This is a cheap …\nClears all written samples.\nClears all written samples.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nConverts the contents of an AudioBuffer into an equivalent …\nCopies all audio data from the source <code>AudioBuffer</code> to the …\nCopies all audio data from the source <code>AudioBufferRef</code> in …\nCopies all audio data from the source <code>AudioBufferRef</code> in …\nCopies all audio samples from a source <code>AudioBuffer</code> into …\nCopies all audio data from a source <code>AudioBuffer</code> that is of …\nCopies all audio data from the source <code>AudioBuffer</code> to the …\nCopies all audio data from the source <code>AudioBufferRef</code> in …\nCopies all audio data from the source <code>AudioBufferRef</code> in …\nCopies all audio data from a source <code>AudioBuffer</code> into the …\nCopies all audio data from a source <code>AudioBuffer</code> that is of …\nGets the number of channels.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nClears, and then renders the entire buffer using the fill …\nGets the number of actual frames written to the buffer. …\nGets the number of frames in the buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a channel <code>Layout</code> into a <code>Channels</code> bit mask.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if the buffer contains no written samples.\nReturns <code>true</code> if the buffer contains no written samples.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if the <code>AudioBuffer</code> is unused.\nGets an iterator over individual channels.\nGets the number of written samples.\nGets the number of written samples.\nMakes an equivalent AudioBuffer of a different type.\nInstantiate a new <code>SampleBuffer</code> using the specified signal …\nInstantiate a new <code>RawSampleBuffer</code> using the specified …\nInstantiate a new <code>AudioBuffer</code> using the specified signal …\nReturns the complement of this set of flags.\nGets immutable slices of all the audio planes.\nGets mutable slices of all the audio planes.\nGets immutable references to all audio planes (channels) …\nGets mutable references to all audio planes (channels) …\nThe signal sampling rate in hertz (Hz).\nRemoves the specified flags in-place.\nRenders a number of frames using the provided render …\nRenders a reserved number of frames. This is a cheap …\nRenders a number of silent frames.\nGets an immutable slice of all written samples.\nGets a mutable slice of all written samples.\nInserts or removes the specified flags depending on the …\nShifts the contents of the buffer back by the number of …\nGets the signal specification for the buffer.\nGets the signal specification for the buffer.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nTransforms every written sample in the signal using the …\nTrims samples from the start and end of the buffer.\nTruncates the buffer to the number of frames specified. If …\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nInstantiates an unused <code>AudioBuffer</code>. An unused <code>AudioBuffer</code> …\n<code>Crc16Ansi</code> implements the CRC-16 algorithm using the ANSI …\n<code>Crc16AnsiLe</code> implements the CRC-16 algorithm using the ANSI …\n<code>Crc32</code> implements the CRC-32 checksum algorithm using the …\n<code>Crc8Ccitt</code> implements the CRC-8 algorithm using the CCITT …\n<code>Md5</code> implements the MD5 hashing algorithm.\nReturns the computed CRC.\nReturns the computed CRC.\nReturns the computed CRC.\nReturns the computed CRC.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFinalizes and returns the computed MD5 hash.\nInstantiate a <code>Crc16Ansi</code> instance with an initial state.\nInstantiate a <code>Crc16AnsiLe</code> instance with an initial state.\nInstantiates a <code>Crc32</code> instance with an initial state.\nInstantiate a <code>Crc8Ccitt</code> instance with an initial state.\nAdvanced Audio Coding (AAC)\nDolby AC-4 (ETSI TS 103 190)\nG.722 ADPCM\nG.726 ADPCM\nG.726 ADPCM little-endian\nADPCM IMA QuickTime\nADPCM IMA WAV\nMicrosoft ADPCM\nApple Lossless Audio Codec (ALAC)\nAdaptive Transform Acoustic Coding (ATRAC1)\nAdaptive Transform Acoustic Coding 3 (ATRAC3)\nAdaptive Transform Acoustic Coding 3+ (ATRAC3+)\nAdaptive Transform Acoustic Coding 9 (ATRAC9)\nDTS Coherent Acoustics (DCA/DTS)\nAC-3, E-AC-3, Dolby Digital (ATSC A/52)\nFree Lossless Audio Codec (FLAC)\nMonkey’s Audio (APE)\nMPEG Layer 1 (MP1)\nMPEG Layer 2 (MP2)\nMPEG Layer 3 (MP3)\nMusepack\nNull codec\nOpus\nPCM A-law (G.711)\nPCM 32-bit big-endian floating point interleaved\nPCM 32-bit big-endian floating point planar\nPCM 32-bit little-endian floating point interleaved\nPCM 32-bit little-endian floating point planar\nPCM 64-bit big-endian floating point interleaved\nPCM 64-bit big-endian floating point planar\nPCM 64-bit little-endian floating point interleaved\nPCM 64-bit little-endian floating point planar\nPCM Mu-law (G.711)\nPCM signed 16-bit big-endian interleaved\nPCM signed 16-bit big-endian planar\nPCM signed 16-bit little-endian interleaved\nPCM signed 16-bit little-endian planar\nPCM signed 24-bit big-endian interleaved\nPCM signed 24-bit big-endian planar\nPCM signed 24-bit little-endian interleaved\nPCM signed 24-bit little-endian planar\nPCM signed 32-bit big-endian interleaved\nPCM signed 32-bit big-endian planar\nPCM signed 32-bit little-endian interleaved\nPCM signed 32-bit little-endian planar\nPCM signed 8-bit interleaved\nPCM signed 8-bit planar\nPCM unsigned 16-bit big-endian interleaved\nPCM unsigned 16-bit big-endian planar\nPCM unsigned 16-bit little-endian interleaved\nPCM unsigned 16-bit little-endian planar\nPCM unsigned 24-bit big-endian interleaved\nPCM unsigned 24-bit big-endian planar\nPCM unsigned 24-bit little-endian interleaved\nPCM unsigned 24-bit little-endian planar\nPCM unsigned 32-bit big-endian interleaved\nPCM unsigned 32-bit big-endian planar\nPCM unsigned 32-bit little-endian interleaved\nPCM unsigned 32-bit little-endian planar\nPCM unsigned 8-bit interleaved\nPCM unsigned 8-bit planar\nSpeex\nTrue Audio (TTA)\nVorbis\nWavPack\nWindows Media Audio\nA <code>CodecDescriptor</code> stores a description of a single logical …\nCodec parameters stored in a container format’s headers …\nA <code>CodecRegistry</code> allows the registration of codecs, and …\nA <code>CodecType</code> is a unique identifier used to identify a …\nCRC16 of interleaved PCM audio samples.\nCRC32 of interleaved PCM audio samples.\nCRC8 of interleaved PCM audio samples.\nA <code>Decoder</code> implements a codec’s decode algorithm. It …\n<code>DecoderOptions</code> is a common set of options that all …\n<code>FinalizeResult</code> contains optional information that can only …\nMD5 of interleaved PCM audio samples.\nCodec defined, up-to 16-byte code.\nA method and expected value to perform verification on the …\nThe number of bits per one encoded audio sample.\nThe number of bits per one decoded audio sample.\nThe channel layout.\nA bitmask of all channels in the stream.\nThe codec type.\nThe <code>CodecType</code> identifier.\nGets a reference to an updated set of <code>CodecParameters</code> …\nDeclares a new <code>CodecType</code> given a character code. A …\nDecodes a <code>Packet</code> of audio data and returns a copy-on-write …\nThe number of leading frames inserted by the encoder that …\nExtra data (defined by the codec).\nOptionally, obtain post-decode information such as the …\nProvide the <code>CodecType</code>.\nThe number of frames per block, in case packets are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the <code>CodecDescriptor</code> for a registered codec.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllows read access to the internal audio buffer.\nA longer, more descriptive, string identifying the codec.\nSearches the registry for a <code>Decoder</code> that supports the …\nThe maximum number of frames a packet will contain.\nThe length of the stream in number of frames.\nInstantiate a new <code>CodecRegistry</code>.\nThe demuxer guarantees packet data integrity.\nThe number of trailing frames inserted by the encoder for …\nRegister a single codec. If the codec was previously …\nRegisters all codecs supported by <code>Decoder</code>. If a supported …\nReset the <code>Decoder</code>.\nThe sample format of an audio sample.\nThe sample rate of the audio in Hz.\nA short ASCII-only string identifying the codec.\nThe timestamp of the first frame.\nGets a list of codec descriptors for the codecs supported …\nThe timebase of the stream.\nAttempts to instantiates a <code>Decoder</code> using the provided …\nA method and expected value that may be used to perform …\nThe decoded audio should be verified if possible during …\nIf verification is enabled and supported by the decoder, …\nProvide the bits per sample of an encoded audio sample.\nProvide the bit per sample of a decoded audio sample.\nProvide the channel layout.\nProvide the channel map.\nProvide the number of delay frames.\nProvide codec extra data.\nProvide the maximum number of frames per packet.\nProvide the maximum number of frames per packet.\nProvide the total number of frames.\nSpecify if the packet’s data integrity was guaranteed.\nProvide the number of padding frames.\nProvide the codec’s decoded audio sample format.\nProvide the sample rate in Hz.\nProvide the timestamp of the first frame.\nProvide the <code>TimeBase</code>.\nProvide a verification code of the final decoded audio.\n<code>FromSample</code> implements a conversion from <code>Sample</code> type <code>F</code> to …\n<code>IntoSample</code> implements a conversion from <code>Self</code> to <code>Sample</code> …\n<code>ReversibleSample</code> is a trait that when implemented for <code>Self</code>…\nThe <code>dither</code> module provides methods to apply a dither to a …\n<code>AddNoise</code> is a trait for converting random noise into a …\n<code>Dither</code> is a trait for implementing dithering algorithms.\nEnumeration of dither algorithms.\nThe <code>Identity</code> dithering algorithm performs no dithering and …\nNo dithering.\n<code>MaybeDither</code> conditionally applies a dither to a sample …\n<code>RandomNoise</code> represents a sample of noise of a specified …\n<code>Rectangular</code> implements a dither using uniformly …\nApply rectangular dithering. See <code>Rectangular</code> for more …\n<code>Triangular</code> implements a dither using a triangular …\nApply triangular dithering. See <code>Triangular</code> for more …\nDithers a <code>Sample</code> of source sample format <code>F</code> for an eventual …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiate a noise sample from a random 32-bit source.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>complex</code> module implements a 32-bit floating point …\nThe <code>fft</code> module implements the Fast Fourier Transform (FFT).\nThe <code>mdct</code> module implements the Modified Discrete Cosine …\nA complex number.\nTake the complex conjugate of <code>self</code>.\nReturns the argument unchanged.\nThe imaginary component.\nCalls <code>U::from(self)</code>.\nCreate a complex number with a value of <code>0 + j1</code>.\nCreate a new complex number.\nThe real component.\nScale the complex number.\nThe complex Fast Fourier Transform (FFT).\nThe maximum FFT size.\nCalculate the FFT.\nCalculate the FFT in-place.\nReturns the argument unchanged.\nCalculate the inverse FFT.\nCalculate the inverse FFT in-place.\nCalls <code>U::from(self)</code>.\nGet the size of the FFT.\nThe Inverse Modified Discrete Transform (IMDCT).\nReturns the argument unchanged.\nPerforms the the N-point Inverse Modified Discrete Cosine …\nCalls <code>U::from(self)</code>.\nInstantiate a N-point IMDCT with no scaling.\nInstantiate a N-point IMDCT with scaling.\nThe stream contained malformed data and could not be …\nContains the error value\n<code>Error</code> provides an enumeration of all possible errors …\nThe stream can only be seeked forward.\nThe track ID provided is invalid.\nAn IO error occured while reading, writing, or seeking the …\nA default or user-defined limit was reached while decoding …\nContains the success value\nThe timestamp to seek to is out of range.\nThe demuxer or decoder needs to be reset before continuing.\nThe stream could not be seeked.\n<code>SeekErrorKind</code> is a list of generic reasons why a seek may …\nThe stream is not seekable at all.\nAn unsupported container or codec feature was encounted.\nConvenience function to create a decode error.\nConvenience function to create an end-of-stream error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvenience function to create a limit error.\nConvenience function to create a reset required error.\nConvenience function to create a seek error.\nConvenience function to create an unsupport feature error.\nAccurate (aka sample-accurate) seek mode will be always …\nCoarse seek mode is a best-effort attempt to seek to the …\nA <code>Cue</code> is a designated point of time within a media stream.\nA <code>CuePoint</code> is a point, represented as a frame offset, …\n<code>FormatOptions</code> is a common set of options that all demuxers …\nA <code>FormatReader</code> is a container demuxer. It provides methods …\nA <code>Packet</code> contains a discrete amount of encoded data for a …\n<code>SeekMode</code> selects the precision of a seek.\n<code>SeekTo</code> specifies a position to seek to.\n<code>SeekedTo</code> is the result of a seek.\nSeek to a <code>Time</code> in regular time units.\nSeek to a track’s <code>TimeStamp</code> in that track’s timebase …\nA <code>Track</code> is an independently coded media bitstream. A media …\nThe <code>TimeStamp</code> that was seeked to.\nGet a <code>BufStream</code> to read the packet data buffer …\nGet the duration of the packet in <code>TimeBase</code> units if no …\nGet an immutable slice to the packet buffer.\nThe codec parameters for the track.\nGets a list of all <code>Cue</code>s.\nThe packet buffer.\nGets the default track. If the <code>FormatReader</code> has a method …\nGet the duration of the packet in <code>TimeBase</code> units.\nThe duration of the packet. When gapless support is …\nEnable support for gapless playback. Default: <code>false</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA unique identifier for the track.\nA unique index for the <code>Cue</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestroys the <code>FormatReader</code> and returns the underlying media …\nThe language of the track. May be unknown.\nGets the metadata revision log.\nCreate a new <code>Packet</code> from a boxed slice.\nCreate a new <code>Packet</code> from a slice.\nCreate a new <code>Packet</code> with trimming information from a boxed …\nCreate a new <code>Packet</code> with trimming information from a slice.\nGet the next packet from the container.\nA list of <code>CuePoints</code>s that are contained within this <code>Cue</code>. …\nIf a <code>FormatReader</code> requires a seek index, but the container …\nThe <code>formats</code> module prelude.\nThe <code>TimeStamp</code> required for the requested seek.\nSeek, as precisely as possible depending on the mode, to …\nIf a seek index needs to be built, this value determines …\nThe offset of the first frame in the <code>CuePoint</code> relative to …\nThe starting timestamp in number of frames from the start …\nA list of <code>Tag</code>s associated with the <code>Cue</code>.\nA list of <code>Tag</code>s associated with the <code>CuePoint</code>.\nThe track identifier of the track this packet belongs to.\nThe track the seek was relative to.\nGets a list of tracks in the container.\nGet the number of frames to trim from the end of the …\nWhen gapless support is enabled, this is the number of …\nGet the number of frames to trim from the start of the …\nWhen gapless support is enabled, this is the number of …\nAttempt to instantiate a <code>FormatReader</code> using the provided …\nGet the timestamp of the packet in <code>TimeBase</code> units.\nThe timestamp of the packet. When gapless support is …\nHelper utilities for implementing <code>FormatReader</code>s.\nThe <code>Time</code> to seek to.\nIf <code>Some</code>, specifies which track’s timestamp should be …\nSpecifies which track <code>ts</code> is relative to.\nThe <code>TimeStamp</code> to seek to.\nThe desired timestamp can be found at, or after, the …\nThe desired timestamp can be found within the range. The …\nA <code>SeekIndex</code> stores <code>SeekPoint</code>s (generally a sample or frame …\nA <code>SeekPoint</code> is a mapping between a sample or frame number …\n<code>SeekSearchResult</code> is the return value for a search on a …\nThe <code>SeekIndex</code> is empty so the desired timestamp could not …\nThe desired timestamp can be found before, the <code>SeekPoint</code>. …\nThe byte offset of the <code>SeekPoint</code>s timestamp relative to a …\nThe frame or sample timestamp of the <code>SeekPoint</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a <code>SeekPoint</code> into the index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of frames the <code>SeekPoint</code> covers.\nCreate an empty <code>SeekIndex</code>\nSearch the index to find a bounded range of bytes wherein …\nGiven a <code>Packet</code>, the encoder delay in frames, and the …\n<code>BitReaderLtr</code> reads bits from most-significant to …\n<code>BitReaderRtl</code> reads bits from least-significant to …\n<code>BitStreamLtr</code> reads bits from most-significant to …\n<code>BitStreamRtl</code> reads bits from least-significant to …\nA <code>BufReader</code> reads bytes from a byte buffer.\nA <code>FiniteBitStream</code> is a bit stream that has a known length …\nA <code>FiniteStream</code> is a stream that has a known length in …\n<code>MediaSource</code> is a composite trait of <code>std::io::Read</code> and …\n<code>MediaSourceStream</code> is the main reader type for Symphonia.\n<code>MediaSourceStreamOptions</code> specifies the buffering behaviour …\nA <code>Monitor</code> provides a common interface to examine the …\nA <code>MonitorStream</code> is a passive stream that observes all …\n<code>ReadBitsLtr</code> reads bits from most-significant to …\n<code>ReadBitsRtl</code> reads bits from least-significant to …\n<code>ReadBytes</code> provides methods to read bytes and interpret …\n<code>ReadOnlySource</code> wraps any source implementing <code>std::io::Read</code> …\nA <code>ScopedStream</code> restricts the number of bytes that may be …\n<code>SeekBuffered</code> provides methods to seek within the buffered …\nGets the number of bits left unread.\nThe maximum buffer size. Must be a power of 2. Must be &gt; …\nReturns the length in bytes, if available. This may be an …\nReturns the length of the the stream in bytes.\nReturns the length of the the <code>ScopedStream</code>.\nReturns the number of bytes available for reading.\nReturns the number of bytes available to read.\nReturns the number of bytes that have been read.\nReturns the number of bytes read.\nEnsures that <code>len</code> bytes will be available for backwards …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the underlying reader.\nGets a reference to the underlying reader.\nIgnores the remainder of the <code>ScopedStream</code>.\nIgnores one bit from the stream or returns an error.\nIgnores one bit from the stream or returns an error.\nIgnores one bit from the stream or returns an error.\nIgnores one bit from the stream or returns an error.\nIgnores the specified number of bits from the stream or …\nIgnores the specified number of bits from the stream or …\nIgnores the specified number of bits from the stream or …\nIgnores the specified number of bits from the stream or …\nIgnores the specified number of bytes from the stream or …\nReturns an immutable reference to the inner stream.\nReturns a mutable reference to the inner stream.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the <code>ScopedStream</code> to the inner stream.\nUnwraps this <code>ReadOnlySource&lt;R&gt;</code>, returning the underlying …\nReturns if the source is seekable. This may be an …\nInstantiate a new <code>BitStreamLtr</code> with the given source.\nInstantiate a new <code>BitReaderLtr</code> with the given buffer.\nInstantiate a new <code>BitStreamRtl</code> with the given buffer.\nInstantiate a new <code>BitReaderRtl</code> with the given buffer.\nInstantiate a new <code>BufReader</code> with a given byte buffer.\nInstantiates a new <code>ScopedStream</code> with an upper limit on the …\nInstantiates a new <code>ReadOnlySource&lt;R&gt;</code> by taking ownership …\nGets the position of the stream.\nReads four bytes from the stream and interprets them as a …\nReads four bytes from the stream and interprets them as a …\nReads two bytes from the stream and interprets them as an …\nReads three bytes from the stream and interprets them as …\nReads four bytes from the stream and interprets them as a …\nReads eight bytes from the stream and interprets them as …\nReads two bytes from the stream and interprets them as an …\nReads three bytes from the stream and interprets them as …\nReads four bytes from the stream and interprets them as an …\nReads eight bytes from the stream and interprets them as …\nReads and returns a single bit or returns an error.\nReads and returns a single bit or returns an error.\nReads and returns a single bit or returns an error.\nReads and returns a single bit or returns an error.\nReads and returns up to 32-bits or returns an error.\nReads and returns up to 32-bits or returns an error.\nReads and returns up to 32-bits or returns an error.\nReads and returns up to 32-bits or returns an error.\nReads up to 32-bits and interprets them as a signed two’…\nReads up to 32-bits and interprets them as a signed two’…\nReads up to 32-bits and interprets them as a signed two’…\nReads up to 32-bits and interprets them as a signed two’…\nReads and returns up to 64-bits or returns an error.\nReads and returns up to 64-bits or returns an error.\nReads and returns up to 64-bits or returns an error.\nReads and returns up to 64-bits or returns an error.\nReads up to 64-bits and interprets them as a signed two’…\nReads up to 64-bits and interprets them as a signed two’…\nReads up to 64-bits and interprets them as a signed two’…\nReads up to 64-bits and interprets them as a signed two’…\nRead a single bit as a boolean value or returns an error.\nRead a single bit as a boolean value or returns an error.\nRead a single bit as a boolean value or returns an error.\nRead a single bit as a boolean value or returns an error.\nReads up-to the number of bytes requested, and returns a …\nReads exactly the number of bytes requested, and returns a …\nReads up-to the number of bytes required to fill buf or …\nReturns a reference to the remaining bytes in the buffer …\nReturns a reference to the next <code>len</code> bytes in the buffer …\nReads exactly the number of bytes required to fill be …\nGets the number of bytes buffered and read.\nReads a single byte from the stream and returns it or an …\nReads a codebook value from the <code>BitStream</code> using the …\nReads a codebook value from the <code>BitStream</code> using the …\nReads two bytes from the stream and returns them in …\nReads four bytes from the stream and interprets them as a …\nReads four bytes from the stream and interprets them as a …\nReads two bytes from the stream and interprets them as an …\nReads three bytes from the stream and interprets them as …\nReads four bytes from the stream and interprets them as an …\nReads eight bytes from the stream and interprets them as …\nReads a single signed byte from the stream and returns it …\nReads four bytes from the stream and returns them in …\nReads three bytes from the stream and returns them in …\nReads two bytes from the stream and interprets them as an …\nReads three bytes from the stream and interprets them as …\nReads four bytes from the stream and interprets them as an …\nReads eight bytes from the stream and interprets them as …\nReads a single unsigned byte from the stream and returns …\nReads and returns a unary ones encoded integer or an error.\nReads and returns a unary ones encoded integer or an error.\nReads and returns a unary ones encoded integer or an error.\nReads and returns a unary ones encoded integer or an error.\nReads and returns a unary ones encoded integer that is …\nReads and returns a unary ones encoded integer that is …\nReads and returns a unary ones encoded integer or an error.\nReads and returns a unary ones encoded integer or an error.\nReads and returns a unary zeros encoded integer or an …\nReads and returns a unary zeros encoded integer or an …\nReads and returns a unary zeros encoded integer or an …\nReads and returns a unary zeros encoded integer or an …\nReads and returns a unary zeros encoded integer that is …\nReads and returns a unary zeros encoded integer that is …\nReads and returns a unary zeros encoded integer that is …\nReads and returns a unary zeros encoded integer that is …\nDiscards any saved bits and resets the <code>BitStream</code> to …\nDiscards any saved bits and resets the <code>BitStream</code> to …\nDiscards any saved bits and resets the <code>BitStream</code> to …\nDiscards any saved bits and resets the <code>BitStream</code> to …\nReads bytes from the stream into a supplied buffer until a …\nReads bytes from a stream into a supplied buffer until a …\nScans up-to <code>scan_len</code> bytes from the stream until a byte …\nScans up-to <code>scan_len</code> bytes from the stream until a byte …\nSeek within the buffered data to an absolute position in …\nSeek within the buffered data relative to the current …\nSeek backwards within the buffered data.\nGet the number of bytes buffered but not yet read.\nThe <code>vlc</code> module provides support for decoding …\n<code>BitOrder</code> describes the relationship between the order of …\n<code>Codebook</code> is a variable-length code decoding table that may …\n<code>CodebookBuilder</code> generates a <code>Codebook</code> using a provided …\n<code>CodebookEntry</code> provides the functions required for an entry …\n<code>Entry16x16</code> is a codebook entry for 16-bit values with …\n<code>Entry16x32</code> is a codebook entry for 16-bit values with …\n<code>Entry16x8</code> is a codebook entry for 16-bit values with codes …\n<code>Entry32x16</code> is a codebook entry for 32-bit values with …\n<code>Entry32x32</code> is a codebook entry for 32-bit values with …\n<code>Entry32x8</code> is a codebook entry for 32-bit values with codes …\n<code>Entry8x16</code> is a codebook entry for 8-bit values with codes …\n<code>Entry8x32</code> is a codebook entry for 8-bit values with codes …\n<code>Entry8x8</code> is a codebook entry for 8-bit values with codes …\nThe maximum jump offset.\nThe type of a jump offset in this entry.\nThe provided codeword have bits in the reverse order as …\nThe type of a value in this entry.\nThe provided codewords have bits in the same order as the …\nSpecify the maximum number of bits that should be consumed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>Codebook</code> is empty.\nReturns <code>true</code> if this entry is a jump entry.\nReturns <code>true</code> if this entry is a value entry.\nGet the number of bits to read after jumping in the table.\nGet the position in the table to jump to.\nConstruct a <code>Codebook</code> using the given codewords, their …\nInstantiates a new <code>CodebookBuilder</code>.\nCreate a new jump entry.\nInstantiates a new <code>CodebookBuilder</code> for sparse codebooks.\nCreates a new value entry.\nGets the value.\nGet the length of the value in bits.\nA binary buffer.\nA boolean value.\n<code>ColorMode</code> indicates how the color of a pixel is encoded in …\nUse the a reasonable default specified by the <code>FormatReader</code> …\nEach pixel in the <code>Visual</code> stores its own color information.\nA flag or indicator. A flag carries no data, but the …\nA floating point number.\nEach pixel in the <code>Visual</code> stores an index into a color …\n<code>Limit</code> defines an upper-bound on how much of a resource …\nSpecify the upper limit of the resource. Units are case …\nA reference to the metadata inside of a MetadataLog.\n<code>MetadataBuilder</code> is the builder for <code>Metadata</code> revisions.\n<code>MetadataLog</code> is a container for time-ordered <code>Metadata</code> …\n<code>MetadataOptions</code> is a common set of options that all …\n<code>Metadata</code> is a container for a single discrete revision of …\nDo not impose any limit.\nA signed integer.\nA 2 dimensional (width and height) size type.\n<code>StandardTagKey</code> is an enumeration providing standardized …\n<code>StandardVisualKey</code> is an enumeration providing standardized …\nA string. This is also the catch-all type for tags with …\nA <code>Tag</code> encapsulates a key-value pair of metadata.\nAn unsigned integer.\nA <code>Tag</code> value.\n<code>VendorData</code> is any binary metadata that is proprietary to a …\nA <code>Visual</code> is any 2 dimensional graphic.\nAdd a <code>Tag</code> to the metadata.\nAdd <code>VendorData</code> to the metadata.\nAdd a <code>Visual</code> to the metadata.\nThe number of bits-per-pixel (aka bit-depth) of the …\nThe color mode of the <code>Visual</code>.\nGets an immutable reference to the current, and therefore …\nThe data of the <code>Visual</code>, encoded as per <code>media_type</code>.\nThe vendor data.\nThe dimensions of the <code>Visual</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe height in pixels.\nA text representation of the vendor’s application …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the <code>Tag</code>’s key string was recognized and …\nReturns <code>true</code> if the current metadata revision is the …\nA key string indicating the type, meaning, or purpose of …\nThe maximum size limit in bytes that a tag may occupy in …\nGets the numeric limit of the limit, or default value. If …\nThe maximum size limit in bytes that a visual (picture) …\nThe Media Type (MIME Type) used to encode the <code>Visual</code>.\nYield the constructed <code>Metadata</code> revision.\nReturns a reducable reference to the metadata inside the …\nInstantiates the <code>MetadataReader</code> with the provided …\nCreate a new <code>Tag</code>.\nInstantiate a new <code>MetadataBuilder</code>.\nIf there are newer <code>Metadata</code> revisions, advances the …\nPushes a new <code>Metadata</code> revision onto the log.\nRead all metadata and return it if successful.\nSkips to, and gets an immutable reference to the latest, …\nIf the <code>Tag</code>’s key string is commonly associated with a …\nGets an immutable slice to the <code>Tag</code>s in this revision.\nAny tags associated with the <code>Visual</code>.\nThe usage and/or content of the <code>Visual</code>.\nThe value of the <code>Tag</code>.\nGets an immutable slice to the <code>VendorData</code> in this revision.\nGets an immutable slice to the <code>Visual</code>s in this revision.\nThe width in pixels.\n<code>Descriptor</code> provides declarative information about …\nInstantiation function for a <code>FormatReader</code>.\nA <code>Hint</code> provides additional information and context when …\n<code>Instantiate</code> is an enumeration of instantiation functions …\nInstantiation function for a <code>MetadataReader</code>.\n<code>Probe</code> scans a <code>MediaSourceStream</code> for metadata and container …\n<code>ProbeResult</code> contains the result of a format probe …\nMetadata that came from the <code>metadata</code> field of <code>ProbeResult</code>.\nThe <code>QueryDescriptor</code> trait indicates that the implementer …\nA list of case-insensitive file extensions that are …\nSearches the provided <code>MediaSourceStream</code> for a container …\nAn instance of a <code>FormatReader</code> for the probed format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the metadata that was found during probing.\nAn instantiation function.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner metadata log, if it was present.\nA longer, more descriptive, string identifying the codec.\nA byte-string start-of-stream marker that will be searched …\nA log of <code>Metadata</code> revisions read during the probe …\nAdd a MIME/Media-type <code>Hint</code>.\nA list of case-insensitive MIME types that are generally …\nInstantiate an empty <code>Hint</code>.\nSearches the provided <code>MediaSourceStream</code> for metadata or a …\nReturns a list of descriptors.\nRegister a single <code>Descriptor</code>.\nRegister all <code>Descriptor</code>s supported by the parameterized …\nUsing the provided context buffer, score calculate and …\nA function to score a context buffer.\nA short ASCII-only string identifying the codec.\nAdd a file extension <code>Hint</code>.\nThe effective number of bits of the valid (clamped) sample …\nSingle precision (32-bit) floating point.\nDouble precision (64-bit) floating point.\nA unique enum value representing the sample format. This …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe mid-point value between the maximum and minimum sample …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nSigned 16-bit integer.\nSigned 24-bit integer.\nSigned 32-bit integer.\nSigned 8-bit integer.\n<code>Sample</code> provides a common interface for manipulating sample…\nSampleFormat describes the data encoding for an audio …\nUnsigned 16-bit integer.\nUnsigned 24-bit integer.\nUnsigned 32-bit integer.\nUnsigned 8-bit integer.\nIf the sample format does not use the full range of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA signed 24-bit integer sample with an internal signed …\nGet the underlying <code>u32</code> backing this <code>u24</code>.\nGet the underlying <code>i32</code> backing this <code>i24</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the underlying <code>i32</code> backing this <code>i24</code>.\nGet the underlying <code>u32</code> backing this <code>u24</code>.\nReturn the memory representation of this <code>u24</code> as a byte …\nReturn the memory representation of this <code>i24</code> as a byte …\nAn unsigned 24-bit integer sample with an internal …\nA <code>Duration</code> indicates a positive span of time.\n<code>Time</code> represents a duration of time in seconds, or the …\nA <code>TimeBase</code> is the conversion factor between time, …\nA <code>TimeStamp</code> represents an instantenous instant in time …\nAccurately calculates a <code>Time</code> using the <code>TimeBase</code> and the …\nAccurately calculates a <code>TimeStamp</code> from the given <code>Time</code> …\nThe denominator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>TimeBase</code>. Panics if either the numerator or …\nThe numerator.\nUtilities for bit manipulation.\nUtilities for clamping numeric values to a defined range.\nReturns true if the unsigned 16-bit integer contains one …\nReturns true if the unsigned 32-bit integer contains one …\nReturns true if the unsigned 64-bit integer contains one …\nMasks the bit at the specified bit index.\nMasks all bits with an index less than idx.\nMasks all bits with an index less than or equal to idx.\nMasks out all bits in positions less than upper, but …\nMasks all bits with an index greater than idx.\nMasks all bits with an index greater than or equal to idx.\nSign extends an arbitrary, 16-bit or less, signed two’s …\nSign extends an arbitrary, 32-bit or less, signed two’s …\nSign extends an arbitrary, 64-bit or less, signed two’s …\nSign extends an arbitrary, 8-bit or less, signed two’s …\nReturns the number of trailing ones in an unsigned 16-bit …\nReturns the number of trailing ones in an unsigned 32-bit …\nReturns the number of trailing ones in an unsigned 64-bit …\nReturns the number of trailing ones in an unsigned 8-bit …\nClamps the given value to the [-1.0, 1.0] range.\nClamps the given value to the [-1.0, 1.0] range.\nClamps the given value to the [-32_767, 32_768] range.\nClamps the given value to the [-8_388_608, 8_388_607] …\nClamps the given value to the [-2_147_483_648, …\nClamps the given value to the [-128, 127] range.\nClamps the given value to the [0, 65_535] range.\nClamps the given value to the [0, 16_777_215] range.\nClamps the given value to the [0, 4_294_967_295] range.\nClamps the given value to the [0, 255] range.")