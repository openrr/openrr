searchState.loadedDescShard("abi_stable", 0, "For Rust-to-Rust ffi, with a focus on creating libraries …\n<code>const</code>-equivalents of the associated types.\nDynTrait implements ffi-safe trait objects, for a …\nFor the <code>std::error::Error</code> trait\nFor the <code>std::fmt::Write</code> trait\nThe <code>GetStaticEquivalent</code> macro derives the …\nDefines the usable/required traits when creating a …\nFor the <code>std::io::BufRead</code> trait\nFor the <code>std::io::Read</code> trait\nFor the <code>std::io::Seek</code> trait\nFor the <code>std::io::Write</code> trait\nWhether this type has a single invalid bit-pattern.\nThe layout of the type provided by implementors.\nThe header used to identify the version number of …\nUse this macro to get the type of a <code>Tuple*</code> with the types …\nChanging this to require/unrequire in minor versions, is …\nRepresents a type whose layout is stable.\nThe StableAbi derive macro allows one to implement the …\nChanging this to require/unrequire in minor versions, is …\nChanging this to require/unrequire in minor versions, is …\ntypes and traits related to abi stability.\nUtilities for const contexts.\nImplements the <code>RootModule::root_module_statics</code> associated …\nConstructs a <code>DynTrait&lt;P, I&gt;</code> with the default value for <code>P</code>.\nDeserializes a <code>DynTrait&lt;&#39;borr, _&gt;</code> from a proxy type, by …\nAdditional docs for macros, and guides.\nUnwraps the <code>DynTrait&lt;_&gt;</code> into a reference of the concrete …\nUnwraps the <code>DynTrait&lt;_&gt;</code> into a mutable reference of the …\nUnwraps the <code>DynTrait&lt;_&gt;</code> into a pointer of the concrete …\nTypes and traits related to type erasure.\nThis attribute is used for functions which export a module …\nExtends the <code>RVec&lt;Item&gt;</code> with the <code>self</code> Iterator.\nExtends the <code>RVec&lt;Item&gt;</code> with the back of the <code>self</code> …\nUse this to make sure that you handle panics inside …\nFfi wrapper for types defined outside the standard library.\nTypes used in documentation examples.\nReturns the argument unchanged.\nConstructs the <code>DynTrait&lt;_&gt;</code> from a pointer to the erased …\nConstructs the <code>DynTrait&lt;_&gt;</code> from a value with a <code>&#39;borr</code> …\nThis function allows constructing a DynTrait in a …\nConstructs the <code>DynTrait&lt;_&gt;</code> from a pointer to a type that …\nConstructs the <code>DynTrait&lt;_&gt;</code> from a type that doesn’t …\nContains the <code>InlineStorage</code> trait,and related items.\nFor inferring the <code>I</code> type parameter.\nCalls <code>U::from(self)</code>.\nTraits and types related to loading an abi_stable dynamic …\nConstructs an <code>ItemInfo</code>, with information about the place …\nZero-sized types .\nContains types and traits for nonexhaustive enums.\nGets teh <code>nth</code> element from the back of the iterator.\nConstructs a <code>NulStr</code> from a string literal.\nConstructs a <code>NulStr</code> from a string literal, truncating the …\nInstantiates a <code>VersionStrings</code> with the major.minor.patch …\nTraits for pointers.\nTypes,traits,and functions used by prefix-types.\nCreates a shared reborrow of this DynTrait.\nCreates a mutable reborrow of this DynTrait.\nMiscelaneous items re-exported from core_extensions.\nTypes and submodules for doing runtime reflection.\nA macro to construct <code>RSlice</code>s.\nConstructs <code>RStr</code> constants from <code>&amp;&#39;static str</code> constants.\nEquivalent to <code>?</code> for <code>RResult</code>.\nEquivalent to <code>?</code> for <code>ROption</code>.\nUse this macro to construct a <code>abi_stable::std_types::Tuple*</code>\nConstructs an <code>RVec</code> using the same syntax that the <code>std::vec</code> …\nGets an <code>RMut</code> pointing to the erased object.\nGets an <code>RRef</code> pointing to the erased object.\nGets a mutable reference pointing to the erased object.\nGets a reference pointing to the erased object.\nA vtable used by <code>#[sabi_trait]</code> derived trait objects.\nThe <code>sabi_extern_fn</code> attribute macro allows defining …\nGets access to the extra value that was stored in this …\nAllows checking whether 2 <code>DynTrait&lt;_&gt;</code>s have a value of the …\nReturns the address of the wrapped object.\nContains items related to the <code>#[sabi_trait]</code> attribute.\nThis attribute generates an ffi-safe trait object on the …\nffi-safe types that aren’t wrappers for other types.\nCalls the <code>f</code> callback with an <code>MovePtr</code> pointing to the …\nIt serializes a <code>DynTrait&lt;_&gt;</code> into a string by using …\nDoes a shallow clone of the object, just incrementing the …\nEagerly skips n elements from the iterator.\nAllows declaring a <code>StaticRef</code> inherent associated <code>const</code>ant …\nContains many ffi-safe equivalents of standard library …\nConstructs a <code>Tag</code>, a dynamically typed value for users to …\nCan be used to construct <code>CompGenericParams</code>, when manually …\nWhere miscellaneous traits reside.\nTypes for modeling the layout of a datatype\nTypes used to represent values at compile-time, eg: …\nUnwraps the <code>DynTrait&lt;_&gt;</code> into a reference to T, without …\nUnwraps the <code>DynTrait&lt;_&gt;</code> into a mutable reference to T, …\nUnwraps the <code>DynTrait&lt;_&gt;</code> into a pointer to T, without …\nUtility functions.\nConstructs an DynTrait from an erasable pointer and an …\nA trait object used to check equality between const …\nChecks that the layout of <code>interface</code> is compatible with …\nContains items for adding checks to individual types.\nReturns the argument unchanged.\nContains the <code>GetStaticEquivalent_</code> trait and related items.\nCalls <code>U::from(self)</code>.\nCompares this to another <code>ConstGeneric</code> for equality, …\nConstructs a ConstGeneric from a reference.\nWhere the StableAbi trait is declared,as well as related …\nAllows defining extra checks for a type.\nA custom error returned by the ExtraChecker or the …\nAn ffi-safe equivalent of <code>Box&lt;dyn ExtraChecks&gt;</code>.\nThe errors returned from <code>ExtraChecks</code> and …\nAn ffi-safe equivalent of <code>&amp;&#39;a dyn ExtraChecks</code>.\nAn ffi-safe equivalent of <code>&amp;&#39;static dyn ExtraChecks</code>.\nA type alias for the const-constructible <code>ExtraChecks_TO</code>.\nThe trait object for ExtraChecks.\nThis module is generated by the <code>#[sabi_trait]</code> attribute on …\nAn extension trait for <code>ExtraChecks</code> implementors.\nWhen trying to get a ExtraChecks trait object from …\nThe version of <code>ExtraChecks</code> that is stored in <code>TypeLayout</code>.\nThis checks that the layout of types coming from dynamic …\nWhen a type checking error happens within <code>TypeChecker</code>.\nErrors returned from <code>TypeChecker::local_check_compatibility</code>\nAn ffi-safe equivalent of &amp;’b mut dyn TypeChecker\nA type alias for the const-constructible <code>TypeChecker_TO</code>.\nThe trait object for TypeChecker.\nThis module is generated by the <code>#[sabi_trait]</code> attribute on …\nChecks that <code>self</code> is compatible another type which …\nChecks that <code>ìnterface</code> is compatible with <code>implementation.</code>\nCombines this ExtraChecks trait object with another one.\nAccesses the <code>ExtraChecks</code> field in <code>layout_containing_other</code>, …\nAllows one to access <code>other</code> downcast into <code>Self</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>ExtraChecksError::ExtraChecks</code> from an error.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that <code>ìnterface</code> is compatible with <code>implementation.</code>\nReturns the <code>TypeLayout</code>s owned or referenced by <code>self</code>.\nGets the type layout of <code>Self</code>(the type that implements …\nAllows defining extra checks for a type.\nAn alias for the underlying implementation of …\nA type alias for the const-constructible <code>ExtraChecks_TO</code>.\nA marker type describing the traits that are required when …\nThe trait object for ExtraChecks.\nConstructs this type\nChecks that <code>self</code> is compatible another type which …\nThis is the inherent equivalent of the trait method of the …\nCombines this ExtraChecks trait object with another one.\nThis is the inherent equivalent of the trait method of the …\nReturns the argument unchanged.\nConstructs this trait from a constant of a type that …\nConstructs this trait object from a pointer to a type that …\nConstructs this trait object from its underlying …\nConstructs this trait from a type that implements …\nCalls <code>U::from(self)</code>.\nReturns the <code>TypeLayout</code>s owned or referenced by <code>self</code>.\nThis is the inherent equivalent of the trait method of the …\nReborrows this trait object to a reference-based trait …\nReborrows this trait object to a mutable-reference-based …\nGets the type layout of <code>Self</code>(the type that implements …\nThis is the inherent equivalent of the trait method of the …\nConstructs this type\nThis checks that the layout of types coming from dynamic …\nAn alias for the underlying implementation of …\nA type alias for the const-constructible <code>TypeChecker_TO</code>.\nA marker type describing the traits that are required when …\nThe trait object for TypeChecker.\nChecks that <code>ìnterface</code> is compatible with <code>implementation.</code>\nThis is the inherent equivalent of the trait method of the …\nReturns the argument unchanged.\nConstructs this trait from a constant of a type that …\nConstructs this trait object from a pointer to a type that …\nConstructs this trait object from its underlying …\nConstructs this trait from a type that implements …\nCalls <code>U::from(self)</code>.\nChecks that <code>ìnterface</code> is compatible with <code>implementation.</code>\nThis is the inherent equivalent of the trait method of the …\nReborrows this trait object to a reference-based trait …\nReborrows this trait object to a mutable-reference-based …\nGets the <code>&#39;static</code> equivalent of a type,only for use in …\nA type that stands in for <code>Self</code>,used to create a <code>UTypeId</code> …\nThe <code>&#39;static</code> equivalent of <code>Self</code>\nUsed to avoid a <code>?Sized</code> bound on …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>const</code>-equivalents of the associated types.\n<code>const</code>-equivalents of the associated types.\nContains constants equivalent to the associated types in …\nWhether this type has a single invalid bit-pattern.\nWhether this type has a single invalid bit-pattern.\nThe layout of the type provided by implementors.\nThe layout of the type, provided by implementors.\nA type that only has a stable layout when a <code>PrefixRef</code> to …\nAllows one to ensure that a <code>T</code> implements <code>StableAbi</code>, while …\nRepresents a type whose layout is stable.\nAllows one to create the <code>TypeLayout</code> for any type <code>T</code>, by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the TypeLayout of <code>T: PrefixStableAbi</code>,\nGets the <code>UTypeId</code> returned by the <code>type_id</code> field.\nRetrieves the TypeLayout of <code>T: StableAbi</code>,\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the type uses non-zero value optimization, if true …\nA function to get the unique identifier for some type\nGets the absolute value of a usize subtraction.\nCreates an empty slice.\nThe base 2 logarithm of a usize.\nGets a u64 where the lowest <code>bit_count</code> bits are ones and …\nThe maximum of two <code>u64</code>s\nThe maximum of two <code>usize</code>s\nThe minimum and maximum of two <code>usize</code>s\nThe minimum of two <code>u64</code>s\nThe minimum of two <code>u64</code>s\nThe minimum of two <code>u64</code>s\nThe minimum of two <code>usize</code>s\nThis document describes what changes are valid/invalid for …\nPrefix-types are types that derive StableAbi along with the\nUsing the <code>#[sabi(kind(WithNonExhaustive(...)))]</code> helper …\nShared docs for inherent items of <code>sabi_trait</code> trait objects.\nHere are some problems and their solutions\nThis document describes all the things that are unsafe to …\nDescribes how <code>D</code> is deserialized, using a proxy to do so.\nDynTrait implements ffi-safe trait objects, for a …\nFor the <code>std::error::Error</code> trait\nFor the <code>std::fmt::Write</code> trait\nAn <code>InterfaceType</code> implementor which determines the …\nDefines the usable/required traits when creating a …\nFor the <code>std::io::BufRead</code> trait\nFor the <code>std::io::Read</code> trait\nFor the <code>std::io::Seek</code> trait\nFor the <code>std::io::Write</code> trait\nThe iterator item type.\nThe iterator item type.\nThe way to specify the expected <code>Iterator::Item</code> type for an …\nGets the expected <code>Iterator::Item</code> type for an <code>InterfaceType</code>,\nDescribes which traits are required by <code>Self: </code><code>InterfaceType</code>,\nDescribes which traits are required by <code>Self: </code><code>InterfaceType</code>,\nFor constructing a <code>RequiredTraits</code> constant.\nCsontructs a vtable.\nThe intermediate type.\nThe type that is deserialized and then converted into <code>D</code>, …\nDescribes which traits are required and enabled by the <code>I: </code>…\nChanging this to require/unrequire in minor versions, is …\nDetermines the intermediate type a <code>SerializeType</code> …\nDescribes how a type is serialized by <code>DynTrait</code>.\nChanging this to require/unrequire in minor versions, is …\nMetadata about a type.\nError for <code>DynTrait&lt;_&gt;</code> being downcasted into the wrong type …\nChanging this to require/unrequire in minor versions, is …\nA pointer to the vtable of <code>DynTrait</code>.\nAccessor to get the layout of the type,used for error …\nWhether the <code>std::clone::Clone</code> trait is required\nWhether the <code>std::cmp::Ord</code> trait is required\nWhether the <code>std::fmt::Debug</code> trait is required\nWhether the <code>std::default::Default</code> trait is required\nWhether the [<code>serde :: Deserialize</code>] trait is required\nWhether the <code>std::fmt::Display</code> trait is required\nWhether the <code>std::iter::DoubleEndedIterator</code> trait is …\nWhether the <code>std::error::Error</code> trait is required\nWhether the <code>std::fmt::Write</code> trait is required\nWhether the <code>std::hash::Hash</code> trait is required\nWhether the <code>std::io::BufRead</code> trait is required\nWhether the <code>std::io::Read</code> trait is required\nWhether the <code>std::io::Seek</code> trait is required\nWhether the <code>std::io::Write</code> trait is required\nWhether the <code>std::iter::Iterator</code> trait is required\nWhether the <code>std::cmp::PartialOrd</code> trait is required\nWhether the <code>std::cmp::PartialEq</code> trait is required\nWhether the <code>std::marker::Send</code> trait is required\nWhether the <code>serde::Serialize</code> trait is required\nWhether the <code>std::marker::Sync</code> trait is required\nWhether the <code>std::marker::Unpin</code> trait is required\nConverts the proxy type into <code>D</code>.\nAccessor method for the <code>VTable::drop_ptr</code> field.This is for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTypes that implement <code>InterfaceType</code>, used in examples.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the DynTrait, to handle the failure to downcast …\nWhether the <code>self</code> is the TypeInfo for the same type as <code>other</code>\nConstructs an RequiredTraits.\nPerforms the serialization into the proxy.\nFfi-safe trait objects for individual traits.\nAccessor method for the <code>VTable::type_info</code> field.This is …\nImplements <code>InterfaceType</code>, requiring …\nImplements <code>InterfaceType</code>, requiring <code>Send + Sync + Clone</code>\nImplements <code>InterfaceType</code>, requiring …\nImplements <code>InterfaceType</code>, requiring …\nImplements <code>InterfaceType</code>, requiring …\nImplements <code>InterfaceType</code>, requiring …\nImplements <code>InterfaceType</code>, requiring <code>Send + Sync + Default</code>\nImplements <code>InterfaceType</code>, requiring …\nImplements <code>InterfaceType</code>, requiring <code>std::io::Write</code>\nImplements <code>InterfaceType</code>, requiring …\nImplements <code>InterfaceType</code>, requiring …\nImplements <code>InterfaceType</code>, requiring <code>Unpin</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn ffi-safe equivalent of <code>Box&lt;dyn Debug + Display&gt;</code> (if …\nAn ffi-safe equivalent of <code>&amp;mut dyn std::hash::Hasher</code>.\nReborrows this <code>HasherObject</code> with a smaller lifetime.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a <code>HasherObject</code>.\nConstructs this <code>DebugDisplayObject</code>.\nConstructs a <code>DebugDisplayObject</code>.which doesn’t output …\nFfi-safe wrapper types around the crossbeam-channel …\nFfi-safe synchronization primitives,most of which are …\nFfi-safe equivalents of <code>serde_json</code> types.\nAn iterator which receives the values sent through the …\nAn iterator which receives the values sent through the …\nThe receiver end of a channel, which can be either bounded …\nThe sender end of a channel, which can be either bounded …\nCreates a channel which can hold up to <code>capacity</code> elements …\nReturns the amount of values the channel queue can hold.\nReturns the amount of values the channel queue can hold.\nClones this channel end,getting another handle into the …\nClones this channel end,getting another handle into the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an Iterator that receives values from the channel.\nCreates an Iterator that receives values from the channel.\nReturns true if there are no values in the channel queue.\nReturns true if there are no values in the channel queue.\nReturns true if the channel queue is full.\nReturns true if the channel queue is full.\nCreates an Iterator that receives values from the channel.\nReturns the amount of values in the channel queue.\nReturns the amount of values in the channel queue.\nCreates a receiver that can never receive any value.\nBlocks until a value is either received,or the the other …\nBlocks until a timeout to receive a value.\nBlocks until <code>value</code> is either sent,or the the other end is …\nBlocks until a timeout to send <code>value</code>.\nImmediately receives a value,or returns with an error.\nImmediately sends <code>value</code>,or returns with an error.\nCreates a channel which can hold an unbounded amount …\nContains an ffi-safe equivalent of <code>parking_lot::Mutex</code>.\nContains an ffi-safe wrapper for <code>parking_lot::Once</code>.\nContains an ffi-safe equivalent of <code>parking_lot::RwLock</code>.\nA mutual exclusion lock that allows dynamic mutable …\nA mutex guard,which allows mutable access to the data …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to its wrapped data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps this mutex into its wrapped data.\nAcquires a mutex,blocking the current thread until it can.\nConstructs a mutex,wrapping <code>value</code>.\nAttemps to acquire a mutex guard.\nAttempts to acquire a mutex guard for the <code>timeout</code> duration.\nAn ROnce that has already run.\nAn ROnce that is the middle of calling <code>call_once*</code>\nConstructs an ROnce.\nAn ROnce that hasn’t started running\nAn ROnce that panicked inside <code>call_once*</code>\nA synchronization primitive for running global …\nDescribes the running state of an ROnce.\nRuns an initialization function.\nRuns an initialization function,even if the ROnce is …\nWhether the ROnce has already finished running.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs an ROnce.\nWhether the ROnce is poisoned,requiring call_once_force to …\nGets the running state of this ROnce.\nA read guard,which allows shared access to the data inside …\nA read-write lock that allows dynamic mutable/shared …\nA write guard,which allows mutable access to the data …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to its wrapped data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps this lock into its wrapped data.\nConstructs a lock,wrapping <code>value</code>.\nAcquires a lock for reading,blocking the current thread …\nAttemps to acquire a lock for reading,failing if it is …\nAttempts to acquire a lock for reading,for the timeout …\nAttemps to acquire a lock for writing.\nAttempts to acquire a lock for writing,for the timeout …\nAcquires a lock for writing,blocking the current thread …\nAn ffi-safe equivalent of <code>Box&lt;serde_json::value::RawValue&gt;</code>\nAn ffi-safe equivalent of <code>&amp;serde_json::value::RawValue</code>\nGets a RawValueRef&lt;’_&gt; borrowing from this RawValueBox.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>RStr&lt;&#39;a&gt;</code> to a <code>RawValueRef&lt;&#39;a&gt;</code> without checking …\nConverts an <code>RString</code> to an <code>RawValueBox</code> without checking …\nConverts a <code>&amp;str</code> to a <code>RawValueRef&lt;&#39;a&gt;</code> without checking …\nConverts a <code>String</code> to an <code>RawValueBox</code> without checking …\nGets the json being serialized,as a <code>&amp;str</code>.\nGets the json being serialized,as a <code>&amp;str</code>.\nGets the json being serialized,as a <code>RStr&lt;&#39;a&gt;</code>.\nGets the json being serialized,as a <code>RStr&lt;&#39;a&gt;</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempts to convert a <code>&amp;&#39;a str</code> into a <code>RawValueRef&lt;&#39;a&gt;</code>.\nAttempts to convert a <code>String</code> into a <code>RawValueBox</code>.\nConstructs the <code>ValidTag::Bar</code> variant inside a <code>NonExhaustive</code>…\nConstructs the <code>ValidTag::Foo</code> variant inside a <code>NonExhaustive</code>…\nThis type is used in prefix type examples.\nThis is the prefix fields of <code>Module</code>, accessible through …\nThis is the pointer to the prefix of <code>Module</code>.\nThis type is used in prefix type examples.\nThis is the prefix fields of <code>PhantModule&lt; T &gt;</code>, accessible …\nThis is the pointer to the prefix of <code>PhantModule&lt; T &gt;</code>.\nConstructs the <code>ValidTag::Tag</code> variant inside a <code>NonExhaustive</code>…\nFor demonstrating ffi-safe non-exhaustive enums.\nAn alias for the traits that <code>NonExhaustive&lt;ValidTag,_,_&gt;</code> …\nDescribes the traits required when constructing a …\nAn alias for <code>NonExhaustive</code> wrapping a <code>ValidTag</code>.\nA marker type which implements StableAbi with the layout …\nThe default InlineStorage that <code>NonExhaustive</code> uses for …\nAccessor to get the layout of the type,used for error …\nAccessor to get the layout of the type,used for error …\nAccessor method for the <code>PhantModule::first</code> field.This is …\nAccessor method for the <code>Module::first</code> field.This is for a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccessor method for the <code>PhantModule::phantom</code> field.Returns …\nAccessor method for the <code>PhantModule::second</code> field.This is …\nAccessor method for the <code>Module::second</code> field.This is for a …\nAccessor method for the <code>PhantModule::third</code> field.Returns …\nAccessor method for the <code>Module::third</code> field.Returns …\nThe <code>AlignTo*</code> type which aligns <code>Self</code> to <code>ALIGNMENT</code>.\nFor getting the <code>AlignTo*</code> type which aligns <code>Self</code> to …\nFor getting the <code>AlignTo*</code> type which aligns <code>T</code> to <code>ALIGNMENT</code>.\nType used as the inline storage of a RSmallBox&lt;…\nHelper types related to the alignemnt of inline storage.\nAligns its contents to an address at a multiple of 1 bytes.\nAligns its contents to an address at a multiple of 1024 …\nAligns its contents to an address at a multiple of 128 …\nAligns its contents to an address at a multiple of 16 …\nAligns its contents to an address at a multiple of 16384 …\nAligns its contents to an address at a multiple of 2 bytes.\nAligns its contents to an address at a multiple of 2048 …\nAligns its contents to an address at a multiple of 256 …\nAligns its contents to an address at a multiple of 32 …\nAligns its contents to an address at a multiple of 32768 …\nAligns its contents to an address at a multiple of 4 bytes.\nAligns its contents to an address at a multiple of 4096 …\nAligns its contents to an address at a multiple of 512 …\nAligns its contents to an address at a multiple of 64 …\nAligns its contents to an address at a multiple of 8 bytes.\nAligns its contents to an address at a multiple of 8192 …\nAligns its contents to an address to an address at a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents the abi_stable version used by a compiled …\nA handle to the <code>AbiHeader</code> of a library.\nThe abi is incompatible. The error is opaque,since the …\nThe name of the dynamic library,which is the same on all …\nAll the constants of this trait and supertraits.\nAll the constants of this trait and supertraits.\nLike <code>Self::CONSTANTS</code>, except without including the type …\nLike <code>Self::CONSTANTS</code>, except without including the type …\nTells <code>LibHeader::from_constructor</code> whether to include the …\nThe path to the directory that contains the dynamic …\nThe full path to the dynamic library.\nWhen a function/static does not exist.\nThe version numbers of the library was incompatible.\nFor converting the return value of a <code>#[export_root_module]</code> …\nThe type used to check that this is a compatible abi_stable\nWhen Rust changes how it implements the C abi,\nWhether the ABI of a root module is checked.\nUsed to check the layout of modules returned by …\nAll the possible errors that could happen when loading a …\nThe path a library is loaded from.\nWhat naming convention to expect when loading a library …\nThere could have been 0 or more errors in the function.\nThe module that is loaded in the success case.\nThe name of the library used in error messages.\nExclude the layout of the root module\nThe ABI is not checked\nLoads a dynamic library at <code>&lt;folder&gt;/&lt;name&gt;.extension</code>\nWhen a library can’t be loaded, because it doesn’t …\nThe version string could not be parsed into a version …\nThe name of the <code>static</code> that contains the <code>LibHeader</code> of an …\nA <code>NulStr</code> equivalent of <code>ROOT_MODULE_LOADER_NAME</code>.\nA nul-terminated equivalent of <code>ROOT_MODULE_LOADER_NAME</code>.\nA handle to any dynamically loaded library, not …\nWhen the root loader function returned an error normally\nThe root module of a dynamic library, which may contain …\nError returned by the root module\nAll the constants of the <code>RootModule</code> trait for some erased …\nThe errors that a <code>#[export_root_module]</code> function can …\nThe return type of the function that the …\nLoads a dynamic library at …\nWhen the root loader function panicked\nThe value of the AbiHeader stored in dynamic libraries …\nThe version number of the library that this is a root …\nInclude the layout of the root module\nThe ABI is checked\nGets the AbiHeaderRef of the library at the path.\nGets the AbiHeaderRef of a library.\nThe major abi version of abi_stable\nThe minor abi version of abi_stable\nThe name of the dynamic library,which is the same on all …\nThis module runs tests on the C abi as defined by Rust, to …\nFunctions used to test that the C abi is the same in both …\nGets the root module,first checking that the layout of the …\nUtilities for use while developing dynamic libraries.\nChecks that the layout of the <code>M</code> root module from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a LibHeader from the root module loader.\nConstructs a LibHeader from the module.\nGets access to a static/function declared by the library.\nReturns the path the library would be loaded from,given a …\nReturns the path the library would be loaded from,given a …\nGets the root module,returning None if the module is not …\nGets the root module,returning None if the module is not …\nGets the RawLibrary of the module, returning None if the …\nGets the RawLibrary of the module, returning None if the …\nChecks that the library is compatible, returning the root …\nChecks that the version number of the library is …\nDefines behavior that happens once the module is loaded.\nDefines behavior that happens once the module is loaded.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>RootModuleError</code> into a <code>LibraryError</code>, with …\nConverts this into an <code>Option</code>.\nPerforms the conversion\nChecks whether this AbiHeader is compatible with <code>other</code>.\nChecks whether the abi_stable version of this AbiHeader is …\nGets the layout of the root module.\nThe (optional) type layout constant of the root module.\nGets the LibHeader of the library at the path.\nGets the LibHeader of a library.\nLoads the dynamic library at the <code>full_path</code> path.\nLoads this module from the path specified by <code>where_</code>, first …\nLoads this module from the path specified by <code>where_</code>, first …\nLoads this module from the directory specified by <code>where_</code>, …\nLoads this module from the directory specified by <code>where_</code>, …\nLoads this module from the file at <code>path_</code>, first loading …\nLoads this module from the file at <code>path_</code>, first loading …\nLoads the root module,with a closure which either returns …\nLoads the root module,with a closure which either returns …\nA magic string used to check that this is actually …\nThe name of the library used in error messages.\nGets the full path a library would be loaded from,\nReallocates the error using the current global allocator, …\nAll the important constants of a <code>RootModule</code> for some …\nGets the statics for Self.\nGets the root module without checking that the layout of <code>M</code> …\nGets the LibHeader of a library.\nThe version string of the library the module is being …\nThe version number of the library this was created from.\nThe cause of the error\nThe cause of the error\nThe error returned by the <code>#[export_root_module]</code> function.\nThe path to the library\nThe path to the library\nThe name of the function/static.Does not have to be utf-8.\nFunctions used to test that the C abi is the same in both …\nFunctions used to test that the C abi is the same in both …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTests that the abi (as defined by the compiler) of the …\nReturns the path in the target directory to the last …\nConstructs an <code>UnsafeIgnoredType</code>.\nConstructs a <code>NonOwningPhantom</code>\nUsed by vtables/pointers to signal that the type has been …\nUsed by pointers to vtables/modules to signal that the …\nConstructs a <code>UnsyncUnsend</code>\nConstructs a <code>UnsyncSend</code>\nConstructs a <code>SyncUnsend</code>\nConstructs an <code>UnsafeIgnoredType</code>.\nConstructs a <code>NonOwningPhantom</code>\nAn ffi-safe equivalent of a <code>PhantomData&lt;fn()-&gt;T&gt;</code>\nZero-sized marker type used to signal that even though a …\nMarker type used to mark a type as being <code>Send + Sync</code>.\nMarker type used to mark a type as being <code>!Send + Sync</code>.\nMarkerType which ignores its type parameter in its …\nMarker type used to mark a type as being <code>Send + !Sync</code>.\nMarker type used to mark a type as being <code>!Send + !Sync</code>.\nThis field must be public to promise (for semver) that a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nArguments for <code>assert_correct_storage</code>\nThe values of the discriminants of each variant.\nThe default InterfaceType, used to determine the traits …\nThe default storage type, used to store this enum inside …\nDescribes how a nonexhaustive enum is deserialized.\nThe type of the discriminant of the wrapped enum.\nThe type of the discriminant.\nInformation about the enum.\nContains miscelaneous information about an enum.\nDescribes the discriminant of an enum,and its valid values.\nGets the vtable of <code>NonExhaustive&lt;Self,S,I&gt;</code>.\nA marker type which describes the layout of this enum in …\nA generic type for all ffi-safe non-exhaustive enums.\nThe type of a <code>NonExhaustive</code> wrapping the enum <code>E</code>, using <code>E</code>’…\nQueries the marker type which describes the layout of this …\nUsed to abstract over the reference-ness of <code>NonExhaustive</code> …\nThe type of a <code>NonExhaustive&lt;&gt;</code> wrapping the enum E, using …\nThe type of a <code>NonExhaustive&lt;&gt;</code> wrapping the enum E, using a …\nThe intermediate type the <code>Enum</code> is converted into,to …\nThe intermediate type the <code>NonExhaustive</code> is converted …\nDescribes how some enum is serialized.\nConstant where both types are unknown.\nAn error for a situation where a <code>NonExhaustive&lt;&gt;</code> could not …\nThe vtable\nThe vtable\nMarker trait for types that abi_stable supports as enum …\nwraps a reference to this <code>NonExhaustive&lt;&gt;</code> into a reference …\nUnwraps a mutable reference to this <code>NonExhaustive&lt;&gt;</code> into a …\nAsserts that the size and alignment of an enum are valid …\nAsserts that the size and alignment of an enum aree valid …\nDeserializes an enum from its proxy type.\nDeserializes a <code>NonExhaustive&lt;_&gt;</code> from a proxy.\nGets miscelaneous information about the wrapped enum\nThe stringified type name of the enum.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the value of the discriminant of the enum.\nGets the discriminant of the wrapped enum.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this into a boxed error.\nUnwraps this <code>NonExhaustive&lt;&gt;</code> into the original enum.\nGets the <code>non_exhaustive</code> field.\nWhether <code>discriminant</code> is one of the valid discriminants for …\nReturns whether the discriminant of this enum is valid in …\nConstructs a <code>NonExhaustive&lt;&gt;</code> from <code>value</code> using its default …\nThis field is either a <code>NonExhaustive&lt;&gt;</code> or a …\nSerializes an enum into its proxy type.\nIt serializes a <code>NonExhaustive&lt;_&gt;</code> into a proxy.\nThe stringified type name of the storage.\nTransmute this <code>NonExhaustive&lt;E,S,I&gt;</code> into …\nTransmute this <code>&amp;mut NonExhaustive&lt;E,S,I&gt;</code> into …\nTransmute this pointer to a <code>NonExhaustive&lt;E,S,I&gt;</code> into a …\nTransmute this <code>&amp;NonExhaustive&lt;E,S,I&gt;</code> into …\nThe name of a type,eg:<code>Foo</code> for a <code>Foo&lt;u8&gt;</code>.\nThe names of the variants of the enum,separated by ‘;’.\nGets an iterator over the names of the variants of the …\nConstructs a <code>NonExhaustive&lt;&gt;</code> from <code>value</code> using its default …\nConstructs a <code>NonExhaustive&lt;&gt;</code> from <code>value</code> using its default …\nConstructs a <code>NonExhaustive&lt;&gt;</code> from <code>value</code> using both a …\nFor getting a mutable raw pointer to the value that this …\nFor getting a const raw pointer to the value that this …\nDetermines whether the referent of a pointer is dropped …\nWhether the pointer can be transmuted to an equivalent …\nDetermines whether the pointer is deallocated.\nWhat kind of pointer this is.\nTrait for non-owning pointers that are …\nThe value-level version of the <code>Kind</code> associated type.\nThe kind of the pointer.\na <code>&amp;mut T</code>-like pointer\nFor owned pointers, allows extracting their contents …\nThe type-level equivalent of <code>PointerKind::MutReference</code>.\nThe type-level equivalent of <code>PointerKind::Reference</code>.\nThe type-level equivalent of <code>PointerKind::SmartPointer</code>.\nDescribes the kind of a pointer.\nFor restricting types to the type-level equivalents of …\nWhat this pointer points to.\nA <code>&amp;T</code>-like pointer\nAny pointer type that’s neither of the other variants\nAllows transmuting pointers to point to a different type.\nThe type of the pointer after it’s element type has been …\nThe value of the PointerKind variant Self is equivalent to.\nGets a mutable raw pointer to the value that this points …\nGets a const raw pointer to the value that this points to.\nConverts this pointer to an <code>RRef</code>.\nConverts this pointer to an <code>RRef</code>.\nDeallocates the pointer without dropping its owned …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs this pointer from a <code>NonNull</code>.\nConstructs this pointer from a raw pointer.\nGets a move pointer to the contents of this pointer.\n<code>const</code> equivalents of <code>ImmutableRef</code> methods.\nRuns a callback with the contents of this pointer, and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this pointer to a <code>NonNull</code>.\nConverts this pointer to a raw pointer.\nTransmutes the element type of this pointer..\nTransmutes the element type of this pointer..\nRuns a callback with the contents of this pointer, and …\nConstructs this pointer from a <code>NonNull</code>.\nConverts a raw pointer to an <code>T</code> pointer.\nConverts the <code>from</code> pointer to a <code>NonNull</code>.\nConverts the <code>from</code> pointer to a raw pointer.\nAn array with whether the ith field of a prefix-type is …\nAn array with whether the ith field in the prefix of a …\nWhether a field is accessible.\nWhether a field is conditional, whether it has a …\nRepresents the layout of a prefix-type,for use in error …\nA bit array,where each nth bit represents whether the nth …\nDescribes the layout of the struct,exclusively for use in …\nA struct that contains all the fields up to the field …\nA struct that contains all the fields of some other struct …\nA reference to a prefix type.\nA pointer to <code>Self::PrefixFields</code>, generally wraps a …\nMarker trait for pointers to prefix field structs.\nFor types deriving <code>StableAbi</code> with <code>#[sabi(kind(Prefix(..)))]</code>…\nAlias for <code>WithMetadata_</code> that defaults to passing …\nWraps a type along with its prefix-type-related metadata, …\nConstructs a <code>PrefixRef</code> from <code>self</code>.\nCasts the pointed-to prefix to another type.\nA bit array that describes the accessibility of each field …\nA bit array that describes the accessibility of each field …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>PrefixRef</code> to <code>Self</code>\nConstructs a <code>PrefixRef</code> from a raw pointer.\nConstructs a <code>PrefixRef</code> from a static reference.\nConstructs a <code>PrefixRef</code> from a <code>StaticRef</code>.\nThe stringified generic parameters.\nGets the name of the <code>ith</code> field, returning <code>None</code> if there is …\nGets an iterator over the names of the fields.\nGets a <code>Vec</code> with the names of the fields.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDescribes whether this is accessible.\nDescribes whether this is conditional.\nConverts <code>Self</code> to <code>Self::PrefixRef</code>,leaking it in the process.\nThe layout information of the type which doesn’t depend …\nConstructs this with <code>WithMetadata::new(value)</code>\nConstructs an IsAccessible with a bool saying whether this …\nConstructs an IsConditional with a bool saying this is …\nConstructs a <code>PTStructLayout</code>.\nUsed to panic with an error message informing the user …\nUsed to panic with an error message informing the user …\nGets a reference to the pointed-to prefix.\nConstructs a <code>PrefixRef</code> from <code>this</code>.\nConstructs a <code>PrefixRef</code> from <code>self</code>.\nConverts <code>Self</code> to a <code>PrefixRef</code>\nConverts this PrefixRef into a raw pointer.\nThe basic layout of the prefix type, for error messages.\nThe basic layout of the prefix type, for error messages.\nThe wrapped value.\nThe wrapped value.\nRepresents a type-level <code>false</code>\nExtension trait for every type.\nRepresents a type-level <code>true</code>\nPerforms a mutable reference to mutable reference …\nPerforms a reference to reference conversion with <code>AsRef</code>, …\nDrops <code>self</code> using method notation. Alternative to …\nCompares the address of <code>self</code> with the address of <code>other</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerforms a conversion with <code>Into</code>. using the turbofish …\nMutates self using a closure taking self by mutable …\nObserves the value of self, passing it along unmodified. …\nEmulates the pipeline operator, allowing method syntax in …\nThe same as <code>piped</code>, except that the function takes <code>&amp;mut Self</code>…\nThe same as <code>piped</code> except that the function takes <code>&amp;Self</code> …\nAllows transmuting between types of different sizes.\nDelegates the layout to some other type,this is generally …\nWhether this is a module whose definition can be reflected …\nFor modules that are reflected on at runtime.\nFor types whose layout can’t be iterated over.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTo which layout in <code>TypeLayout.shared_vars.type_layouts</code> …\n<code>RObject</code> implements ffi-safe trait objects, for a minimal …\nThis is used to make sure that reborrowing does not change …\nError for <code>RObject&lt;_&gt;</code> being downcasted into the wrong type …\nExamples of <code>#[sabi_trait]</code> generated trait objects,for the …\nAttempts to unerase this trait object into a reference of …\nAttempts to unerase this trait object into a mutable …\nAttempts to unerase this trait object into the pointer it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the RObject, to handle the failure to unerase it.\nA prelude for modules using <code>#[sabi_trait]</code> generated …\nCreates a shared reborrow of this RObject.\nCreates a mutable reborrow of this RObject.\nGets an <code>RMut</code> pointing to the erased object.\nGets an <code>RRef</code> pointing to the erased object.\nGets an <code>RMut</code> pointing to the erased object.\nGets an <code>RRef</code> pointing to the erased object.\nGets the vtable.\nThe vtable common to all <code>#[sabi_trait]</code> generated trait …\nCalls the <code>f</code> callback with an <code>MovePtr</code> pointing to the …\nDoes a shallow clone of the object, just incrementing the …\nUnwraps the <code>RObject&lt;_&gt;</code> into a reference to T, without …\nUnwraps the <code>RObject&lt;_&gt;</code> into a mutable reference to T, …\nUnwraps the <code>RObject&lt;_&gt;</code> into a pointer to T, without …\nConstructs an RObject from a pointer and an extra vtable.\nThis function allows constructing an RObject in a …\nThe trait used in examples of <code>#[sabi_trait]</code> trait object …\nA type alias for the const-constructible <code>Action_TO</code>.\nThe trait object for Action.\nThis module is generated by the <code>#[sabi_trait]</code> attribute on …\nAn example trait, used to show what <code>#[sabi_trait]</code> …\nA type alias for the const-constructible <code>ConstExample_TO</code>.\nThe trait object for ConstExample.\nThis module is generated by the <code>#[sabi_trait]</code> attribute on …\nAn example trait object that uses <code>RObject</code> as a backend.\nA type alias for the const-constructible <code>Doer_TO</code>.\nThe trait object for Doer.\nThis module is generated by the <code>#[sabi_trait]</code> attribute on …\nAdds <code>val</code> into <code>self</code>, returning the new value.\nAdds <code>val</code> into <code>self</code>, returning the new value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the current value of <code>self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe trait used in examples of <code>#[sabi_trait]</code> trait object …\nAn alias for the underlying implementation of <code>Action_TO</code>.\nA type alias for the const-constructible <code>Action_TO</code>.\nA marker type describing the traits that are required when …\nThe trait object for Action.\nConstructs this type\nAdds <code>val</code> into <code>self</code>, returning the new value.\nThis is the inherent equivalent of the trait method of the …\nAdds <code>val</code> into <code>self</code>, returning the new value.\nThis is the inherent equivalent of the trait method of the …\nReturns the argument unchanged.\nConstructs this trait from a constant of a type that …\nConstructs this trait object from a pointer to a type that …\nConstructs this trait object from its underlying …\nConstructs this trait from a type that implements <code>Action</code>.\nGets the current value of <code>self</code>.\nThis is the inherent equivalent of the trait method of the …\nCalls <code>U::from(self)</code>.\nReborrows this trait object to a reference-based trait …\nReborrows this trait object to a mutable-reference-based …\nAn example trait, used to show what <code>#[sabi_trait]</code> …\nAn alias for the underlying implementation of …\nA type alias for the const-constructible <code>ConstExample_TO</code>.\nA marker type describing the traits that are required when …\nThe trait object for ConstExample.\nConstructs this type\nReturns the argument unchanged.\nConstructs this trait from a constant of a type that …\nConstructs this trait object from a pointer to a type that …\nConstructs this trait object from its underlying …\nConstructs this trait from a type that implements …\nCalls <code>U::from(self)</code>.\nThis is the inherent equivalent of the trait method of the …\nReborrows this trait object to a reference-based trait …\nReborrows this trait object to a mutable-reference-based …\nAn example trait object that uses <code>RObject</code> as a backend.\nAn alias for the underlying implementation of <code>Doer_TO</code>.\nA type alias for the const-constructible <code>Doer_TO</code>.\nA marker type describing the traits that are required when …\nThe trait object for Doer.\nConstructs this type\nThis is the inherent equivalent of the trait method of the …\nThis is the inherent equivalent of the trait method of the …\nReturns the argument unchanged.\nConstructs this trait from a constant of a type that …\nConstructs this trait object from a pointer to a type that …\nConstructs this trait object from its underlying …\nConstructs this trait from a type that implements <code>Doer</code>.\nCalls <code>U::from(self)</code>.\nReborrows this trait object to a reference-based trait …\nReborrows this trait object to a mutable-reference-based …\nThis is the inherent equivalent of the trait method of the …\nWrapper type used to ignore its contents in comparisons.\nNewtype wrapper to pass function pointers to <code>const fn</code>.\nThis is an <code>extern &quot;C&quot; fn()-&gt;T</code> which is used to construct a …\nEither the constructor for a value or the value itself\nAn empty string.\nWhen the string has a <code>&#39;\\0&#39;</code> before the end.\nA late-initialized static reference,with fallible …\nAn Option-like type which only compares equal if it …\nA move pointer, which allows moving the value from the …\nWhen the string doesn’t end with <code>&#39;\\0&#39;</code>\nA utf8 nul-terminated immutable borrowed string.\nError from trying to convert a <code>&amp;str</code> to a <code>NulStr</code>\nEquivalent to <code>&amp;&#39;a mut T</code>, which allows a few more …\nEquivalent to <code>&amp;&#39;a T</code>, which allows a few more operations …\nA wrapper type for vtable static references, and other …\nA value of type <code>T</code>\nGets a raw pointer to the value being moved.\nReborrows this <code>RMut</code> as a mutable raw pointer.\nConstructs a <code>PrefixRef&lt;P&gt;</code> from self.\nGets a raw pointer to the value being moved.\nGets a pointer to the start of this nul-terminated string.\nReborrows this <code>RMut</code> as a const raw pointer.\nCasts this to an equivalent raw pointer.\nGets access to the referenced value,as a raw pointer.\nReborrows this <code>RMut&lt;&#39;a, T&gt;</code> into an <code>RRef&lt;&#39;_, T&gt;</code>\nA packed array of boolean enum values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs <code>LateStaticRef</code> from a <code>NonNull</code> pointer.\nConstructs <code>LateStaticRef</code> from a <code>PrefixRef</code>.\nConstructs an NulStr from a pointer.\nConstructs this move pointer from a raw pointer, moving …\nConstructs this RMut from a raw pointer.\nConstructs this RRef from a raw pointer.\nConstructs this StaticRef from a raw pointer.\nConstructs <code>LateStaticRef</code>, initialized with <code>value</code>.\nConstructs this move pointer from an <code>RMut</code>, moving the …\nConstructs an <code>NulStr</code> from a string slice.\nConstructs a <code>T</code> by calling the wrapped function.\nGets the wrapped value,computing it from its constructor …\nReturns <code>Some(x:T)</code> if the <code>LateStaticRef</code> was initialized, …\nReborrows this <code>RMut</code> into a shared reference.\nCasts this to an equivalent reference.\nGets access to the reference.\nCopies the value that this <code>RMut</code> points to.\nCopies the value that this points to.\nReborrows this <code>RMut</code> into a mutable reference.\nLazily initializes the <code>LateStaticRef</code> with <code>initializer</code>, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMoves the value into a new <code>Box&lt;T&gt;</code>\nMoves the value out of the reference\nConverts this <code>RMut&lt;&#39;a, T&gt;</code> into a <code>&amp;&#39;a mut T</code>\nConverts this MovePtr into a raw pointer, which must be …\nConverts this <code>RMut&lt;&#39;a, T&gt;</code> into a <code>*mut T</code>\nMoves the value into a new <code>RBox&lt;T&gt;</code>\nConverts this <code>RMut&lt;&#39;a, T&gt;</code> into a <code>&amp;&#39;a T</code>\nConverts this <code>RMut&lt;&#39;a, T&gt;</code> to an <code>RRef&lt;&#39;_, T&gt;</code>\nCreates a StaticRef by heap allocating and leaking <code>val</code>.\nConstructs a CmpIgnored.\nConstructs the <code>LateStaticRef</code> in an uninitialized state.\nConstructs this move pointer from a mutable reference, …\nConstructs this RMut from a mutable reference\nConstructs this RRef from a reference.\nConstructs this StaticRef from a static reference\nReborrows this <code>RMut</code>, with a shorter lifetime.\nContains the <code>RSmallBox&lt;_&gt;</code> type.\nConverts this <code>NulStr&lt;&#39;a&gt;</code> to a <code>RStr&lt;&#39;a&gt;</code>,not including the …\nConverts this <code>NulStr&lt;&#39;a&gt;</code> to a <code>RStr&lt;&#39;a&gt;</code>,including the nul …\nConverts this <code>NulStr&lt;&#39;a&gt;</code> to a <code>&amp;&#39;a str</code>,not including the …\nConverts this <code>NulStr&lt;&#39;a&gt;</code> to a <code>&amp;&#39;a str</code>,including the nul …\nTransmute this <code>RMove&lt;&#39;a, T&gt;</code> into a <code>RMove&lt;&#39;a, U&gt;</code>.\nTransmutes this <code>RMut&lt;&#39;a, T&gt;</code> to a <code>RMut&lt;&#39;a,U&gt;</code>.\nTransmutes this <code>RRef&lt;&#39;a,T&gt;</code> to a <code>RRef&lt;&#39;a,U&gt;</code>.\nTransmutes this <code>StaticRef&lt;T&gt;</code> to a <code>StaticRef&lt;U&gt;</code>.\nTransmutes this <code>RMut&lt;&#39;a, T&gt;</code> to a <code>&amp;&#39;a mut U</code>.\nTransmutes this <code>RMut&lt;&#39;a, T&gt;</code> to a <code>*mut U</code>.\nTransmutes this to a raw pointer pointing to a different …\nTransmutes this to a reference pointing to a different …\nConstructs an NulStr from a string slice.\nLazily initializes the <code>LateStaticRef</code> with <code>initializer</code>, …\nTypes representing the version number of a library.\nthe position of the first ‘\\0’ character.\nAn array of 64 binary enum values.\nIterator over the enums inside a <code>BitArray64</code>\nA trait for enums with two variants where one is <code>truthy</code> …\nThe falsy value of this type\nThe truthy value of this type\nGets the value of <code>E</code> at <code>index</code>\nConverts this array to its underlying representation\nConverts a bool to a <code>BooleanEnum</code>.\nCreates a BitArray64 where all elements are falsy.\nConverts a <code>BooleanEnum</code> to a bool\nWhether this array is equal to <code>other</code> up to the <code>count</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a BitArray64 from a u64.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator over the first <code>count</code> elements of the array.\nSets the value at <code>index</code> to <code>value</code>\nTruncates self so that only the first <code>length</code> elements are …\nCreates a BitArray64 where the first <code>count</code> elements are …\nA box type which stores small values inline as an …\nGets a raw pointer into the underlying data.\nGets a raw pointer into the underlying data.\nReturns the argument unchanged.\nConstructs this <code>RSmallBox</code> from a <code>MovePtr</code>.\nCalls <code>U::from(self)</code>.\nUnwraps this pointer into its owned value.\nQueries whether the value is stored on the heap.\nQueries whether the value is stored inline.\nConverts this <code>RSmallBox</code> into another one with a differnet …\nConstructs this RSmallBox from a value.\nWhen the <code>VersionStrings</code> could not be converted into a …\nThe parsed (<code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code>) version number of a …\nThe <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code> version of a library,\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the <code>self</code> version number is compatible with the …\nWhether the <code>self</code> version number is compatible with the …\nConstructs a VersionStrings from a string with the “…\nAttempts to convert a <code>VersionStrings</code> into a <code>VersionNumber</code>\nAttempts to convert a <code>VersionStrings</code> into a <code>VersionNumber</code>\nThe <code>major.minor.patch</code> version string\nGets back the <code>VersionStrings</code> that could not be parsed into …\nAn empty slice.\nAn empty <code>RStr</code>.\nFfi-safe version of <code>std::sync::Arc</code>\nFfi-safe equivalent of <code>std::box::Box</code>.\nFfi safe equivalent to …\nFfi-safe version of <code>Box&lt;dyn std::error::Error + &#39;static&gt;</code> …\nFfi-safe equivalent of <code>std::cmp::Ordering</code>.\nFfi-safe equivalent of <code>std::borrow::Cow</code>.\nFfi-safe equivalent of <code>Cow&lt;&#39;a, [T]&gt;</code>, either an <code>RSlice</code> or …\nFfi-safe equivalent of <code>Cow&lt;&#39;a, str&gt;</code>, either an <code>RStr</code> or …\nFfi-safe equivalent of <code>Cow&lt;&#39;a, T&gt;</code>, either a <code>&amp;T</code> or <code>T</code>.\nFfi-safe equivalent of <code>std::time::Duration</code> .\nAn ffi-safe hashmap, which wraps …\nFfi safe equivalent to <code>std::io::Error</code>.\nFfi safe equivalent to <code>std::io::ErrorKind</code>.\nFfi-safe equivalent of the <code>std::option::Option</code> type.\nFfi-safe equivalent of <code>Result&lt;T, E&gt;</code>.\nFfi-safe equivalent of <code>std::io::SeekFrom</code>.\nFfi-safe equivalent of <code>&amp;&#39;a [T]</code>\nFfi-safe equivalent of <code>&amp;&#39;a mut [T]</code>\nFfi-safe equivalent of <code>&amp;&#39;a str</code>\nFfi-safe equivalent of <code>std::string::String</code>.\nFfi-safe equivalent of <code>std::vec::Vec</code>.\nFfi safe equivalent to <code>Box&lt;dyn std::error::Error + Send&gt;</code>.\nAn ffi safe 1 element tuple.\nAn ffi safe 2 element tuple.\nAn ffi safe 3 element tuple.\nAn ffi safe 4 element tuple.\nAn ffi-safe equivalent of <code>std::any::TypeId</code> that can …\nFfi safe equivalent to <code>Box&lt;dyn std::error::Error&gt;</code>.\nReturns <code>self</code> if it is <code>RNone</code>, otherwise returns <code>optb</code>.\nReturns <code>self</code> if it is <code>RNone</code>, otherwise returns the result …\nReturns the result of calling the <code>op</code> closure with the …\nConverts from <code>ROption&lt;T&gt;</code> (or <code>&amp;ROption&lt;T&gt;</code>) to …\nThe amount of microseconds of this RDuration.\nThe amount of milliseconds of this RDuration.\nConverts from <code>ROption&lt;T&gt;</code> to <code>ROption&lt;&amp;mut T&gt;</code>.\nConverts from <code>RResult&lt;T, E&gt;</code> to <code>RResult&lt;&amp;mut T, &amp;mut E&gt;</code>.\nGets a mutable raw pointer to the start of the slice.\nGets a mutable raw pointer to the start of this RVec’s …\nCreates a <code>&amp;&#39;_ mut [T]</code> with access to all the elements of …\nThe amount of nanoseconds of this RDuration.\nGets a raw pointer to the start of the slice.\nGets a raw pointer to the start of the slice.\nGets a raw pointer to the start of the string slice.\nGets a raw pointer to the start of this RVec’s buffer.\nConverts from <code>ROption&lt;T&gt;</code> to <code>ROption&lt;&amp;T&gt;</code>.\nConverts from <code>RResult&lt;T, E&gt;</code> to <code>RResult&lt;&amp;T, &amp;E&gt;</code>.\nCreates an <code>RSlice&lt;&#39;_, T&gt;</code> with access to all the elements …\nAccesses the underlying byte slice.\nThe amount of seconds of this RDuration.\nCasts this <code>&amp;RBoxError_&lt;_&gt;</code> to <code>&amp;SendRBoxError</code>.\nCreates an <code>&amp;&#39;_ [T]</code> with access to all the elements of this …\nCreates an <code>&amp;&#39;a [T]</code> with access to all the elements of this …\nCasts this <code>RStr&lt;&#39;a&gt;</code> to a <code>&amp;&#39;a str</code>.\nCasts this <code>&amp;RBoxError_&lt;_&gt;</code> to <code>&amp;UnsyncRBoxError</code>.\nThis returns the amount of elements this RVec can store …\nConverts an <code>ROption&lt;&amp;T&gt;</code> to an <code>ROption&lt;T&gt;</code> by cloning its …\nConverts an <code>ROption&lt;&amp;mut T&gt;</code> to a <code>ROption&lt;T&gt;</code> by cloning its …\nConverts an <code>ROption&lt;&amp;T&gt;</code> to an <code>ROption&lt;T&gt;</code> by Copy-ing its …\nConverts an <code>ROption&lt;&amp;mut T&gt;</code> to a <code>ROption&lt;T&gt;</code> by Copy-ing …\nContains the ffi-safe equivalent of <code>std::borrow::Cow</code>, and …\nConverts this <code>RBoxError_&lt;_&gt;</code> to an <code>RBox&lt;T&gt;</code>.\nConverts this <code>RBoxError_&lt;_&gt;</code> to an <code>RBox&lt;T&gt;</code>.\nConverts this <code>RBoxError_&lt;_&gt;</code> to an <code>RBox&lt;T&gt;</code>.\nConverts this <code>&amp;mut RBoxError_&lt;_&gt;</code> to a <code>&amp;mut T</code>.\nConverts this <code>&amp;mut RBoxError_&lt;_&gt;</code> to a <code>&amp;mut T</code>.\nConverts this <code>&amp;mut RBoxError_&lt;_&gt;</code> to a <code>&amp;mut T</code>.\nConverts this <code>&amp;RBoxError_&lt;_&gt;</code> to a <code>&amp;T</code>.\nConverts this <code>&amp;RBoxError_&lt;_&gt;</code> to a <code>&amp;T</code>.\nConverts this <code>&amp;RBoxError_&lt;_&gt;</code> to a <code>&amp;T</code>.\nCreates an empty slice\nConstructs an empty <code>RStr&lt;&#39;a&gt;</code>.\nConverts from <code>RResult&lt;T, E&gt;</code> to <code>ROption&lt;T&gt;</code>, <code>ROk</code> maps to …\nUnwraps the <code>ROption&lt;T&gt;</code>, returning its contents.\nUnwraps <code>self</code>, returning the value in <code>ROk</code>.\nUnwraps <code>self</code>, returning the value in <code>RErr</code>.\nReturns <code>self</code> if <code>predicate(&amp;self)</code> is true, otherwise …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>Box&lt;dyn Error + Send + Sync&gt;</code> to a <code>Send + Sync</code> …\nConverts a <code>Box&lt;dyn Error&gt;</code> to a <code>!Send + !Sync</code> <code>RBoxError_</code>.\nConverts a <code>Box&lt;dyn Error + Send&gt;</code> to a <code>Send + !Sync</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>Box&lt;T&gt;</code> to an <code>RBox&lt;T&gt;</code>, reusing its heap …\nConverts a <code>Box&lt;dyn Error + Send&gt;</code> to a <code>Send + !Sync</code> …\nConverts a <code>Box&lt;dyn Error + Send + Sync&gt;</code> to a <code>Send + Sync</code> …\nConverts a <code>Box&lt;dyn Error&gt;</code> to a <code>!Send + !Sync</code> <code>RBoxError_</code>.\nConstructs an RBoxError from a type that only implements …\nConstructs an RBoxError from an error, storing the Debug …\nConstructs an <code>RIoError</code> from a <code>std::io::ErrorKind</code>.\nCreates an RDuration of <code>micro</code> microseconds.\nCreates an RDuration of <code>milli</code> milliseconds.\nConstructs a <code>Box&lt;T&gt;</code> from a <code>MovePtr&lt;&#39;_, T&gt;</code>.\nConverts a mutable reference to <code>T</code> to a single element …\nConverts a <code>&amp;&#39;a mut [T]</code> to a <code>RSliceMut&lt;&#39;a, T&gt;</code>.\nCreates an RDuration of <code>nano</code> nanoseconds.\nConverts a <code>std::cmp::Ordering</code> to <code>RCmpOrdering</code>;\nConstructs an <code>RSlice&lt;&#39;a, T&gt;</code> from a pointer to the first …\nConstructs an <code>RStr&lt;&#39;a&gt;</code> from a pointer to the first byte, …\nConstructs an <code>RSliceMut&lt;&#39;a, T&gt;</code> from a pointer to the first …\nConverts a reference to <code>T</code> to a single element <code>RSlice&lt;&#39;a, T&gt;</code>…\nCreates an RDuration of <code>secs</code> seconds.\nConverts a <code>&amp;[T]</code> to an <code>RSlice&lt;&#39;_, T&gt;</code>.\nConverts <code>&amp;&#39;a str</code> to a <code>RStr&lt;&#39;a&gt;</code>.\nConverts a unary tuple to a <code>Tuple1</code>.\nConverts a pair to a <code>Tuple2</code>.\nConverts a 3-tuple to a <code>Tuple3</code>.\nConverts a 4-tuple to a <code>Tuple4</code>.\nAttempts to create a mutable reference to <code>T</code>, failing if …\nGets the internal error, returning <code>None</code> if this was …\nSets this ROption to <code>RSome(value)</code> if it was <code>RNone</code>. Returns …\nSets this <code>ROption</code> to <code>RSome(func())</code> if it was <code>RNone</code>. …\nGets the internal error, returning <code>None</code> if this was …\nThe address of the <code>Box&lt;_&gt;</code> this wraps\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>RArc&lt;T&gt;</code> into an <code>Arc&lt;T&gt;</code>\nConverts this <code>RBox&lt;T&gt;</code> into a <code>Box&lt;T&gt;</code>\nConverts an <code>RBoxError_&lt;_&gt;</code> to a <code>Box&lt;dyn Error&gt;</code>.\nConverts an <code>RBoxError_&lt;_&gt;</code> to a <code>Box&lt;dyn Error&gt;</code>.\nConverts an <code>RBoxError_&lt;_&gt;</code> to a <code>Box&lt;dyn Error&gt;</code>.\nUnwraps this <code>Box&lt;T&gt;</code> into the value it owns on the heap.\nConverts this into the internal error, returning <code>None</code> if …\nGets a mutable raw pointer to the start of the slice.\nCreates a <code>&amp;&#39;a mut [T]</code> with access to all the elements of …\nConverts from <code>ROption&lt;T&gt;</code> to <code>Option&lt;T&gt;</code>.\nWraps this <code>RBox</code> in a <code>Pin</code>\nConverts from <code>RResult&lt;T, E&gt;</code> to <code>Result&lt;T, E&gt;</code>.\nCreates an <code>RSlice&lt;&#39;a, T&gt;</code> with access to all the elements …\nConverts this <code>RBoxError_&lt;_&gt;</code> to <code>SendRBoxError</code>.\nCreates an <code>&amp;&#39;a [T]</code> with access to all the elements of this …\nConverts this Tuple1 to a unary tuple.\nConverts this Tuple2 to a pair.\nConverts this Tuple3 to a 3-tuple.\nConverts this Tuple4 to a 4-tuple.\nConverts this <code>RBoxError_&lt;_&gt;</code> to <code>UnsyncRBoxError</code>.\nWhether this slice is empty.\nWhether this slice is empty.\nQueries whether this RStr is empty.\nReturns whether <code>self</code> is an <code>RErr</code>\nReturns whether <code>self</code> is an <code>RNone</code>\nReturns whether <code>self</code> is an <code>ROk</code>\nReturns whether <code>self</code> is an <code>RErr</code>\nReturns whether <code>self</code> is an <code>RNone</code>\nReturns whether <code>self</code> is an <code>ROk</code>\nReturns whether <code>self</code> is an <code>RSome</code>\nReturns whether <code>self</code> is an <code>RSome</code>\nRetrieves the kind of io error.\nThe length (in elements) of this slice.\nThe length (in elements) of this slice.\nGets the length(in bytes) of this <code>RStr&lt;&#39;a&gt;</code>.\nMakes a mutable reference to <code>T</code>.\nContains the ffi-safe equivalent of …\nConverts the <code>ROption&lt;T&gt;</code> to a <code>ROption&lt;U&gt;</code>, transforming the …\nConverts the <code>RResult&lt;T, E&gt;</code> to a <code>RResult&lt;U, E&gt;</code> by …\nConverts the <code>RResult&lt;T, E&gt;</code> to a <code>RResult&lt;U, F&gt;</code> by …\nTransforms (and returns) the contained value with the <code>f</code> …\nTransforms (and returns) the contained value with the <code>f</code> …\nConverts the <code>RResult&lt;T, E&gt;</code> to a <code>U</code> by transforming the …\nConstructs an <code>RArc</code> from a value.\nConstucts an <code>RBox&lt;T&gt;</code> from a value.\nConstructs a <code>!Send + !Sync</code> <code>RBoxError_</code> from an error.\nConstructs a <code>Send + !Sync</code> <code>RBoxError_</code> from an error.\nConstructs a <code>Send + Sync</code> <code>RBoxError_</code> from an error.\nConstructs an <code>RIoError</code> from an error and a …\nConstructs this RDuration from seconds and the nanoseconds …\nCreates a new, empty <code>RVec&lt;T&gt;</code>.\nConstructs an <code>RIoError</code> from a type convertible into a …\nConverts from <code>RResult&lt;T, E&gt;</code> to <code>ROption&lt;T&gt;</code>, <code>ROk</code> maps to …\nTransforms the <code>ROption&lt;T&gt;</code> into a <code>RResult&lt;T, E&gt;</code>, mapping …\nTransforms the <code>ROption&lt;T&gt;</code> into a <code>RResult&lt;T, E&gt;</code>, mapping …\nReturns <code>self</code> if it contains a value, otherwise returns <code>optb</code>…\nReturns <code>self</code> if it contains a value, otherwise calls <code>optb</code> …\nReturns the result of calling the <code>op</code> closure with the …\nConstructs a <code>Pin&lt;RBox&lt;T&gt;&gt;</code>.\nReplaces the value of <code>self</code> with <code>RSome(value)</code>.\nThe amount of seconds of this RDuration.\nCreates an <code>RSlice&lt;&#39;b, T&gt;</code> with access to the <code>range</code> range of …\nCreates an <code>RSlice&lt;&#39;a, T&gt;</code> with access to the <code>range</code> range of …\nFor slicing <code>RStr</code>s.\nCreates an <code>RSliceMut&lt;&#39;a, T&gt;</code> with access to the <code>range</code> range …\nContains an ffi-safe equivalent of <code>std::string::String</code>.\nGets the number of <code>RArc</code> that point to the value.\nThe amount of fractional nanoseconds (total_nanoseconds % …\nSome types from the <code>std::sync</code> module have ffi-safe …\nTakes the value of <code>self</code>, replacing it with <code>RNone</code>\nConverts this error to a formatted error\nConverts this <code>RCmpOrdering</code> into a <code>std::cmp::Ordering</code>;\nCreates a new <code>RVec&lt;T&gt;</code> and clones all the elements of this …\nCreates a new <code>RVec&lt;T&gt;</code> and clones all the elements of this …\nTransmutes n <code>RSlice&lt;&#39;a, T&gt;</code> to a <code>RSlice&lt;&#39;a, U&gt;</code>\nAttempts to unwrap this <code>RArc&lt;T&gt;</code> into a <code>T</code>, returns <code>Err(self)</code>…\nReturns the <code>UTypeId</code> of the error this wraps.\nUnwraps the ROption, returning its contents.\nUnwraps <code>self</code>, returning the value in <code>ROk</code>.\nUnwraps <code>self</code>, returning the value in <code>RErr</code>.\nReturns the value in the <code>ROption&lt;T&gt;</code>, or <code>def</code> if <code>self</code> is …\nReturns the value in <code>ROk</code>, or <code>def</code> if <code>self</code> is <code>RErr</code>.\nReturns the value in the <code>ROption&lt;T&gt;</code>, or <code>T::default()</code> if …\nReturns the value in <code>ROk</code>, or returns <code>T::default()</code> it <code>self</code> …\nReturns the value in the <code>ROption&lt;T&gt;</code>, or the return value …\nReturns the value in <code>ROk</code>, or calls <code>def</code> with the error in …\nAn ffi-safe equivalent of <code>std::any::TypeId</code>.\nContains an ffi-safe equivalent of <code>Vec&lt;T&gt;</code>.\nGets the number of <code>std::sync::Weak</code> that point to the value.\nConstructs an <code>RIoError</code> from a …\nConstructs an <code>RIoError</code> from an <code>RBoxError</code> and a …\nReturns <code>RNone</code> if both values are <code>RNone</code> or <code>RSome</code>, otherwise …\nA helper type, to deserialize a <code>RCowStr&lt;&#39;a&gt;</code> which borrows …\nA helper type, to deserialize an <code>RCow&lt;&#39;a, [u8]&gt;</code> which …\nFfi-safe equivalent of <code>std::borrow::Cow</code>.\nFor making a <code>Cow&lt;&#39;a, Self&gt;</code> convertible into an <code>RCow</code>.\nFfi-safe equivalent of <code>Cow&lt;&#39;a, [T]&gt;</code>, either an <code>RSlice</code> or …\nFfi-safe equivalent of <code>Cow&lt;&#39;a, str&gt;</code>, either an <code>RStr</code> or …\nFfi-safe equivalent of <code>Cow&lt;&#39;a, T&gt;</code>, either a <code>&amp;T</code> or <code>T</code>.\nThe owned version of <code>Self::RefC</code>.\nThe (preferably) ffi-safe equivalent of <code>&amp;Self</code>.\nConverts a reference to an FFI-safe type\nConverts an FFI-safe type to a reference\nBorrows this RCow as a slice.\nBorrows this RCow as a slice.\nBorrows this RCow as a str.\nBorrows this RCow as a str.\nGets the contents of the RCow casted to the borrowed …\nThe deserialized <code>Cow</code>.\nThe deserialized <code>Cow</code>.\nDeserializes an <code>RCow&lt;&#39;a, [u8]&gt;</code> that borrows the slice from …\nDeserializes an <code>RCowStr&lt;&#39;a&gt;</code> that borrows the string from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nFor converting a <code>&amp;&#39;a [T]</code> to an <code>RCowSlice&lt;&#39;a, T&gt;</code>, most …\nFor converting a <code>&amp;&#39;a [T]</code> to an <code>RCowSlice&lt;&#39;a, T&gt;</code>, most …\nFor converting a <code>&amp;&#39;a [T]</code> to an <code>RCowSlice&lt;&#39;a, T&gt;</code>, most …\nFor converting a <code>&amp;&#39;a [T]</code> to an <code>RCowSlice&lt;&#39;a, T&gt;</code>, most …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps into the owned owner form of RCow, converting to …\nWhether this is a borrowing RCow.\nWhether this is an owning RCow.\nGet a mutable reference to the owned form of RCow, …\nAn RHashMap iterator, implementing …\nAn iterator that yields all the entries of an <code>RHashMap</code>, …\nAn RHashMap iterator, implementing …\nAn RHashMap iterator, implementing …\nAn iterator over the keys of a <code>RHashMap</code>.\nThe <code>InterfaceType</code> of the <code>IterMut</code> iterator for <code>RHashMap</code>.\nConstructs this type.\nConstructs this type.\nConstructs this type.\nAn occupied entry\nA handle into an entry in a map, which is either vacant or …\nAn ffi-safe hashmap, which wraps …\nA handle into an occupied entry in a map.\nA handle into a vacant entry in a map.\nThe <code>InterfaceType</code> of the <code>Iter</code> iterator for <code>RHashMap</code>.\nA vacnt entry\nThe <code>InterfaceType</code> of the <code>Drain</code> iterator for <code>RHashMap</code>.\nAn iterator over the values of a <code>HashMap</code>.\nAllows mutating an occupied entry before doing other …\nReturns the capacity of the map, the amount of elements it …\nRemoves all the entries in the map.\nReturns whether the map associates a value with the key.\nReturns whether the map associates a value with the key.\nClears the map, returning an iterator over all the entries …\nGets a handle into the entry in the map for the key, that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value in the entry.\nGets a reference to the value in the entry.\nReturns a reference to the value associated with the key.\nReturns a mutable reference to the value in the entry.\nGets a mutable reference to the value in the entry. To …\nReturns a mutable reference to the value associated with …\nReturns a mutable reference to the value associated with …\nReturns a reference to the value associated with the key.\nReturns a mutable reference to the value associated with …\nReturns a reference to the value associated with the key.\nReplaces the current value of the entry with <code>value</code>, …\nSets the value of the entry, returning a mutable reference …\nInserts a value into the map, associating it with a key, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets back the key that was passed to <code>RHashMap::entry</code>.\nGets a mutable reference to the value in the entry, that …\nReturns whether the map contains any entries.\nIterates over the entries in the map, with references to …\nIterates over the entries in the map, with mutable …\nGets the key of the entry.\nGets a reference to the key of the entry.\nGets a reference to the key of the entry.\nAn iterator visiting all keys in arbitrary order. The …\nReturns the amount of entries in the map.\nConstructs an empty RHashMap.\nInserts the <code>V::default()</code> value in the entry if it wasn’t …\nInserts <code>default</code> as the value in the entry if it wasn’t …\nInserts <code>default()</code> as the value in the entry if it wasn’t …\nRemoves the entry from the map, returns the value.\nRemoves the value associated with the key.\nRemoves the entry for the key.\nRemoves the entry for the key.\nRemoves the value associated with the key.\nReserves enough space to insert <code>reserved</code> extra elements …\nAn iterator visiting all values in arbitrary order. The …\nConstructs an empty RHashMap with at least the passed …\nConstructs an empty RHashMap with at least the passed …\nConstructs an empty RHashMap with the passed <code>hash_builder</code> …\nAn Iterator returned by <code>RString::drain</code> , which removes and …\nError that happens when attempting to convert an <code>RVec&lt;u8&gt;</code> …\nAn Iterator created by <code>&lt;RString as IntoIterator&gt;::into_iter</code>…\nFfi-safe equivalent of <code>std::string::String</code>.\nGets access to the bytes that failed to be converted into …\nGets a raw pointer to the start of this RString’s buffer.\nCreates an <code>RStr&lt;&#39;_&gt;</code> with access to all the characters of …\nReturns a string slice over the remainder of the string …\nReturns a string slice over the remainder of the string …\nCreates a <code>&amp;str</code> with access to all the characters of the …\nReturns the current capacity (in bytes) of the RString.\nTurns this into an empty RString, keeping the same …\nCreates an iterator that yields the chars in the <code>range</code>, …\nGets a Utf8Error with information about the conversion …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes a utf-16 encoded <code>&amp;[u16]</code> to an <code>RString</code>.\nConverts the <code>vec</code> vector of bytes to an <code>RString</code>.\nAn unchecked conversion from a <code>RVec&lt;u8&gt;</code> to an <code>RString</code>.\nInsert the <code>ch</code> character at the <code>ìdx</code> byte position.\nInsert the <code>string</code> at the <code>ìdx</code> byte position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheap conversion of this <code>RString</code> to a <code>RVec&lt;u8&gt;</code>\nUnwraps this error into the bytes that failed to be …\nConverts this <code>RString</code> to a <code>String</code>.\nReturns whether the RString is empty.\nReturns the current length (in bytes) of the RString.\nCreates a new, empty RString.\nRemoves the last character, returns <code>Some(_)</code> if this <code>RString</code>…\nAppends <code>ch</code> at the end of this RString.\nAppends <code>str</code> at the end of this RString.\nRemoves and returns the character starting at the <code>idx</code> byte …\nReserves <code>àdditional</code> additional capacity for any extra …\nReserves <code>àdditional</code> additional capacity for any extra …\nRetains only the characters that satisfy the <code>pred</code> predicate\nShrinks the capacity of the RString to match its length.\nFor slicing into <code>RStr</code>s.\nCopies the <code>RString</code> into a <code>String</code>.\nCreates a new, empty RString with the capacity for <code>cap</code> …\nAn ffi-safe equivalent of <code>std::any::TypeId</code> that can …\nConstructs <code>UTypeId</code> from a type that satisfies the <code>&#39;static</code> …\n<code>extern &quot;C&quot; fn</code> version of <code>UTypeId::new</code>.\nAn Iterator returned by <code>RVec::drain</code> , which removes and …\nAn Iterator returned by …\nFfi-safe equivalent of <code>std::vec::Vec</code>.\nMoves all the elements of <code>other</code> into <code>Self</code>, leaving <code>other</code> …\nCreates an <code>RSliceMut&lt;&#39;_, T&gt;</code> with access to all the …\nReturns a mutable slice over the remainder of the <code>Vec&lt;T&gt;</code> …\nReturns a mutable slice over the remainder of the <code>Vec&lt;T&gt;</code> …\nCreates a <code>&amp;mut [T]</code> with access to all the elements of the …\nCreates an <code>RSlice&lt;&#39;_, T&gt;</code> with access to all the elements …\nReturns a slice over the remainder of the <code>Vec&lt;T&gt;</code> that is …\nReturns a slice over the remainder of the <code>Vec&lt;T&gt;</code> that is …\nCreates a <code>&amp;[T]</code> with access to all the elements of the …\nRemoves all the elements from collection.\nCreates a draining iterator that removes the specified …\nExtends this <code>RVec&lt;_&gt;</code> with copies of the elements of the …\nExtends this <code>RVec&lt;_&gt;</code> with clones of the elements of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nClones a <code>&amp;[T]</code> into a new <code>RVec&lt;T&gt;</code>.\nInserts the <code>value</code> value at <code>index</code> position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>RVec&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nWhether the length of the <code>RVec&lt;T&gt;</code> is 0.\nReturns the amount of elements of the <code>RVec&lt;T&gt;</code>.\nAttempts to remove the last element, returns <code>None</code> if the …\nAppends <code>new_val</code> at the end of the <code>RVec&lt;T&gt;</code>.\nRemoves the element at <code>index</code> position,\nReserves <code>àdditional</code> additional capacity for extra …\nReserves <code>àdditional</code> additional capacity for extra …\nResizes the <code>RVec&lt;T&gt;</code> to <code>new_len</code> length. extending the …\nRetains only the elements that satisfy the <code>pred</code> predicate\nSets the length field of <code>RVec&lt;T&gt;</code> to <code>new_len</code>.\nShrinks the capacity of the <code>RVec</code> to match its length.\nCreates an <code>RSlice&lt;&#39;a, T&gt;</code> with access to the <code>range</code> range of …\nCreates an <code>RSliceMut&lt;&#39;a, T&gt;</code> with access to the <code>range</code> range …\nSwaps the element at <code>index</code> position with the last element, …\nCreates a <code>Vec&lt;T&gt;</code>, copying all the elements of this <code>RVec&lt;T&gt;</code>.\nTruncates the <code>RVec&lt;T&gt;</code> to <code>to</code> length. Does nothing if …\nAttemps to remove the element at <code>index</code> position, returns …\nCreates a new, empty <code>RVec&lt;T&gt;</code>, with a capacity of <code>cap</code>.\nThe type of the value this owns.\nUnwraps a type into its owned value.\nFor cloning a reference-like type into a (preferably …\nConverts a <code>#[repr(Rust)]</code> type into its <code>#[repr(C)]</code> …\nConverts a <code>#[repr(C)]</code> type into its <code>#[repr(Rust)]</code> …\nThe owned equivalent of this type.\nThe <code>#[repr(C)]</code> equivalent.\nThe <code>#[repr(Rust)]</code> equivalent.\nPerforms the conversion\nUnwraps this type into its owned value.\nPerforms the colne.\nPerforms the conversion\nA lifetime parameter in a function pointer that is only …\nAn array.\nThe amount of bits used to represent a StartLen\nThe amount of bits necessary to represent a CompTLField.\nThe amount of bits used to represent a LifetimeRnage.\nThe amount of bits required to represent a <code>TypeLayoutIndex</code>.\nThe amount of bits used to represent a CompFieldAccessor.\nA struct whose fields are laid out like C,\nAn enum with a <code>#[repr(C, IntegerType)]</code> attribute.\nA compressed field accessor,represented as 3 bits inside …\nThe compressed generic parameters of a type, which can be …\nA <code>TLField</code> represented as a <code>u64</code>, expadable to a <code>TLField</code> by …\nThe underlying representation of <code>CompTLField</code>.\nThe layout of all compressed fields in a type definition, …\nA compressed version of <code>TLFunction</code>, which can be expanded …\nA <code>*const T</code>\nEquivalent to the <code>FieldAccessor::Direct</code> variant.\nAccessible with <code>self.field_name</code>\nHow the discriminant of an enum is represented.\nAn empty range.\nTeh <code>MonoTLData</code> for an empty struct.\nA <code>CompTLFields</code> with no fields.\nAn array with no lifetimes.\nAn empty <code>LifetimeRange</code>.\nAn empty <code>LifetimeArrayOrSlice</code>.\nAn empty <code>TypeLayoutRange</code>.\nFor enums.\nWhether a field is accessible,and how it is accessed.\nThe typename and generics of the type this layout is …\nThe generic parameters of a type.\nThe part of TLData that can change based on generic …\nThe layout of an enum,that might depend on generic …\nProperties of prefix types (vtables and modules) that …\nReserved,just in case that i128 gets a c-compatible layout\nThe type of the discriminant for a <code>#[repr(i16)]</code>enum\nThe type of the discriminant for a <code>#[repr(i32)]</code>enum\nThe type of the discriminant for a <code>#[repr(i64)]</code>enum\nThe type of the discriminant for a <code>#[repr(i8)]</code>enum\nAn error declaring that the Storage of a nonexhaustive …\nMeans that only <code>repr(IntegerType)</code> was used.\nWhether this enum is exhaustive,if it is,it can add …\nThe assigned value of a discriminant in a <code>#[repr(isize)]</code> …\nThe type of the discriminant for a <code>#[repr(isize)]</code>enum\nInformation about where a type was declared.\nEither an array of 3 <code>LifetimeIndexPair</code>,or a slice of …\nWhich lifetime is being referenced by a field. Allows …\nA <code>LifetimeIndex::NONE</code> terminated array of 5 lifetime …\nA pair of <code>LifetimeIndex</code>.\nThe representation of <code>LifetimeIndexPair</code>.\nEither a <code>LifetimeArray</code> or a range into a slice of …\nThe maximum length of a range.\nThe maximum number of lifetime parameters.\nThe maximum value for the start of a range.\nThe maximum value of a <code>TypeLayoutIndex</code>.\nThe maximum value of a <code>TypeLayoutIndex</code>.\nEquivalent to the <code>FieldAccessor::Method</code> variant.\nEquivalent to the <code>FieldAccessor::MethodNamed</code> variant, in …\nEquivalent to the <code>FieldAccessor::MethodOption</code> variant.\nAn iterator over a list of type layouts.\nAccessible with <code>fn field_name(&amp;self)-&gt;FieldType</code>\nAccessible with <code>fn name(&amp;self)-&gt;FieldType</code>\nAccessible with <code>fn field_name(&amp;self)-&gt;Option&lt;FieldType&gt;</code>\nAn error returned by <code>MonoTLData::expand</code> because the …\nA module path.\nA few static slices that many types in the <code>type_layout</code> …\nThe parts of TLData that don’t change based on generic …\nThe parts of the layout of an enum,that don’t depend on …\nProperties of prefix types (vtables and modules) that don…\nThe data in the type layout that does not depend on …\nThis stores multiple <code>TypeLayoutCtor</code>,some inline and some …\nA <code>*mut T</code>\nA <code>&amp;mut T</code>\nConstructs a <code>TLFunctionQualifiers</code> with no qualifiers …\nA sentinel value to represent the absence of a lifetime.\nA pair of <code>LifetimeIndex::NONE</code>\nAn item without a path\nEquivalent to Option::None\nEquivalent to Option::None\nEquivalent to the <code>FieldAccessor::Opaque</code> variant.\nA type that’s only compared for size and alignment.\nA type that’s only compared for size and alignment.\nA type that’s only compared for size and alignment.\nThe type can’t be inspected,and has no properties other …\nThis field is completely inaccessible.\nThis is an <code>Option&lt;NonZeroType&gt;</code>. In which the size and …\nAn optional u16 which represents None as <code>u16::max_value()</code>\nAn optional u8 which represents None as <code>u8::max_value()</code>\nAn item in the prelude.\nConstructs a LifetimeIndex to the nth lifetime parameter …\nConstructs a LifetimeRange from a single lifetime …\nvtables and modules that can be extended in minor versions.\nTypes defined in the compiler.\nThis is an ffi-safe primitive type,declared in the …\nThe <code>repr(..)</code> attribute used on a type.\nA static lifetime.\nHow many indices can be stored inline.\nA <code>&amp;T</code>\nA few static slices that many types in the <code>type_layout</code> …\nThe assigned value of a discriminant in a …\nThe start and length of a slice into <code>TLFunctions</code>.\nUsed to convert the arguments passed to the <code>tl_genparams</code> …\nThe internal representation of <code>StartLen</code>.\nFor structs.\nThe interior of the type definition, describing whether …\nA discriminant-only version of TLData.\nA discriminant of an enum variant.\nThe discriminants of an enum.\nEvery property about an enum specifically.\nThe layout of a field.\nEither a TLField or a TLFunction.\nThe layout of all the fields in a type definition.\nAn iterator over all the fields in a type definition.\nA function pointer in a field.\nAn iterator over a range of <code>TLFunction</code>s.\nStores all the supported function qualifiers.\nA slice of functions from a <code>TLFunctions</code>.\nAll the function pointer types in a type declaration.\nProperties exclusive to nonexhaustive enums.\nProperties of prefix types (vtables and modules), …\nTypes defined in the compiler\nA type with the same size,alignment and function ABI as …\nThe layout of a type, also includes metadata about where …\nAn index for a slice of type layouts.\nA range of indices into a slice of type layouts which can …\nReserved,just in case that u128 gets a c-compatible layout\nThe type of the discriminant for a <code>#[repr(u16)]</code>enum\nThe type of the discriminant for a <code>#[repr(u32)]</code>enum\nThe type of the discriminant for a <code>#[repr(u64)]</code>enum\nThe type of the discriminant for a <code>#[repr(u8)]</code>enum\nFor unions.\nThe assigned value of a discriminant in a …\nThe assigned value of a discriminant in a <code>#[repr(usize)]</code> …\nThe type of the discriminant for a <code>#[repr(usize)]</code>enum\nWhich fields are accessible when the prefix type is …\nWhich fields are accessible when the prefix type is …\nGets the alignment of the type.\nConverts this into a <code>TLDataDiscriminant</code>, allowing one to …\nConverts this into a <code>TLDataDiscriminant</code>, allowing one to …\nConverts this to a TLNonExhaustive.Returning None if it is …\nGets a slice of the <code>LifetimeIndexPair</code> this contains.\nGets both <code>LifetimeIndex</code> in this <code>LifetimeIndexPair</code>.\nThe named lifetime parameters of the function itself …\nChecks that <code>layout</code> is compatible with <code>self.size</code> and …\nAccesses a slice of all the compressed fields in this …\nAccesses a slice of all the compressed fields in this …\nCompares this <code>TLDiscriminants</code> with another,\nWhich fields in the prefix (the ones up to the one with …\nWhich fields in the prefix (the ones up to the one with …\nThe const parameters of the type.\nMany constants that types in the <code>type_layout</code> module …\nThe interior of the type definition, describing whether …\nDescribes whether the type is a …\nHelper types for type_layout types.\nGets the type of the discriminant in this <code>TLDiscriminants</code>.\nThe discriminants of the variants in the enum.\nConstructs an empty <code>TLFunctionSlice</code>.\nThe exclusive end of this range.\nGets the exclusive end of the range as a usize.\nConst equivalent of <code>OptionU16 == OptionU16</code>\nConst equivalent of <code>OptionU8 == OptionU8</code>\nConstructs a <code>GenericTLEnum</code> for an exhaustive enum.\nConstructs this <code>IsExhaustive</code> as being exhaustive.\nThe exhaustiveness of this enum.\nExpands this <code>MonoTLData</code>.\nExpands this into a TLEnum,with all the properties of an …\nExpands this CompTLField into a TLField.\nExpands this into a TLFields,allowing access to expanded …\nDecompresses this CompTLFunction into a TLFunction.\nExpands this <code>TypeLayoutRange</code> into a <code>MultipleTypeLayouts&lt;&#39;a&gt;</code>…\nExpands this <code>CompGenericParams</code> into a <code>GenericParams</code>.\nExpands this into a <code>TLPrefixType</code>.\nExpands this <code>CompFieldAccessor</code> into a <code>FieldAccessor</code>, using …\nGets a trait object used to check extra properties about …\nGets the <code>FieldAccessor</code> for the type, which describes …\nGets the <code>FieldAccessor</code> for the type from <code>SharedVars</code>’s …\nGets a slice with the amount of fields for each variant in …\nThe amount of fields of each variant.\nConstructs an iterator over all the field names.\nGets an iterator over all the names of the fields in the …\nAll the fields of the enums,not separated by variant.\nAll the fields of the prefix-type,even if they are …\nAll the fields of the prefix-type,even if they are …\nGets the first <code>LifetimeIndex</code> of this pair.\nThe first field in the suffix, the index to the field after\nThe first field in the suffix, the index to the field after\nThe function qualifiers\nConstructs the <code>TLFunctionSlice</code> for the function pointers …\nOutputs this into a String with <code>Display</code> formatting.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs this LifetimeIndexArray from an array.\nConstructs a LifetimeRange from an array of 5 lifetime …\nConstructs a <code>CompTLFields</code> with fields,and without …\nConstructs a TLFields from the compressed fields,without …\nConstructs the variant from an <code>RSlice&lt;&#39;static,i16&gt;</code>.\nConstructs the variant from an <code>RSlice&lt;&#39;static,i32&gt;</code>.\nConstructs the variant from an <code>RSlice&lt;&#39;static,i64&gt;</code>.\nConstructs the variant from an <code>RSlice&lt;&#39;static,i8&gt;</code>.\nConstructs the variant from an <code>RSlice&lt;&#39;static,isize&gt;</code>.\nConstructs a LifetimeRange from a range.\nConstructs this <code>TypeLayoutIndex</code> from its representation.\nConstructs the variant from an <code>RSlice&lt;&#39;static,u16&gt;</code>.\nConstructs this array from its representation.\nConstructs this <code>LifetimeRange</code> from its representation\nConstructs a StartLen from a bitfield encoded as (start:16 …\nConstructs this <code>CompFieldAccessor</code> from its representation.\nConstructs this <code>StartLen</code> from its internal representation.\nConstructs the variant from an <code>RSlice&lt;&#39;static,u32&gt;</code>.\nConstructs a <code>LifetimeIndex</code> from its representation.\nConstructs this <code>TypeLayoutRange</code> from its representation.\nConstructs the variant from an <code>RSlice&lt;&#39;static,u64&gt;</code>.\nConstructs the variant from an <code>RSlice&lt;&#39;static,u8&gt;</code>.\nConstructs the variant from an <code>RSlice&lt;&#39;static,usize&gt;</code>.\nGets a printable version of the field type.\nGets all the function pointer types in the field.\nThe generic parmaters of a type.\nGets the generic parameters of the type.\nGets the ith expanded field.Returns None there is no ith …\nGets the <code>nth</code> <code>TLFunction</code> in this <code>TLFunctions</code>. Returns None …\nGets a <code>TLFunction</code> at the <code>index</code>. This returns <code>None</code> if <code>index</code> …\nGets the name of the nth field.\nGets the name of the <code>nth</code> field in the type. Returns <code>None</code> …\nGets the fields of the type.\nGets the compressed versions of the fields of the type.\nGets the <code>UTypeId</code> for the type, which is an ffi safe …\nGets the <code>nth</code> <code>TLFunction</code> in this <code>TLFunctions</code>.\nGets a <code>TLFunction</code> at the <code>index</code>.\nConstructs a ModPath from a string with a module path.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the range is empty.\nWhether there are no fields.\nWhether this contains any fields\nWhether this is empty.\nGets whether this slice is empty.\nGets whether the array is empty.\nWhether this span of lifetimes is empty.\nWhether this range of type layouts is empty.\nWhether this is empty.\nWhether this contains any generic parameters\nWhether this is an exhaustive enum.\nGets whether the field is itself a function pointer.\nWhether this field is a function. This is only true if the …\nWhether this is the None variant.\nWhether this is the None variant.\nWhether this is an nonexhaustive enum.\nGets whether the type is a NonZero type, which can be put …\nWhether this is a prefix-type(module or vtable).\nWhether this is a range into a slice of <code>LifetimePair</code>s.\nWhether this is the Some variant.\nWhether this is the Some variant.\nWhether the function is <code>unsafe</code>\nGets information about where a type was declared.\nGets information about where a type was declared.\nGets an iterator over the expanded fields.\nReturns an iterator over the <code>TLFunction</code>s in the slice.\nGets an iterator over the type layouts that this contains.\nGets the layout of the field type\nGets the length of the range.\nThe amount of fields this represents\nThe amount of fields this represents\nGets the amount of <code>TLFunction</code> in this <code>TLFunctions</code>.\nGets the length of this slice.\nGets the length of this array.\nThe amount of lifetime indices this spans.\nThe amount of type layouts in this range.\nThe amount of type layouts that this contains.\nGets the length of the range as a usize.\nThe amount of lifetimes of the type.\nMany lifetimes that types in the <code>type_layout</code> module …\nMany lifetimes that types in the <code>type_layout</code> module …\nGets the lifetimes that the field references.\nGets the name of the field from <code>SharedVars</code>’s slice of …\nGets an iterator over the names of the lifetime parameters …\nGets which line the type was defined in.\nThe line in the file where the type was defined.\nReturns <code>self</code> and <code>other</code> sorted in a <code>(maximum,minimum)</code> pair, …\nConstructs a FieldAccessor for a method named <code>name</code>.\nGets the full path to the module where the type was …\nThe full path to the module where the type was defined, …\nGets the <code>ModReflMode</code> for the type, whether this is a …\nGets the <code>ModReflMode</code> for the type, whether this is a …\nGets the parts of the type layout that don’t change with …\nGets the name of the field\nGets the name of the field from <code>SharedVars</code>’s string …\nThe name of a type.\nGets the name of the type.\nGets the name of the type.\nThe name of the field this is used inside of.\nGets the range representing the name in the string slice …\nConst equivalent of <code>OptionU16 != OptionU16</code>\nConst equivalent of <code>OptionU8 != OptionU8</code>\nConstructs a <code>SharedVars</code>.\nConstructs a <code>MonoSharedVars</code>.\nConstructs a range.\nConstructs a <code>MonoTLEnum</code>.\nConstructs a <code>GenericTLEnum</code>.\nConstructs a <code>TLNonExhaustive</code> from the size and alignment …\nConstructs a field which does not contain function …\nConstructs a CompTLField.\nConstructs a <code>CompTLFields</code>.\nConstructs a TLFunctions.\nConstructs a CompTLFunction.\nConstructs a <code>LifetimeIndexPair</code> from a pair of <code>LifetimeIndex</code>\nConstructs a CompGenericParams.\nConstructs this <code>IsExhaustive</code> as being nonexhaustive.\nGets the package name.\nGets the package where the type was declared.\nConstructs an ItemInfo for a type in a package and the …\nGets the package name and an unparsed package version.\nGets the package and package version where the type was …\nGets the package version for the package where the type …\nA ‘;’ separated list of all the parameter names.\nAll the type layouts of the parameters.\nThe lifetimes that the parameters and return types …\nGets the virtual fields that aren’t part of th type …\nConstructs a <code>MonoTLData::PrefixType</code>\nConstructs a <code>MonoTLData::PrefixType</code>\nConstructs an ItemInfo for a std primitive\nGets the representation attribute of the type.\nGets the representation attribute of the type.\nGets the type layout of the return type\nGets the second <code>LifetimeIndex</code> of this pair.\nMarks the function as <code>unsafe</code>\nGets the <code>&amp;&#39;static SharedVars</code> associated with this slice.\nGets the SharedVars of the type, containing the slices …\nGets the SharedVars of the type, containing the slices …\nGets the SharedVars of the type, containing the slices …\nGets the size of the type.\nExpands this <code>LifetimeRange</code> into a <code>LifetimeArrayOrSlice</code>\nConstructs the equivalent of <code>Some(value)</code>, which saturates …\nConstructs the equivalent of <code>Some(value)</code>, which saturates …\nGets the start of the range.\nGets the start of the range as a usize.\nConstructs an ItemInfo for an std type with a path.\nA string containing many strings that types in the …\nA string that types in the <code>type_layout</code> module store …\nConstructs <code>MonoTLData::Struct</code> from a slice of its fields.\nConstructs <code>MonoTLData::Struct</code> from a slice of its fields.\nGets the <code>Tag</code> associated with a type, a JSON-like …\nTag is a dynamically typed data structure used to encode …\nConverts this LifetimeIndexArray into an array.\nConverts this to an <code>Option&lt;u16&gt;</code>.\nConverts this to an <code>Option&lt;u8&gt;</code>.\nGets which lifetiem parameter this is. Returns None if it…\nConverts this range to a <code>std::ops::Range</code>.\nUnwraps this back into a <code>StartLen</code>.\nConstructs an empty <code>StartLen</code>.\nConstructs a <code>StartLen</code> from the <code>Range</code>.\nConstructs a <code>StartLen</code> from the <code>RangeInclusive</code>.\nConstructs a <code>StartLen</code> from <code>0</code> to <code>self.0</code> exclusive.\nConverts this <code>TypeLayoutIndex</code> into its representation.\nConverts this array into its representation.\nConverts this <code>LifetimeRange</code> into its representation\nConverts this StartLen to bitfields encoded as (start:16 …\nConverts this <code>CompFieldAccessor</code> into its representation.\nConverts a <code>LifetimeIndex</code> into its representation.\nConverts this <code>TypeLayoutRange</code> into its representation.\nConverts this <code>LifetimeIndexPair</code> into its representation.\nCollects the expanded fields into a <code>Vec&lt;TLField&gt;</code>.\nGets the name of the field from <code>SharedVars</code>’s slice of …\nGets the index of the type layout of the field in the …\nMany type layouts that types in the <code>type_layout</code> module …\nThe type parameters of the type.\nConstructs <code>MonoTLData::Union</code> from a slice of its fields.\nConstructs <code>MonoTLData::Union</code> from a slice of its fields.\nGets the amount of variants in the enum.\nReturns the amount of variants in the enum.\nA ‘;’ separated list of all variant names\nReturns an iterator over the names of the variants in this …\nGets the unparsed package version.\nConstructs a <code>TypeLayoutRange</code> with more than five type …\nConstructs a <code>TypeLayoutRange</code> with up to five type layout …\nA pair of length and an array, which is treated as a slice …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether the array is empty\nThe <code>len</code> field  casted to usize.\nthe length of initialized elements in <code>array</code>\nThe possible variants of CheckableTag.\nA tag that can be checked for compatibility with another …\nUsed to convert many types to <code>Tag</code>.\nA Tag that’s considered compatible with any other\nA Tag that’s considered compatible with any other\nA key-value pair,used when constructing a map.\nConstructs the Null variant.\nThe primitive types of a variant,which do not contain …\nTag is a dynamically typed data structure used to encode …\nThe error produced when checking <code>CheckableTag</code>s.\nAll the Tag variants.\nConstructs the Array variant.\nCasts a &amp;KeyValue into a <code>(key, value)</code> pair of references.\nConstructs the Bool variant.\nChecks that this <code>CheckableTag</code> is compatible with another …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>(key, value)</code> pair into a KeyValue.\nConstructs the Ignored variant.\nConstructs the Int variant.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the KeyValue into a <code>(key, value)</code> pair.\nConstructs a KeyValue.\nTransforms the <code>KeyValue&lt;T&gt;</code> to <code>KeyValue&lt;U&gt;</code>, using <code>f</code> to …\nConstructs the Map variant.\nConstructs a KeyValue with <code>key</code>,<code>value</code>\nConstructs the Null variant.\nConstructs the String_ variant.\nConstructs the Set variant.\nConstructs the String_ variant.\nConverts the <code>Tag</code> into a <code>CheckableTag</code>, so as to check <code>Tag</code>s …\nConverts the wrapped <code>Tag</code> into a Tag.\nConverts the wrapped <code>bool</code> into a Tag.\nConverts the wrapped <code>&amp;&#39;static str</code> into a Tag.\nConverts the wrapped <code>RStr&lt;&#39;static&gt;</code> into a Tag.\nConverts the wrapped <code>i64</code> into a Tag.\nConstructs the UInt variant.\nType-level booleans.\nType-level enum representing whether a <code>DynTrait</code>/<code>RObject</code>/…\nType-level-enum representing whether a trait is …\nMarker types representing traits.\nGets a function optionally returning the <code>UTypeId</code> of <code>T</code>.\nPassed to trait object constructors to make the trait …\nPassed to trait object constructors to make it impossible …\nthe function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the trait represented by the type parameter must …\nEither <code>Unimplemented</code> or <code>Implemented</code>.\nConverts <code>B</code> to either <code>Unimplemented&lt;T&gt;</code> or <code>Implemented&lt;T&gt;</code>.\nConverts a type to either <code>Unimplemented</code> or <code>Implemented</code>.\nTrait for <code>Implemented</code> and <code>Unimplemented</code>\nDescribes that a trait must be implemented.\nDescribes that a trait does not need to be implemented.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents the <code>serde::Deserialize</code> trait.\nRepresents the <code>std::error::Error</code> trait.\nRepresents the <code>std::fmt::Write</code> trait.\nRepresents the <code>std::io::BufRead</code> trait.\nRepresents the <code>std::io::Read</code> trait.\nRepresents the <code>std::io::Seek</code> trait.\nRepresents the <code>std::io::Write</code> trait.\nRepresents the <code>serde::Serialize</code> trait.\nRepresents the <code>std::marker::Unpin</code> trait.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInformation about a panic, used in <code>ffi_panic_message</code>.\nHelper type for transmuting between <code>Copy</code> types without …\nThis function allows calculating the distance (in <code>T</code>s) from …\nPrints an error message for attempting to panic across the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLeaks <code>value</code> into the heap, and returns a reference to it.\nCasts a <code>&amp;&#39;a mut ManuallyDrop&lt;T&gt;</code> to <code>*mut T</code>\nCasts a <code>&amp;&#39;a mut ManuallyDrop&lt;T&gt;</code> to <code>RMut&lt;&#39;a, T&gt;</code>\nConverts a <code>&amp;T</code> to a <code>NonNull&lt;T&gt;</code>.\nTakes the contents out of a <code>ManuallyDrop&lt;T&gt;</code>.\nTransmute a mutable reference to another mutable reference,\nTransmute a reference to another reference, changing the …")