searchState.loadedDescShard("safe_arch", 0, "A crate that safely exposes arch intrinsics via <code>#[cfg()]</code>.\nLanewise <code>a + b</code> with lanes as <code>i16</code>.\nLanewise <code>a + b</code> with lanes as <code>i32</code>.\nLanewise <code>a + b</code> with lanes as <code>i64</code>.\nLanewise <code>a + b</code> with lanes as <code>i8</code>.\nLanewise <code>a + b</code>.\nLow lane <code>a + b</code>, other lanes unchanged.\nLanewise <code>a + b</code>.\nLowest lane <code>a + b</code>, high lane unchanged.\nLanewise saturating <code>a + b</code> with lanes as <code>i16</code>.\nLanewise saturating <code>a + b</code> with lanes as <code>i8</code>.\nLanewise saturating <code>a + b</code> with lanes as <code>u16</code>.\nLanewise saturating <code>a + b</code> with lanes as <code>u8</code>.\nLanewise average of the <code>u16</code> values.\nLanewise average of the <code>u8</code> values.\nBitwise <code>a &amp; b</code>.\nBitwise <code>a &amp; b</code>.\nBitwise <code>a &amp; b</code>.\nBitwise <code>(!a) &amp; b</code>.\nBitwise <code>(!a) &amp; b</code>.\nBitwise <code>(!a) &amp; b</code>.\nBitwise <code>a | b</code>.\nBitwise <code>a | b</code>.\nBitwise <code>a | b</code>.\nBitwise <code>a ^ b</code>.\nBitwise <code>a ^ b</code>.\nBitwise <code>a ^ b</code>.\nShifts all bits in the entire register left by a number of …\nShifts all bits in the entire register right by a number …\nSwap the bytes of the given 32-bit value.\nSwap the bytes of the given 64-bit value.\nBit-preserving cast to <code>m128</code> from <code>m128d</code>\nBit-preserving cast to <code>m128</code> from <code>m128i</code>\nBit-preserving cast to <code>m128d</code> from <code>m128</code>\nBit-preserving cast to <code>m128d</code> from <code>m128i</code>\nBit-preserving cast to <code>m128i</code> from <code>m128</code>\nBit-preserving cast to <code>m128i</code> from <code>m128d</code>\nLow lane equality.\nLow lane <code>f64</code> equal to.\nLanewise <code>a == b</code> with lanes as <code>i16</code>.\nLanewise <code>a == b</code> with lanes as <code>i32</code>.\nLanewise <code>a == b</code> with lanes as <code>i8</code>.\nLanewise <code>a == b</code>.\nLow lane <code>a == b</code>, other lanes unchanged.\nLanewise <code>a == b</code>, mask output.\nLow lane <code>a == b</code>, other lanes unchanged.\nLow lane greater than or equal to.\nLow lane <code>f64</code> greater than or equal to.\nLanewise <code>a &gt;= b</code>.\nLow lane <code>a &gt;= b</code>, other lanes unchanged.\nLanewise <code>a &gt;= b</code>.\nLow lane <code>a &gt;= b</code>, other lanes unchanged.\nLow lane greater than.\nLow lane <code>f64</code> greater than.\nLanewise <code>a &gt; b</code> with lanes as <code>i16</code>.\nLanewise <code>a &gt; b</code> with lanes as <code>i32</code>.\nLanewise <code>a &gt; b</code> with lanes as <code>i8</code>.\nLanewise <code>a &gt; b</code>.\nLow lane <code>a &gt; b</code>, other lanes unchanged.\nLanewise <code>a &gt; b</code>.\nLow lane <code>a &gt; b</code>, other lanes unchanged.\nLow lane less than or equal to.\nLow lane <code>f64</code> less than or equal to.\nLanewise <code>a &lt;= b</code>.\nLow lane <code>a &lt;= b</code>, other lanes unchanged.\nLanewise <code>a &lt;= b</code>.\nLow lane <code>a &lt;= b</code>, other lanes unchanged.\nLow lane less than.\nLow lane <code>f64</code> less than.\nLanewise <code>a &lt; b</code> with lanes as <code>i16</code>.\nLanewise <code>a &lt; b</code> with lanes as <code>i32</code>.\nLanewise <code>a &lt; b</code> with lanes as <code>i8</code>.\nLanewise <code>a &lt; b</code>.\nLow lane <code>a &lt; b</code>, other lanes unchanged.\nLanewise <code>a &lt; b</code>.\nLow lane <code>a &lt; b</code>, other lane unchanged.\nLow lane not equal to.\nLow lane <code>f64</code> less than.\nLanewise <code>a != b</code>.\nLow lane <code>a != b</code>, other lanes unchanged.\nLanewise <code>a != b</code>.\nLow lane <code>a != b</code>, other lane unchanged.\nLanewise <code>!(a &gt;= b)</code>.\nLow lane <code>!(a &gt;= b)</code>, other lanes unchanged.\nLanewise <code>!(a &gt;= b)</code>.\nLow lane <code>!(a &gt;= b)</code>, other lane unchanged.\nLanewise <code>!(a &gt; b)</code>.\nLow lane <code>!(a &gt; b)</code>, other lanes unchanged.\nLanewise <code>!(a &gt; b)</code>.\nLow lane <code>!(a &gt; b)</code>, other lane unchanged.\nLanewise <code>!(a &lt;= b)</code>.\nLow lane <code>!(a &lt;= b)</code>, other lanes unchanged.\nLanewise <code>!(a &lt;= b)</code>.\nLow lane <code>!(a &lt;= b)</code>, other lane unchanged.\nLanewise <code>!(a &lt; b)</code>.\nLow lane <code>!(a &lt; b)</code>, other lanes unchanged.\nLanewise <code>!(a &lt; b)</code>.\nLow lane <code>!(a &lt; b)</code>, other lane unchanged.\nLanewise <code>(!a.is_nan()) &amp; (!b.is_nan())</code>.\nLow lane <code>(!a.is_nan()) &amp; (!b.is_nan())</code>, other lanes …\nLanewise <code>(!a.is_nan()) &amp; (!b.is_nan())</code>.\nLow lane <code>(!a.is_nan()) &amp; (!b.is_nan())</code>, other lane …\nLanewise <code>a.is_nan() | b.is_nan()</code>.\nLow lane <code>a.is_nan() | b.is_nan()</code>, other lanes unchanged.\nLanewise <code>a.is_nan() | b.is_nan()</code>.\nLow lane <code>a.is_nan() | b.is_nan()</code>, other lane unchanged.\nConvert <code>i32</code> to <code>f32</code> and replace the low lane of the input.\nConvert <code>i32</code> to <code>f64</code> and replace the low lane of the input.\nConvert <code>i64</code> to <code>f32</code> and replace the low lane of the input.\nConvert <code>i64</code> to <code>f64</code> and replace the low lane of the input.\nConverts the lower <code>f32</code> to <code>f64</code> and replace the low lane of …\nConverts the low <code>f64</code> to <code>f32</code> and replaces the low lane of …\nRounds the <code>f32</code> lanes to <code>i32</code> lanes.\nRounds the two <code>f64</code> lanes to the low two <code>i32</code> lanes.\nRounds the four <code>i32</code> lanes to four <code>f32</code> lanes.\nRounds the two <code>f64</code> lanes to the low two <code>f32</code> lanes.\nRounds the lower two <code>i32</code> lanes to two <code>f64</code> lanes.\nRounds the two <code>f64</code> lanes to the low two <code>f32</code> lanes.\nCopy the low <code>i64</code> lane to a new register, upper bits 0.\nCopies the <code>a</code> value and replaces the low lane with the low <code>b</code>…\nLanewise <code>a / b</code>.\nLow lane <code>a / b</code>, other lanes unchanged.\nLanewise <code>a / b</code>.\nLowest lane <code>a / b</code>, high lane unchanged.\nNot a direct intrinsic, this is a <code>cmp_eq_mask</code> and then a …\nNot a direct intrinsic, this is a <code>cmp_eq_mask</code> and then a …\nNot a direct intrinsic, this is a <code>cmp_eq_mask_i8_m128i</code> and …\nGets an <code>i16</code> value out of an <code>m128i</code>, returns as <code>i32</code>.\nLowerExp formats each float.\nUpperHex formats each float’s bit pattern (via …\nDebug formats each float.\nDisplay formats each float, and leaves the type name off …\nOctal formats each float’s bit pattern (via <code>f32::to_bits</code>…\nLowerHex formats each float’s bit pattern (via …\nUpperExp formats each float.\nBinary formats each float’s bit pattern (via <code>f32::to_bits</code>…\nUpperHex formats each double’s bit pattern (via …\nDebug formats each double.\nUpperExp formats each double.\nLowerHex formats each double’s bit pattern (via …\nOctal formats each double’s bit pattern (via <code>f64::to_bits</code>…\nLowerExp formats each double.\nBinary formats each double’s bit pattern (via …\nDisplay formats each double, and leaves the type name off …\nLowerHex formats each <code>i32</code>.\nUpperExp formats each <code>i32</code>.\nUpperHex formats each <code>i32</code>.\nLowerExp formats each <code>i32</code>.\nBinary formats each <code>i32</code>.\nDisplay formats each <code>i32</code>, and leaves the type name off of …\nDebug formats each <code>i32</code>.\nOctal formats each <code>i32</code>.\nDebug formats each float.\nDisplay formats each float, and leaves the type name off …\nOctal formats each float’s bit pattern (via <code>f32::to_bits</code>…\nUpperHex formats each float’s bit pattern (via …\nLowerHex formats each float’s bit pattern (via …\nUpperExp formats each float.\nLowerExp formats each float.\nBinary formats each float’s bit pattern (via <code>f32::to_bits</code>…\nLowerHex formats each double’s bit pattern (via …\nLowerExp formats each double.\nBinary formats each double’s bit pattern (via …\nOctal formats each double’s bit pattern (via <code>f64::to_bits</code>…\nUpperHex formats each double’s bit pattern (via …\nDisplay formats each double, and leaves the type name off …\nDebug formats each double.\nUpperExp formats each double.\nUpperExp formats each <code>i32</code>.\nUpperHex formats each <code>i32</code>.\nLowerExp formats each <code>i32</code>.\nBinary formats each <code>i32</code>.\nDisplay formats each <code>i32</code>, and leaves the type name off of …\nDebug formats each <code>i32</code>.\nOctal formats each <code>i32</code>.\nLowerHex formats each <code>i32</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTransmutes an array into <code>m128</code>.\nTransmutes an array into <code>m128d</code>.\nTransmutes an array into <code>m256</code>.\nTransmutes an array into <code>m256d</code>.\nConverts from the bit patterns of these floats (<code>[u32;4]</code>).\nConverts from the bit patterns of these doubles (<code>[u64;2]</code>).\nConverts from the bit patterns of these floats (<code>[u32;8]</code>).\nConverts from the bit patterns of these doubles (<code>[u64;4]</code>).\nGets the low lane as an individual <code>f32</code> value.\nGets the lower lane as an <code>f64</code> value.\nConverts the low lane to <code>i32</code> and extracts as an individual …\nConverts the lower lane to an <code>i32</code> value.\nConverts the lower lane to an <code>i32</code> value.\nConverts the low lane to <code>i64</code> and extracts as an individual …\nConverts the lower lane to an <code>i64</code> value.\nConverts the lower lane to an <code>i64</code> value.\nInserts the low 16 bits of an <code>i32</code> value into an <code>m128i</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the <code>f32</code> reference into the low lane of the register.\nLoads the <code>f32</code> reference into all lanes of a register.\nLoads the reference into the low lane of the register.\nLoads the <code>f64</code> reference into all lanes of a register.\nLoads the low <code>i64</code> into a register.\nLoads the reference into a register.\nLoads the reference into a register.\nLoads the reference into a register.\nLoads the reference into a register, replacing the high …\nLoads the reference into a register, replacing the low …\nLoads the reference into a register with reversed order.\nLoads the reference into a register with reversed order.\nLoads the reference into a register.\nLoads the reference into a register.\nLoads the reference into a register.\nThe data for a 128-bit SSE register of four <code>f32</code> lanes.\nThe data for a 128-bit SSE register of two <code>f64</code> values.\nThe data for a 128-bit SSE register of integer data.\nThe data for a 256-bit AVX register of eight <code>f32</code> lanes.\nThe data for a 256-bit AVX register of four <code>f64</code> values.\nThe data for a 256-bit AVX register of integer data.\nLanewise <code>max(a, b)</code> with lanes as <code>i16</code>.\nLanewise <code>max(a, b)</code>.\nLow lane <code>max(a, b)</code>, other lanes unchanged.\nLanewise <code>max(a, b)</code>.\nLow lane <code>max(a, b)</code>, other lanes unchanged.\nLanewise <code>max(a, b)</code> with lanes as <code>u8</code>.\nLanewise <code>min(a, b)</code> with lanes as <code>i16</code>.\nLanewise <code>min(a, b)</code>.\nLow lane <code>min(a, b)</code>, other lanes unchanged.\nLanewise <code>min(a, b)</code>.\nLow lane <code>min(a, b)</code>, other lanes unchanged.\nLanewise <code>min(a, b)</code> with lanes as <code>u8</code>.\nMove the high lanes of <code>b</code> to the low lanes of <code>a</code>, other …\nMove the low lanes of <code>b</code> to the high lanes of <code>a</code>, other …\nMove the low lane of <code>b</code> to <code>a</code>, other lanes unchanged.\nGathers the <code>i8</code> sign bit of each lane.\nGathers the sign bit of each lane.\nGathers the sign bit of each lane.\nMultiply <code>i16</code> lanes producing <code>i32</code> values, horizontal add …\nLanewise <code>a * b</code> with lanes as <code>i16</code>, keep the high bits of …\nLanewise <code>a * b</code> with lanes as <code>i16</code>, keep the low bits of the …\nLanewise <code>a * b</code>.\nLow lane <code>a * b</code>, other lanes unchanged.\nLanewise <code>a * b</code>.\nLowest lane <code>a * b</code>, high lane unchanged.\nLanewise <code>a * b</code> with lanes as <code>u16</code>, keep the high bits of …\nMultiplies the odd <code>u32</code> lanes and gives the widened (<code>u64</code>) …\nAn explanation of the crate’s naming conventions.\nNot a direct intrinsic, but it’s very useful and the …\nNot a direct intrinsic, but it’s very useful and the …\nNot a direct intrinsic, but it’s very useful and the …\nSaturating convert <code>i16</code> to <code>i8</code>, and pack the values.\nSaturating convert <code>i16</code> to <code>u8</code>, and pack the values.\nSaturating convert <code>i32</code> to <code>i16</code>, and pack the values.\nFetches the cache line containing <code>addr</code> into all levels of …\nFetches into L2 and higher, anticipating write\nFetch data using the non-temporal access (NTA) hint. It …\nFetches the cache line containing <code>addr</code> into all levels of …\nFetches into L2 and higher.\nFetches into L3 and higher or an implementation-specific …\nReads the CPU’s timestamp counter value.\nReads the CPU’s timestamp counter value and store the …\nLanewise <code>1.0 / a</code> approximation.\nLow lane <code>1.0 / a</code> approximation, other lanes unchanged.\nLanewise <code>1.0 / sqrt(a)</code> approximation.\nLow lane <code>1.0 / sqrt(a)</code> approximation, other lanes …\nTurns a round operator token to the correct constant value.\nSets the args into an <code>m128i</code>, first arg is the high lane.\nSets the args into an <code>m128i</code>, first arg is the high lane.\nSet an <code>i32</code> as the low 32-bit lane of an <code>m128i</code>, other lanes …\nSets the args into an <code>m128i</code>, first arg is the high lane.\nSet an <code>i64</code> as the low 64-bit lane of an <code>m128i</code>, other lanes …\nSets the args into an <code>m128i</code>, first arg is the high lane.\nSets the args into an <code>m128</code>, first arg is the high lane.\nSets the args into an <code>m128</code>, first arg is the high lane.\nSets the args into an <code>m128d</code>, first arg is the high lane.\nSets the args into the low lane of a <code>m128d</code>.\nSets the args into an <code>m128i</code>, first arg is the low lane.\nSets the args into an <code>m128i</code>, first arg is the low lane.\nSets the args into an <code>m128i</code>, first arg is the low lane.\nSets the args into an <code>m128</code>, first arg is the low lane.\nSets the args into an <code>m128d</code>, first arg is the low lane.\nSplats the <code>i16</code> to all lanes of the <code>m128i</code>.\nSplats the <code>i32</code> to all lanes of the <code>m128i</code>.\nSplats the <code>i64</code> to both lanes of the <code>m128i</code>.\nSplats the <code>i8</code> to all lanes of the <code>m128i</code>.\nSplats the value to all lanes.\nSplats the args into both lanes of the <code>m128d</code>.\nShift all <code>u16</code> lanes to the left by the <code>count</code> in the lower …\nShift all <code>u32</code> lanes to the left by the <code>count</code> in the lower …\nShift all <code>u64</code> lanes to the left by the <code>count</code> in the lower …\nShifts all <code>u16</code> lanes left by an immediate.\nShifts all <code>u32</code> lanes left by an immediate.\nShifts both <code>u64</code> lanes left by an immediate.\nShift each <code>i16</code> lane to the right by the <code>count</code> in the lower …\nShift each <code>i32</code> lane to the right by the <code>count</code> in the lower …\nShift each <code>u16</code> lane to the right by the <code>count</code> in the lower …\nShift each <code>u32</code> lane to the right by the <code>count</code> in the lower …\nShift each <code>u64</code> lane to the right by the <code>count</code> in the lower …\nShifts all <code>i16</code> lanes right by an immediate.\nShifts all <code>i32</code> lanes right by an immediate.\nShifts all <code>u16</code> lanes right by an immediate.\nShifts all <code>u32</code> lanes right by an immediate.\nShifts both <code>u64</code> lanes right by an immediate.\nShuffle the <code>f32</code> lanes from <code>$a</code> and <code>$b</code> together using an …\nShuffle the <code>f64</code> lanes from <code>$a</code> and <code>$b</code> together using an …\nShuffle the <code>i32</code> lanes in <code>$a</code> using an immediate control …\nShuffle the high <code>i16</code> lanes in <code>$a</code> using an immediate …\nShuffle the low <code>i16</code> lanes in <code>$a</code> using an immediate control …\nLanewise <code>sqrt(a)</code>.\nLow lane <code>sqrt(a)</code>, other lanes unchanged.\nLanewise <code>sqrt(a)</code>.\nLow lane <code>sqrt(b)</code>, upper lane is unchanged from <code>a</code>.\nStores the high lane value to the reference given.\nStores the value to the reference given.\nStores the value to the reference given.\nStores the low lane value to the reference given.\nStores the value to the reference given.\nStores the low lane value to the reference given.\nStores the value to the reference given.\nStores the value to the reference given in reverse order.\nStores the value to the reference given.\nStores the low lane value to all lanes of the reference …\nStores the low lane value to all lanes of the reference …\nStores the value to the reference given.\nStores the value to the reference given.\nStores the value to the reference given.\nLanewise <code>a - b</code> with lanes as <code>i16</code>.\nLanewise <code>a - b</code> with lanes as <code>i32</code>.\nLanewise <code>a - b</code> with lanes as <code>i64</code>.\nLanewise <code>a - b</code> with lanes as <code>i8</code>.\nLanewise <code>a - b</code>.\nLow lane <code>a - b</code>, other lanes unchanged.\nLanewise <code>a - b</code>.\nLowest lane <code>a - b</code>, high lane unchanged.\nLanewise saturating <code>a - b</code> with lanes as <code>i16</code>.\nLanewise saturating <code>a - b</code> with lanes as <code>i8</code>.\nLanewise saturating <code>a - b</code> with lanes as <code>u16</code>.\nLanewise saturating <code>a - b</code> with lanes as <code>u8</code>.\nCompute “sum of <code>u8</code> absolute differences”.\nTransmutes the <code>m128</code> to an array.\nTransmutes the <code>m128d</code> to an array.\nTransmutes the <code>m256</code> to an array.\nTransmutes the <code>m256d</code> to an array.\nConverts into the bit patterns of these floats (<code>[u32;4]</code>).\nConverts into the bit patterns of these doubles (<code>[u64;2]</code>).\nConverts into the bit patterns of these floats (<code>[u32;8]</code>).\nConverts into the bit patterns of these doubles (<code>[u64;4]</code>).\nTranspose four <code>m128</code> as if they were a 4x4 matrix.\nTruncate the <code>f32</code> lanes to <code>i32</code> lanes.\nTruncate the <code>f64</code> lanes to the lower <code>i32</code> lanes (upper <code>i32</code> …\nTruncate the lower lane into an <code>i32</code>.\nTruncate the lower lane into an <code>i64</code>.\nUnpack and interleave high <code>i16</code> lanes of <code>a</code> and <code>b</code>.\nUnpack and interleave high <code>i32</code> lanes of <code>a</code> and <code>b</code>.\nUnpack and interleave high <code>i64</code> lanes of <code>a</code> and <code>b</code>.\nUnpack and interleave high <code>i8</code> lanes of <code>a</code> and <code>b</code>.\nUnpack and interleave high lanes of <code>a</code> and <code>b</code>.\nUnpack and interleave high lanes of <code>a</code> and <code>b</code>.\nUnpack and interleave low <code>i16</code> lanes of <code>a</code> and <code>b</code>.\nUnpack and interleave low <code>i32</code> lanes of <code>a</code> and <code>b</code>.\nUnpack and interleave low <code>i64</code> lanes of <code>a</code> and <code>b</code>.\nUnpack and interleave low <code>i8</code> lanes of <code>a</code> and <code>b</code>.\nUnpack and interleave low lanes of <code>a</code> and <code>b</code>.\nUnpack and interleave low lanes of <code>a</code> and <code>b</code>.\nAll lanes zero.\nBoth lanes zero.\nAll lanes zero.")