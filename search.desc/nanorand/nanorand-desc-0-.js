searchState.loadedDescShard("nanorand", 0, "A library meant for fast, random number generation with …\nProvides a buffered wrapper for RNGs, preventing bits from …\nImplementation of cryptography, for CSPRNGs.\nSources for obtaining entropy.\nTraits for generating types from an RNG.\nRNG algorithms.\nProvides a thread-local <code>WyRand</code> RNG.\nA buffered wrapper for any Rng implementation. It will …\nReturns how many unused bytes are currently buffered.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the internal RNG, dropping the buffer.\nWraps a <code>Rng</code> InternalGenerator in a <code>BufferedRng</code> instance.\nImplementation of the ChaCha cryptographic primitives. …\nDo one ChaCha round on the input data.\nIncrement the 64-bit counter of the internal ChaCha20 …\nInitialize the ChaCha internal state, with a 256-bit key …\nA backup entropy source, trying rdseed first, and if it …\nA wrapper function for non-x86(64) platforms that do not …\nPull in system entropy using the <code>getrandom</code> crate. Uses …\nA trait used for generating a random object with an RNG,\nA trait used for generating a random number within a …\nReturn a random instance of the implementing type, from …\nReturn a ranged number of the implementing type, from the …\nA trait that represents a random number generator.\nA trait that represents an RNG that can be reseeded from …\nImplementation of the ChaCha CSPRNG algorithm. More …\nFill an array with the specified type.\nFill an array of bytes with randomness.\nGenerates a random of the specified type, seeding from the …\nGenerates a random of the specified type, seeding from the …\nImplementation of the Pcg64 PRNG algorithm. More details …\nGenerates a random sequence of bytes, seeding from the …\nRe-seed the RNG with the specified bytes.\nShuffle a slice, using the RNG.\nImplementation of the wyrand PRNG algorithm. More details …\nAn instance of the ChaCha random number generator. Seeded …\nThe ChaCha CSPRNG, with 12 rounds.\nThe ChaCha CSPRNG, with 20 rounds.\nThe ChaCha CSPRNG, with 8 rounds.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ChaCha</code> instance, seeding from the system’s …\nCreate a new <code>ChaCha</code> instance, using the provided key and …\nAn instance of the Pcg64 random number generator. Seeded …\nCreate a new <code>Pcg64</code> instance, seeding from the system’s …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Pcg64</code> instance, seeding from the system’s …\nCreate a new <code>Pcg64</code> instance, using a provided seed.\nAn instance of the WyRand random number generator. Seeded …\nCreate a new <code>WyRand</code> instance, seeding from the system’s …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>WyRand</code> instance, seeding from the system’s …\nCreate a new <code>WyRand</code> instance, using a provided seed.\nFetch a thread-local <code>WyRand</code>")