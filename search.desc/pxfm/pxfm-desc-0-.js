searchState.loadedDescShard("pxfm", 0, "Cbrt for given value for const context. This is simplified …\nCopies sign from <code>y</code> to <code>x</code>\nCopies sign from <code>y</code> to <code>x</code>\nDirty fast pow\nExp for given value for const context. This is simplified …\nExp for given value for const context. This is simplified …\nComputes acos(x)\nCompute acos\nHuperbolic acos\nHyperbolic arc cosine function\nComputes acos(x)/PI\nComputes acos(x)/PI\nComputes asin(x)\nComputes asin\nHuperbolic sine function\nHyperbolic arcsine function\nComputes asin(x)/PI\nComputes asin(x)/PI\nComputes atan in double precision\nComputes atan(x)\nComputes atan2\nComputes atan(x)/PI\nComputes atan(x/y) / PI\nComputes atan\nHyperbolic arc tangent\nHyperbolic atan\nComputes atan(x)/pi\nComputes atan(x)/PI\nComputes beta function\nComputes beta function\nRegularized incomplete beta\nRegularized incomplete beta\nComputes the missing leg of a right triangle\nComputes the missing leg of a right triangle\nComputes cube root\nComputes cube root\nComputes (1+x)^y\nComputes (1+x)^y - 1\nComputes compound (1.0 + x)^y - 1\nComputes compound function (1.0 + x)^y\nCosine for double precision\nComputes cosine function\nHyperbolic cosine function\nHyperbolic cos\nComputes cos(x) - 1\nComputes cos(x) - 1\nComputes cos(PI*x)\nComputes cos(PI*x)\nCotangent in double precision\nComputes cotangent\nComputes cotangent 1/tan(PI*x)\nComputes 1/tan(PI*x)\nCosecant for double precision\nCosecant ( 1 / sin(x) )\nComputes digamma(x)\nComputes digamma(x)\nError function\nComplementary error function\nComplementary error function\nComplementary inverse error function\nComplementary inverse error function\nScaled complementary error function (exp(x^2)*erfc(x))\nScaled complementary error function (exp(x^2)*erfc(x))\nError function\nInverse error function\nInverse error function\nComputes exponent\nComputes exp10\nComputes exp10\nComputes 10^x - 1\nComputes 10^x - 1\nComputes exp2\nComputing exp2f\nComputes 2^x - 1\nComputes 2^x - 1\nComputes exp\nComputes e^x - 1\nComputes e^x - 1\nRegularized lower incomplete gamma\nRegularized lower incomplete gamma\nRegularized upper incomplete gamma\nRegularized upper incomplete gamma\nComputes hypot\nHypot function\nModified Bessel of the first kind of order 0\nModified exponentially scaled Bessel of the first kind of …\nModified exponentially scaled Bessel of the first kind of …\nModified Bessel of the first kind of order 0\nModified Bessel of the first kind of order 1\nModified exponentially scaled Bessel of the first kind of …\nModified exponentially scaled Bessel of the first kind of …\nModified Bessel of the first kind of order 1\nModified bessel of the first kind of order 2\nModified Bessel of the first kind of order 2\nBessel of the first kind of order 0\nBessel of the first kind of order 0\nBessel of the first kind of order 1\nBessel of the first kind of order 1\nNormalized jinc 2*J1(PI*x)/(pi*x)\nNormalized jinc 2*J1(PI*x)/(pi*x)\nModified Bessel of the second kind of order 0\nModified exponentially scaled Bessel of the first kind of …\nModified exponentially scaled Bessel of the first kind of …\nModified Bessel of the second kind of order 0\nModified Bessel of the second kind of order 1\nModified exponentially scaled Bessel of the second kind of …\nModified exponentially scaled Bessel of the second kind of …\nModified Bessel of the second kind of order 1\nModified Bessel of the second kind of order 2\nComputes log(gamma(x))\nComputes log(gamma(x))\nComputes log(gamma(x))\nComputes log(gamma(x))\nComputes log(beta(x)) function\nComputes log(beta(x)) function\nNatural logarithm\nLogarithm of base 10\nLogarithm of base 10\nComputes log10(x+1)\nComputes log10(x+1)\nComputes log(x+1)\nComputes log(x+1)\nComputes log(1+x) - x\nComputes log(1+x) - x\nLog2(x)\nLogarithm of base 2\nComputes log2(x+1)\nComputes log2(x+1)\nNatural logarithm\nLogistic function\nLogistic function\nInverse logistic function\nInverse logistic function\nPower function\nPower function\nComputes x^y - 1\nComputes x^y - 1\nComputes 1/cbrt(x)\nComputes 1/cbrt(x)\nComputes 1/erf(x)\nComputes 1/erf(x)\nComputes 1/sqrt(x)\nComputes 1/sqrt(x)\nSecant for double precision\nComputes secant ( 1 / cos(x) )\nSine for double precision\nComputes sinc(x)\nComputes sinc(x)\nSine and cosine for double precision\nSine and cosine\nComputes sin(PI<em>x) and cos(PI</em>x)\nComputes sin(x) and cos(x) at the same time\nComputes sin(PI*x)/(PI*x)\nComputes sin(PI*x)/(PI*x)\nSine function\nHyperbolic sine function\nHuperbolic sine function\nComputes sin(x) - x\nComputes sin(x) - x\nComputes sin(PI*x)\nComputes sin(PI*x)\nComputes sqrt(1+x) - 1\nComputes sqrt(1+x) - 1\nTangent in double precision\nComputes tan\nHyperbolic tan\nHyperbolic tangent\nComputes tan(PI*x)\nComputes tan(PI*x)\nComputes gamma(x)\nTrue gamma function\nComputes the trigamma function ψ₁(x).\nComputes the trigamma function ψ₁(x).\nBessel of the second kind of order 0 (Y0)\nBessel of the second kind of order 0 (Y0)\nBessel of the second kind of order 1 ( Y1 )\nBessel of the second kind of order 1 (Y1)\nFloors value\nRound to integer towards minus infinity\nLog for given value for const context. This is simplified …\nLog for given value for const context. This is simplified …\nPow for given value for const context. This is simplified …\nPower function for given value for const context. This is …\nComputes Square root. Most of CPU have built-in …")