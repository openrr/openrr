searchState.loadedDescShard("nalgebra", 1, "Builds a right-handed look-at view matrix without …\nBuilds a right-handed look-at view matrix without …\nBuilds a right-handed look-at view matrix.\nBuilds a right-handed look-at view matrix.\nBuilds a right-handed look-at view matrix without …\nBuilds a right-handed look-at view matrix.\nBuilds a right-handed look-at view matrix.\nBuilds a right-handed look-at view matrix including …\nBuilds a right-handed look-at view matrix including …\nA synonym for the norm of this quaternion.\nA synonym for the squared norm of this quaternion.\nReturns a point containing the result of <code>f</code> applied to each …\nA reference to the underlying matrix.\nA reference to the underlying matrix representation of …\nA mutable reference to underlying matrix. Use …\nA mutable reference to the underlying matrix …\nA mutable reference to the underlying matrix.\nA mutable reference to the underlying matrix …\nCreate the mean unit quaternion from a data structure …\nInitializes this point from its components.\nInitializes this point from its components.\nInitializes this point from its components.\nInitializes this point from its components.\nInitializes this point from its components.\nInitializes this point from its components.\nBuilds a 2 dimensional rotation matrix from an angle in …\nBuilds a 3 dimensional rotation matrix from an axis and an …\nCreates a new unit quaternion rotation from a rotation …\nBuilds the unit complex number corresponding to the …\nCreates a new 2D isometry from a translation and a …\nCreates a new isometry from a translation and a rotation …\nCreates a new 2D isometry from a translation and a …\nCreates a new isometry from a translation and a rotation …\nCreates a new reflection wrt. the plane orthogonal to the …\nInitializes this point from its components.\nInitializes this point from its components.\nInitializes this point from its components.\nInitializes this point from its components.\nInitializes this point from its components.\nInitializes this point from its components.\nBuilds a 2 dimensional rotation matrix from an angle in …\nBuilds a 3 dimensional rotation matrix from an axis and an …\nCreates a new quaternion from its individual components. …\nInitializes this translation from its components.\nInitializes this translation from its components.\nInitializes this translation from its components.\nInitializes this translation from its components.\nInitializes this translation from its components.\nInitializes this translation from its components.\nInitializes this Scale from its components.\nInitializes this Scale from its components.\nInitializes this Scale from its components.\nInitializes this Scale from its components.\nInitializes this Scale from its components.\nInitializes this Scale from its components.\nCreates a new isometry from a translation and a rotation …\nCreates a new 2D isometry from a translation and a …\nCreates a new 2D isometry from a translation and a …\nCreates a new isometry from a translation and a rotation …\nCreates a new similarity from a translation, rotation …\nCreates a new similarity from a translation and a rotation …\nCreates a new similarity from a translation, a rotation, …\nCreates a new similarity from a translation, rotation …\nCreates a new orthographic projection matrix.\nCreates a new perspective matrix from the aspect ratio, y …\nCreates a new reflection wrt. the plane orthogonal to the …\nCreates a new unit quaternion rotation from a rotation …\nDeprecated: Use <code>Isometry::face_towards</code> instead.\nDeprecated: Use <code>Isometry::face_towards</code> instead.\nDeprecated: Use <code>Isometry::face_towards</code> instead.\nDeprecated: Use <code>Isometry::face_towards</code> instead.\nDeprecated: Use <code>Rotation3::face_towards</code> instead.\nDeprecated: Use <code>UnitQuaternion::face_towards</code> instead.\nDeprecated: Use <code>Rotation3::face_towards</code> instead.\nDeprecated: Use [<code>SimilarityMatrix3::face_towards</code>] instead.\nDeprecated: Use [<code>SimilarityMatrix3::face_towards</code>] instead.\nNormalized linear interpolation between two unit …\nNormalized linear interpolation between two unit …\nThe norm of this quaternion.\nThe squared norm of this quaternion.\nNormalizes this quaternion.\nNormalizes this quaternion.\nNormalizes this quaternion.\nNormalizes this quaternion.\nCreates a new identity transform.\nCreates a new identity isometry.\nCreates a new identity similarity.\nCreates a new point with all coordinates equal to zero.\nCalculates the outer product (also known as the wedge …\nThe polar decomposition of this quaternion.\nRaise the rotation to a given floating power, i.e., …\nRaise the rotation to a given floating power, i.e., …\nRaise the quaternion to a given floating power.\nRaise this unit complex number to a given floating power.\nRaise the rotation to a given floating power, i.e., …\nRaise the rotation to a given floating power, i.e., …\nRaise the quaternion to a given floating power.\nThe similarity transformation that applies a scaling …\nSets <code>self</code> to the similarity transformation that applies a …\nCalculates the projection of <code>self</code> onto <code>other</code> (also known …\nProjects a point. Faster than matrix multiplication.\nProjects a point. Faster than matrix multiplication.\nProjects a vector. Faster than matrix multiplication.\nProjects a vector. Faster than matrix multiplication.\nInverts <code>self</code>.\nConvert quaternion to pure quaternion.\nThe underlying quaternion.\nThe real component of the quaternion\nApplies the reflection to the columns of <code>rhs</code>.\nApplies the reflection to the rows of <code>lhs</code>.\nApplies the reflection to the rows of <code>lhs</code>.\nApplies the reflection to the columns of <code>rhs</code>.\nCalculates the rejection of <code>self</code> from <code>other</code> (also known as …\nEnsure this rotation is an orthonormal rotation matrix. …\nEnsure this rotation is an orthonormal rotation matrix. …\nEnsure this rotation is an orthonormal rotation matrix. …\nEnsure this rotation is an orthonormal rotation matrix. …\nThe right offset of the view cuboid.\nRight quaternionic division.\nReturn the rotation part of this unit dual quaternion.\nCreates a new isometry from the given rotation angle.\nCreates a new isometry from the given rotation angle.\nCreates a new isometry from the given rotation angle.\nCreates a new isometry from the given rotation angle.\nCreates a new isometry from the given rotation angle.\nCreates a new isometry from the given rotation angle.\nCreates a new isometry from the given rotation angle.\nCreates a new isometry from the given rotation angle.\nThe pure rotational part of this isometry.\nThe pure rotational part of this isometry.\nThe pure rotational part of this isometry.\nThe pure rotational part of this isometry.\nThe pure rotational part of this isometry.\nThe rotation matrix required to align <code>a</code> and <code>b</code> but with its …\nThe rotation matrix required to align <code>a</code> and <code>b</code> but with its …\nThe unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …\nThe unit complex needed to make <code>a</code> and <code>b</code> be collinear and …\nThe rotation matrix required to align <code>a</code> and <code>b</code> but with its …\nThe rotation matrix required to align <code>a</code> and <code>b</code> but with its …\nThe unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …\nThe unit complex needed to make <code>a</code> and <code>b</code> be collinear and …\nThe rotation matrix needed to make <code>self</code> and <code>other</code> coincide.\nThe rotation matrix needed to make <code>self</code> and <code>other</code> coincide.\nThe unit quaternion needed to make <code>self</code> and <code>other</code> coincide.\nThe unit complex number needed to make <code>self</code> and <code>other</code> …\nThe rotation matrix needed to make <code>self</code> and <code>other</code> coincide.\nThe rotation matrix needed to make <code>self</code> and <code>other</code> coincide.\nThe isometry that applies the rotation <code>r</code> with its axis …\nThe similarity that applies the scaling factor <code>scaling</code>, …\nThe scalar part <code>w</code> of this quaternion.\nThe rotation angle returned as a 1-dimensional vector.\nThe rotation axis multiplied by the rotation angle.\nThe rotation axis of this unit quaternion multiplied by …\nThe rotation angle returned as a 1-dimensional vector.\nThe rotation angle returned as a 1-dimensional vector.\nThe rotation axis multiplied by the rotation angle.\nThe smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …\nThe smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …\nThe smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …\nThe smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …\nThe smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …\nThe smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …\nThe smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …\nThe smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …\nThe scaling factor of this similarity transformation.\nScrew linear interpolation between two unit quaternions. …\nUpdates this perspective matrix with a new <code>width / height</code> …\nSets the bottom offset of the view cuboid.\nSets the view cuboid offsets along the <code>y</code> axis.\nSets the category of this transform.\nUpdates this perspective with a new y field of view of the …\nSets the left offset of the view cuboid.\nSets the view cuboid offsets along the <code>x</code> axis.\nSets the right offset of the view cuboid.\nThe scaling factor of this similarity transformation.\nSets the top offset of the view cuboid.\nSets the far plane offset of the view cuboid.\nUpdates this perspective matrix with a new far plane …\nSets the near plane offset of the view cuboid.\nUpdates this perspective matrix with a new near plane …\nSets the near and far plane offsets of the view cuboid.\nUpdates this perspective matrix with new near and far …\nAttempt to inverse this quaternion.\nCalculates the quaternionic sinus.\nThe sine of the rotation angle.\nCalculates the hyperbolic quaternionic sinus.\nSpherical linear interpolation between two rotation …\nSpherical linear interpolation between two rotation …\nSpherical linear interpolation between two unit …\nSpherical linear interpolation between two rotations …\nSpherical linear interpolation between two rotation …\nSpherical linear interpolation between two rotation …\nCalculates square root.\nCalculates square of a quaternion.\nThe stride of this point. This is the number of buffer …\nComputes the supremum (aka. componentwise max) of two …\nSwaps two entries without bound-checking.\nCalculates the quaternionic tangent.\nCalculates the hyperbolic quaternionic tangent.\nCreates Euler angles from a rotation.\nConverts this unit quaternion into its equivalent Euler …\nCreates Euler angles from a rotation.\nConverts this unit quaternion into its equivalent …\nConverts this unit dual quaternion interpreted as an …\nConverts this unit complex number into its equivalent …\nConverts this transform into its equivalent homogeneous …\nConverts this point into a vector in homogeneous …\nConverts this rotation into its equivalent homogeneous …\nConverts this translation into its equivalent homogeneous …\nConverts this Scale into its equivalent homogeneous …\nConverts this isometry into its equivalent homogeneous …\nConverts this similarity into its equivalent homogeneous …\nComputes the corresponding homogeneous matrix.\nComputes the corresponding homogeneous matrix.\nBuilds an isometry from this unit dual quaternion.\nConverts this isometry into its equivalent homogeneous …\nThis transformation seen as a <code>Projective3</code>.\nThis transformation seen as a <code>Projective3</code>.\nBuilds a rotation matrix from this unit quaternion.\nBuilds the rotation matrix corresponding to this unit …\nThe top offset of the view cuboid.\nApply the rotation to the given point.\nRotate a point by this unit quaternion.\nRotate and translate a point by this unit dual quaternion …\nRotate the given point by this unit complex number.\nTransform the given point by this transformation.\nRotate the given point.\nTranslate the given point.\nTranslate the given point.\nTransform the given point by this isometry.\nTransform the given point by this similarity.\nApply the rotation to the given vector.\nRotate a vector by this unit quaternion.\nRotate a vector by this unit dual quaternion, ignoring the …\nRotate the given vector by this unit complex number.\nTransform the given vector by this transformation, …\nRotate the given vector.\nTransform the given vector by this isometry, ignoring the …\nTransform the given vector by this similarity, ignoring …\nReturn the translation part of this unit dual quaternion.\nCreates a new isometry from the given translation …\nCreates a new isometry from the given translation …\nCreates a new isometry from the given translation …\nCreates a new isometry from the given translation …\nCreates a new isometry from the given translation …\nCreates a new isometry from the given translation …\nCreates a new isometry from the given translation …\nCreates a new isometry from the given translation …\nThe pure translational part of this isometry.\nThe pure translational part of this isometry.\nThe pure translational part of this isometry.\nThe pure translational part of this isometry.\nThe pure translational part of this isometry.\nTransposes <code>self</code>.\nTransposes <code>self</code> in-place.\nAttempts to invert this transformation. You may use …\nInverts this quaternion if it is not zero.\nInverts this dual quaternion if it is not zero.\nInverts <code>self</code>.\nAttempts to invert this transformation in-place. You may …\nInverts this quaternion in-place if it is not zero.\nInverts this dual quaternion in-place if it is not zero.\nInverts <code>self</code> in-place.\nTranslate the given point by the inverse of this Scale.\nAttempts to interpolate between two isometries using a …\nAttempts to interpolate between two isometries using a …\nAttempts to interpolate between two isometries using a …\nAttempts to interpolate between two isometries using a …\nComputes the screw-linear interpolation between two unit …\nComputes the spherical linear interpolation between two …\nComputes the spherical linear interpolation between two …\nComputes the spherical linear interpolation between two …\nUn-projects a point. Faster than multiplication by the …\nUn-projects a point. Faster than multiplication by the …\nRetrieves the underlying matrix. Deprecated: Use …\nUnwraps the underlying matrix. Deprecated: Use …\nRetrieves the underlying homogeneous matrix. Deprecated: …\nRetrieves the underlying homogeneous matrix. Deprecated: …\nThe vector part <code>(i, j, k)</code> of this quaternion.\nThe translation coordinates, i.e., how much is added to a …\nThe translation coordinates, i.e., how much is added to a …\nThe translation coordinates, i.e., how much is added to a …\nThe translation coordinates, i.e., how much is added to a …\nThe translation coordinates, i.e., how much is added to a …\nThe translation coordinates, i.e., how much is added to a …\nThe scale coordinates, i.e., how much is multiplied to a …\nThe scale coordinates, i.e., how much is multiplied to a …\nThe scale coordinates, i.e., how much is multiplied to a …\nThe scale coordinates, i.e., how much is multiplied to a …\nThe scale coordinates, i.e., how much is multiplied to a …\nThe scale coordinates, i.e., how much is multiplied to a …\nThe translation coordinates, i.e., how much is added to a …\nThe scale coordinates, i.e., how much is multiplied to a …\nThe mutable vector part <code>(i, j, k)</code> of this quaternion.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nThe far plane offset of the view cuboid.\nGets the far plane offset of the view frustum.\nThe near plane offset of the view cuboid.\nGets the near plane offset of the view frustum.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nBuilds a new point from components of <code>self</code>.\nThe bidiagonalization of a general matrix.\nThe Cholesky decomposition of a …\nThe QR decomposition (with column pivoting) of a general …\nLU decomposition with full row and column pivoting.\nHessenberg decomposition of a general matrix.\nLU decomposition with partial (row) pivoting.\nA sequence of row or column permutations.\nThe QR decomposition of a general matrix.\nSingular Value Decomposition of a general matrix.\nSchur decomposition of a square matrix.\nEigendecomposition of a symmetric matrix.\nTridiagonalization of a symmetric matrix.\nUDU factorization.\nAdds the interchange of the row (or column) <code>i</code> with the row …\nFunctions for balancing a matrix.\nComputes the complex eigenvalues of the decomposed matrix.\nRetrieves the upper trapezoidal submatrix <code>R</code> of this …\nThe diagonal matrix resulting from the factorization\nReturns the diagonal elements as a matrix\nComputes the determinant of the decomposed matrix.\nComputes the determinant of the decomposed matrix.\nComputes the determinant of the decomposed matrix.\nComputes the determinant of the decomposed matrix.\nThe determinant of the matrix corresponding to this …\nThe diagonal part of this decomposed matrix.\nThe diagonal components of this decomposition.\nComputes the real eigenvalues of the decomposed matrix.\nThe unsorted eigenvalues of the decomposed matrix.\nThe eigenvectors of the decomposed matrix.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruction of givens rotations.\nRetrieves the upper trapezoidal submatrix <code>H</code> of this …\nConstruction of householder elementary reflections.\nCreates a new dynamically-allocated sequence of <code>n</code> identity …\nCreates a new statically-allocated sequence of <code>D</code> identity …\nCreates a new sequence of D identity permutations.\nUpdates the decomposition such that we get the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApplies this sequence of permutations in reverse to the …\nApplies this sequence of permutations in reverse to the …\nComputes the inverse of the decomposed matrix.\nReturns true if the permutation sequence contains no …\nIndicates if the decomposed matrix is invertible.\nIndicates if the decomposed matrix is invertible.\nIndicates if the decomposed matrix is invertible.\nIndicates if the decomposed matrix is invertible.\nIndicates whether this decomposition contains an …\nRetrieves the lower-triangular factor of the Cholesky …\nThe lower triangular matrix of this decomposition.\nThe lower triangular matrix of this decomposition.\nRetrieves the lower-triangular factor of the Cholesky …\nThe lower triangular matrix of this decomposition.\nThe number of non-identity permutations applied by this …\nComputes the Bidiagonal decomposition using householder …\nAttempts to compute the Cholesky decomposition of <code>matrix</code>.\nComputes the <code>ColPivQR</code> decomposition using householder …\nComputes the LU decomposition with full pivoting of <code>matrix</code>.\nComputes the Hessenberg decomposition using householder …\nComputes the LU decomposition with partial (row) pivoting …\nComputes the QR decomposition using householder …\nComputes the Schur decomposition of a square matrix.\nComputes the Singular Value Decomposition of <code>matrix</code> using …\nComputes the eigendecomposition of the given symmetric …\nComputes the tridiagonalization of the symmetric matrix <code>m</code>.\nComputes the UDU^T factorization.\nComputes the Cholesky decomposition of <code>matrix</code> without …\nComputes the Singular Value Decomposition of <code>matrix</code> using …\nAttempts to approximate the Cholesky decomposition of …\nComputes the Hessenberg decomposition using householder …\nThe off-diagonal part of this decomposed matrix.\nThe off-diagonal components of this decomposition.\nRetrieves the column permutation of this decomposition.\nThe row permutations of this decomposition.\nThe row permutations of this decomposition.\nUses the given matrix as-is without any checks or …\nApplies this sequence of permutations to the columns of <code>rhs</code>…\nApplies this sequence of permutations to the rows of <code>rhs</code>.\nComputes the pseudo-inverse of the decomposed matrix.\nComputes the orthogonal matrix <code>Q</code> of this decomposition.\nThe column permutations of this decomposition.\nComputes the orthogonal matrix <code>Q</code> of this decomposition.\nComputes the orthogonal matrix <code>Q</code> of this decomposition.\nComputes the orthogonal matrix <code>Q</code> of this decomposition.\nMultiplies the provided matrix by the transpose of the <code>Q</code> …\nMultiplies the provided matrix by the transpose of the <code>Q</code> …\nRetrieves the upper trapezoidal submatrix <code>R</code> of this …\nRetrieves the upper trapezoidal submatrix <code>R</code> of this …\nComputes the rank of the decomposed matrix, i.e., the …\nGiven the Cholesky decomposition of a matrix <code>M</code>, a scalar …\nRebuild the original matrix.\nRebuild the original matrix.\nRecomputes the original symmetric matrix.\nUpdates the decomposition such that we get the …\nThe singular values of this SVD.\nReturns the solution of the system <code>self * x = b</code> where <code>self</code> …\nSolves the linear system <code>self * x = b</code>, where <code>x</code> is the …\nSolves the linear system <code>self * x = b</code>, where <code>x</code> is the …\nSolves the linear system <code>self * x = b</code>, where <code>x</code> is the …\nSolves the linear system <code>self * x = b</code>, where <code>x</code> is the …\nSolves the system <code>self * x = b</code> where <code>self</code> is the …\nSolves the system <code>self * x = b</code> where <code>self</code> is the …\nSolves the linear system <code>self * x = b</code>, where <code>x</code> is the …\nSolves the linear system <code>self * x = b</code>, where <code>x</code> is the …\nSolves the linear system <code>self * x = b</code>, where <code>x</code> is the …\nSolves the linear system <code>self * x = b</code>, where <code>x</code> is the …\nSort the estimated components of the SVD by its singular …\nconverts SVD results to Polar decomposition form of the …\nComputes the inverse of the decomposed matrix.\nComputes the inverse of the decomposed matrix.\nComputes the inverse of the decomposed matrix.\nComputes the inverse of the decomposed matrix.\nComputes the inverse of the decomposed matrix and outputs …\nPerforms a LU decomposition to overwrite <code>out</code> with the …\nAttempts to compute the Schur decomposition of a square …\nAttempts to compute the Singular Value Decomposition of …\nComputes the eigendecomposition of the given symmetric …\nAttempts to compute the Singular Value Decomposition of …\nComputes the orthogonal matrix <code>U</code> of this <code>U * D * V</code> …\nThe upper triangular matrix of this decomposition.\nThe upper triangular matrix of this decomposition.\nThe left-singular vectors <code>U</code> of this SVD.\nThe upper triangular matrix resulting from the …\nUnpacks this decomposition into its three matrix factors …\nRetrieves the lower-triangular factor of the Cholesky …\nUnpacks this decomposition into its two matrix factors.\nThe two matrices of this decomposition and the row and …\nRetrieves <code>(q, h)</code> with <code>q</code> the orthogonal matrix of this …\nThe row permutations and two triangular matrices of this …\nUnpacks this decomposition into its two matrix factors.\nRetrieves the unitary matrix <code>Q</code> and the …\nRetrieve the orthogonal transformation, diagonal, and off …\nRetrieves the lower-triangular factor of the Cholesky …\nRetrieves the upper trapezoidal submatrix <code>H</code> of this …\nRetrieves the upper trapezoidal submatrix <code>R</code> of this …\nRetrieves the upper trapezoidal submatrix <code>R</code> of this …\nRetrieve the diagonal, and off diagonal elements of this …\nComputes the orthogonal matrix <code>V_t</code> of this <code>U * D * V_t</code> …\nThe right-singular vectors <code>V^t</code> of this SVD.\nComputes the wilkinson shift, i.e., the 2x2 symmetric …\nApplies in-place a modified Parlett and Reinsch matrix …\nComputes in-place <code>D * m * D.inverse()</code>, where <code>D</code> is the …\nA Givens rotation.\nThe cos part of this roration.\nComputes the rotation <code>R</code> required such that the <code>x</code> component …\nComputes the rotation <code>R</code> required such that the <code>y</code> component …\nReturns the argument unchanged.\nThe Givents rotation that does nothing.\nCalls <code>U::from(self)</code>.\nThe inverse of this givens rotation.\nInitializes a Givens rotation from its non-normalized …\nInitializes a Givens rotation from its components.\nPerforms the multiplication <code>rhs = self * rhs</code> in-place.\nPerforms the multiplication <code>lhs = lhs * self</code> in-place.\nThe sin part of this roration.\nInitializes a Givens rotation form its non-normalized …")