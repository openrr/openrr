searchState.loadedDescShard("nalgebra", 0, "nalgebra\nTrait <strong>alias</strong> for <code>Add</code> and <code>AddAssign</code> with result of type <code>Self</code>.\nTrait <strong>alias</strong> for <code>Div</code> and <code>DivAssign</code> with result of type <code>Self</code>.\nTrait <strong>alias</strong> for <code>Mul</code> and <code>MulAssign</code> with result of type <code>Self</code>.\nTrait <strong>alias</strong> for <code>Sub</code> and <code>SubAssign</code> with result of type <code>Self</code>.\nA complex number in Cartesian form.\nTrait shared by all complex fields and its subfields (like …\nThe type of the elements of each lane of this SIMD value.\nTrait implemented by fields, i.e., complex numbers and …\nA constant <code>Complex</code> <em>i</em>, the imaginary unit.\nA constant <code>Complex</code> 1.\nTrait shared by all reals.\nLane-wise generalization of <code>bool</code> for SIMD booleans.\nType of the result of comparing two SIMD values like <code>self</code>.\nLane-wise generalisation of <code>ComplexField</code> for SIMD complex …\nLane-wise generalization of the standard <code>PartialOrd</code> for …\nLanewise generalization of <code>RealField</code> for SIMD reals.\nType of the coefficients of a complex number.\nBase trait for every SIMD types.\nA constant <code>Complex</code> 0.\nThe absolute value of <code>a</code>.\nThe absolute value of this complex number: …\nComputes the principal value of the inverse cosine of <code>self</code>.\nComputes the principal value of inverse hyperbolic cosine …\nAre all vector lanes true?\nLane-wise bitwise and of the vector elements.\nIs any vector lane true?\nThe argument of this complex number.\nComputes the principal value of the inverse sine of <code>self</code>.\nComputes the principal value of inverse hyperbolic sine of …\nComputes the principal value of the inverse tangent of <code>self</code>…\nComputes the principal value of inverse hyperbolic tangent …\n[Reexported at the root of this crate.] Data structures …\nA bit mask representing the boolean state of each lanes of …\nThe center of two points.\nReturns a reference to the input value clamped to the …\nReturns the complex conjugate. i.e. <code>re - i im</code>\nConverts an object from one type to an equivalent or more …\nConverts an object from one type to an equivalent or more …\nUse with care! Same as <code>try_convert</code> but without any …\nUse with care! Same as <code>try_convert</code> but without any …\nCopies the sign of <code>sign</code> to <code>self</code>.\nComputes the cosine of <code>self</code>.\nCardinal cos\nComputes the hyperbolic cosine of <code>self</code>.\nThe distance between two points.\nThe squared distance between two points.\nConstruct a dynamic matrix directly from data.\nConstruct a dynamic column vector directly from data.\nComputes <code>e^(self)</code>, where <code>e</code> is the base of the natural …\nExtracts the i-th lane of <code>self</code>.\nExtracts the i-th lane of <code>self</code> without bound-checking.\nReturns the argument unchanged.\nBuilds a pure-real complex number from the given value.\nBuilds a pure-real complex number from the given value.\nParses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …\nParses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …\n[Reexported at the root of this crate.] Data structures …\nComputes (self.conjugate() * self + other.conjugate() * …\nReturns the imaginary unit.\nMerges the value of <code>if_value()</code> and <code>else_value()</code> depending …\nMerges the value of <code>if_value()</code> and <code>else_if.1()</code> and …\nMerges the value of <code>if_value()</code> and <code>else_if.1()</code> and …\nImaginary portion of the complex number\nThe imaginary part of this complex number.\nReturns the infimum of <code>a</code> and <code>b</code>.\nReturns simultaneously the infimum and supremum of <code>a</code> and <code>b</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>1/self</code>\nIndicates if <code>try_convert</code> will succeed without actually …\nChecks if the given complex number is finite\nChecks if the given complex number is infinite\nChecks if the given complex number is NaN\nChecks if the given complex number is normal\nIs the sign of this real number negative?\nIs the sign of this real number positive?\nReturns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …\nThe number of lanes of this SIMD value.\n[Reexported at the root of this crate.] Factorization of …\nComputes the principal value of natural logarithm of <code>self</code>.\nReturns the logarithm of <code>self</code> with respect to an arbitrary …\nApplies a function to each lane of <code>self</code>.\nConstruct a fixed-size matrix directly from data.\nSame as <code>cmp::max</code>.\nThe largest finite positive value representable using this …\nSame as <code>cmp::min</code>.\nThe smallest finite positive value representable using …\nThe modulus of this complex number.\nThe squared modulus of this complex number.\nCreate a new <code>Complex</code>\nAre all vector lanes false?\nThe sum of the absolute value of this complex number’s …\nReturns the square of the norm (since <code>T</code> doesn’t …\nGets the multiplicative identity element.\nLane-wise bitwise or of the vector elements.\nClamp <code>value</code> between <code>min</code> and <code>max</code>. Returns <code>None</code> if <code>value</code> is …\nCompare <code>a</code> and <code>b</code> using a partial ordering relation.\nReturns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a &gt;= b</code>.\nReturns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a &gt; b</code>.\nReturns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a &lt;= b</code>.\nReturns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a &lt; b</code>.\nReturn the maximum of <code>a</code> and <code>b</code> if they are comparable.\nReturn the minimum of <code>a</code> and <code>b</code> if they are comparable.\nSorts two values in increasing order using a partial …\nConstruct a fixed-size point directly from data.\nRaises <code>self</code> to a complex power.\nRaises <code>self</code> to a floating point power.\nRaises <code>self</code> to a signed integer power.\nRaises <code>self</code> to an unsigned integer power.\nReal portion of the complex number\nThe real part of this complex number.\nReplaces the i-th lane of <code>self</code> by <code>val</code>.\nReplaces the i-th lane of <code>self</code> by <code>val</code> without …\nMultiplies this complex number by <code>factor</code>.\nMultiplies <code>self</code> by the scalar <code>t</code>.\nMerges <code>self</code> and <code>other</code> depending on the lanes of <code>cond</code>.\nThe exponential part of this complex number: …\nThe absolute value of this complex number: …\nComputes the principal value of the inverse cosine of <code>self</code>.\nComputes the principal value of the inverse cosine of <code>self</code>.\nComputes the principal value of the inverse cosine of <code>self</code>.\nComputes the principal value of the inverse cosine of <code>self</code>.\nComputes the principal value of the inverse cosine of <code>self</code>.\nComputes the principal value of the inverse cosine of <code>self</code>.\nComputes the principal value of the inverse cosine of <code>self</code>.\nComputes the principal value of the inverse cosine of <code>self</code>.\nComputes the principal value of the inverse cosine of <code>self</code>.\nComputes the principal value of the inverse cosine of <code>self</code>.\nComputes the principal value of inverse hyperbolic cosine …\nComputes the principal value of inverse hyperbolic cosine …\nComputes the principal value of inverse hyperbolic cosine …\nComputes the principal value of inverse hyperbolic cosine …\nComputes the principal value of inverse hyperbolic cosine …\nComputes the principal value of inverse hyperbolic cosine …\nComputes the principal value of inverse hyperbolic cosine …\nComputes the principal value of inverse hyperbolic cosine …\nComputes the principal value of inverse hyperbolic cosine …\nComputes the principal value of inverse hyperbolic cosine …\nThe argument of this complex number.\nComputes the principal value of the inverse sine of <code>self</code>.\nComputes the principal value of the inverse sine of <code>self</code>.\nComputes the principal value of the inverse sine of <code>self</code>.\nComputes the principal value of the inverse sine of <code>self</code>.\nComputes the principal value of the inverse sine of <code>self</code>.\nComputes the principal value of the inverse sine of <code>self</code>.\nComputes the principal value of the inverse sine of <code>self</code>.\nComputes the principal value of the inverse sine of <code>self</code>.\nComputes the principal value of the inverse sine of <code>self</code>.\nComputes the principal value of the inverse sine of <code>self</code>.\nComputes the principal value of inverse hyperbolic sine of …\nComputes the principal value of inverse hyperbolic sine of …\nComputes the principal value of inverse hyperbolic sine of …\nComputes the principal value of inverse hyperbolic sine of …\nComputes the principal value of inverse hyperbolic sine of …\nComputes the principal value of inverse hyperbolic sine of …\nComputes the principal value of inverse hyperbolic sine of …\nComputes the principal value of inverse hyperbolic sine of …\nComputes the principal value of inverse hyperbolic sine of …\nComputes the principal value of inverse hyperbolic sine of …\nComputes the principal value of the inverse tangent of <code>self</code>…\nComputes the principal value of the inverse tangent of <code>self</code>…\nComputes the principal value of the inverse tangent of <code>self</code>…\nComputes the principal value of the inverse tangent of <code>self</code>…\nComputes the principal value of the inverse tangent of <code>self</code>…\nComputes the principal value of the inverse tangent of <code>self</code>…\nComputes the principal value of the inverse tangent of <code>self</code>…\nComputes the principal value of the inverse tangent of <code>self</code>…\nComputes the principal value of the inverse tangent of <code>self</code>…\nComputes the principal value of the inverse tangent of <code>self</code>…\nComputes the principal value of inverse hyperbolic tangent …\nComputes the principal value of inverse hyperbolic tangent …\nComputes the principal value of inverse hyperbolic tangent …\nComputes the principal value of inverse hyperbolic tangent …\nComputes the principal value of inverse hyperbolic tangent …\nComputes the principal value of inverse hyperbolic tangent …\nComputes the principal value of inverse hyperbolic tangent …\nComputes the principal value of inverse hyperbolic tangent …\nComputes the principal value of inverse hyperbolic tangent …\nComputes the principal value of inverse hyperbolic tangent …\nClamps each lane of <code>self</code> between the corresponding lane of …\nCopies the sign of <code>sign</code> to <code>self</code>.\nComputes the cosine of <code>self</code>.\nComputes the cosine of <code>self</code>.\nComputes the cosine of <code>self</code>.\nComputes the cosine of <code>self</code>.\nComputes the cosine of <code>self</code>.\nComputes the cosine of <code>self</code>.\nComputes the cosine of <code>self</code>.\nComputes the cosine of <code>self</code>.\nComputes the cosine of <code>self</code>.\nComputes the cosine of <code>self</code>.\nCardinal cos\nComputes the hyperbolic cosine of <code>self</code>.\nComputes the hyperbolic cosine of <code>self</code>.\nComputes the hyperbolic cosine of <code>self</code>.\nComputes the hyperbolic cosine of <code>self</code>.\nComputes the hyperbolic cosine of <code>self</code>.\nComputes the hyperbolic cosine of <code>self</code>.\nComputes the hyperbolic cosine of <code>self</code>.\nComputes the hyperbolic cosine of <code>self</code>.\nComputes the hyperbolic cosine of <code>self</code>.\nComputes the hyperbolic cosine of <code>self</code>.\nLanewise <em>equal</em> <code>==</code> comparison.\nComputes <code>e^(self)</code>, where <code>e</code> is the base of the natural …\nComputes <code>e^(self)</code>, where <code>e</code> is the base of the natural …\nComputes <code>e^(self)</code>, where <code>e</code> is the base of the natural …\nComputes <code>e^(self)</code>, where <code>e</code> is the base of the natural …\nComputes <code>e^(self)</code>, where <code>e</code> is the base of the natural …\nComputes <code>e^(self)</code>, where <code>e</code> is the base of the natural …\nComputes <code>e^(self)</code>, where <code>e</code> is the base of the natural …\nComputes <code>e^(self)</code>, where <code>e</code> is the base of the natural …\nComputes <code>e^(self)</code>, where <code>e</code> is the base of the natural …\nComputes <code>e^(self)</code>, where <code>e</code> is the base of the natural …\nLanewise <em>greater or equal</em> <code>&gt;=</code> comparison.\nLanewise <em>greater than</em> <code>&gt;</code> comparison.\nThe max value among all lanes of <code>self</code>.\nThe min value among all lanes of <code>self</code>.\nComputes the product of all the lanes of <code>self</code>.\nComputes the sum of all the lanes of <code>self</code>.\nComputes (self.conjugate() * self + other.conjugate() * …\nThe imaginary part of this complex number.\nLanewise <em>less or equal</em> <code>&lt;=</code> comparison.\nComputes the principal value of natural logarithm of <code>self</code>.\nComputes the principal value of natural logarithm of <code>self</code>.\nComputes the principal value of natural logarithm of <code>self</code>.\nComputes the principal value of natural logarithm of <code>self</code>.\nComputes the principal value of natural logarithm of <code>self</code>.\nComputes the principal value of natural logarithm of <code>self</code>.\nComputes the principal value of natural logarithm of <code>self</code>.\nComputes the principal value of natural logarithm of <code>self</code>.\nComputes the principal value of natural logarithm of <code>self</code>.\nComputes the principal value of natural logarithm of <code>self</code>.\nReturns the logarithm of <code>self</code> with respect to an arbitrary …\nReturns the logarithm of <code>self</code> with respect to an arbitrary …\nReturns the logarithm of <code>self</code> with respect to an arbitrary …\nReturns the logarithm of <code>self</code> with respect to an arbitrary …\nReturns the logarithm of <code>self</code> with respect to an arbitrary …\nReturns the logarithm of <code>self</code> with respect to an arbitrary …\nReturns the logarithm of <code>self</code> with respect to an arbitrary …\nReturns the logarithm of <code>self</code> with respect to an arbitrary …\nReturns the logarithm of <code>self</code> with respect to an arbitrary …\nReturns the logarithm of <code>self</code> with respect to an arbitrary …\nLanewise <em>less than</em> <code>&lt;</code> comparison.\nLanewise max value.\nLanewise min value.\nThe modulus of this complex number.\nThe squared modulus of this complex number.\nLanewise <em>not equal</em> <code>!=</code> comparison.\nThe sum of the absolute value of this complex number’s …\nRaises <code>self</code> to a complex power.\nRaises <code>self</code> to a complex power.\nRaises <code>self</code> to a complex power.\nRaises <code>self</code> to a complex power.\nRaises <code>self</code> to a complex power.\nRaises <code>self</code> to a complex power.\nRaises <code>self</code> to a complex power.\nRaises <code>self</code> to a complex power.\nRaises <code>self</code> to a complex power.\nRaises <code>self</code> to a complex power.\nRaises <code>self</code> to a floating point power.\nRaises <code>self</code> to a floating point power.\nRaises <code>self</code> to a floating point power.\nRaises <code>self</code> to a floating point power.\nRaises <code>self</code> to a floating point power.\nRaises <code>self</code> to a floating point power.\nRaises <code>self</code> to a floating point power.\nRaises <code>self</code> to a floating point power.\nRaises <code>self</code> to a floating point power.\nRaises <code>self</code> to a floating point power.\nThe real part of this complex number.\nMultiplies this complex number by <code>factor</code>.\nThe exponential part of this complex number: …\nComputes the sine of <code>self</code>.\nComputes the sine of <code>self</code>.\nComputes the sine of <code>self</code>.\nComputes the sine of <code>self</code>.\nComputes the sine of <code>self</code>.\nComputes the sine of <code>self</code>.\nComputes the sine of <code>self</code>.\nComputes the sine of <code>self</code>.\nComputes the sine of <code>self</code>.\nComputes the sine of <code>self</code>.\nCardinal sine\nComputes the hyperbolic sine of <code>self</code>.\nComputes the hyperbolic sine of <code>self</code>.\nComputes the hyperbolic sine of <code>self</code>.\nComputes the hyperbolic sine of <code>self</code>.\nComputes the hyperbolic sine of <code>self</code>.\nComputes the hyperbolic sine of <code>self</code>.\nComputes the hyperbolic sine of <code>self</code>.\nComputes the hyperbolic sine of <code>self</code>.\nComputes the hyperbolic sine of <code>self</code>.\nComputes the hyperbolic sine of <code>self</code>.\nComputes the principal value of the square root of <code>self</code>.\nComputes the principal value of the square root of <code>self</code>.\nComputes the principal value of the square root of <code>self</code>.\nComputes the principal value of the square root of <code>self</code>.\nComputes the principal value of the square root of <code>self</code>.\nComputes the principal value of the square root of <code>self</code>.\nComputes the principal value of the square root of <code>self</code>.\nComputes the principal value of the square root of <code>self</code>.\nComputes the principal value of the square root of <code>self</code>.\nComputes the principal value of the square root of <code>self</code>.\nComputes the tangent of <code>self</code>.\nComputes the tangent of <code>self</code>.\nComputes the tangent of <code>self</code>.\nComputes the tangent of <code>self</code>.\nComputes the tangent of <code>self</code>.\nComputes the tangent of <code>self</code>.\nComputes the tangent of <code>self</code>.\nComputes the tangent of <code>self</code>.\nComputes the tangent of <code>self</code>.\nComputes the tangent of <code>self</code>.\nComputes the hyperbolic tangent of <code>self</code>.\nComputes the hyperbolic tangent of <code>self</code>.\nComputes the hyperbolic tangent of <code>self</code>.\nComputes the hyperbolic tangent of <code>self</code>.\nComputes the hyperbolic tangent of <code>self</code>.\nComputes the hyperbolic tangent of <code>self</code>.\nComputes the hyperbolic tangent of <code>self</code>.\nComputes the hyperbolic tangent of <code>self</code>.\nComputes the hyperbolic tangent of <code>self</code>.\nComputes the hyperbolic tangent of <code>self</code>.\nThe exponential form of this complex number: (modulus, …\nThe polar form of this complex number: (modulus, arg)\nDivides this complex number by <code>factor</code>.\nComputes the sine of <code>self</code>.\nCardinal sine\nComputes the hyperbolic sine of <code>self</code>.\nInitializes an SIMD value with each lanes set to <code>val</code>.\nComputes the principal value of the square root of <code>self</code>.\nReturns the supremum of <code>a</code> and <code>b</code>.\nComputes the tangent of <code>self</code>.\nComputes the hyperbolic tangent of <code>self</code>.\nThe exponential form of this complex number: (modulus, …\nThe polar form of this complex number: (modulus, arg)\nAttempts to convert an object to a more specific one.\nAttempts to convert an object to a more specific one.\nDivides this complex number by <code>factor</code>.\nDivides <code>self</code> by the scalar <code>t</code>.\nConstruct a fixed-size column vector directly from data.\nWraps <code>val</code> into the range <code>[min, max]</code> using modular …\nLane-wise bitwise xor of the vector elements.\nGets the additive identity element.\nApplies a function to each lane of <code>self</code> paired with the …\nA array-based statically sized matrix data storage.\nA dynamically sized column-major matrix.\nA column-major matrix slice dynamic numbers of rows and …\nA column-major matrix slice dynamic numbers of rows and …\nA dynamically sized column vector.\nA column vector slice dynamic numbers of rows and columns.\nA column vector slice dynamic numbers of rows and columns.\nEuclidean norm.\nLp norm.\nThe most generic column-major matrix (and vector) type.\nA stack-allocated, column-major, 1x1 square matrix.\nA stack-allocated, column-major, 1x2 matrix.\nA stack-allocated, column-major, 1x3 matrix.\nA stack-allocated, column-major, 1x4 matrix.\nA stack-allocated, column-major, 1x5 matrix.\nA stack-allocated, column-major, 1x6 matrix.\nA heap-allocated, row-major, matrix with 1 rows and a …\nA stack-allocated, column-major, 2x2 square matrix.\nA stack-allocated, column-major, 2x1 matrix.\nA stack-allocated, column-major, 2x3 matrix.\nA stack-allocated, column-major, 2x4 matrix.\nA stack-allocated, column-major, 2x5 matrix.\nA stack-allocated, column-major, 2x6 matrix.\nA heap-allocated, row-major, matrix with 2 rows and a …\nA stack-allocated, column-major, 3x3 square matrix.\nA stack-allocated, column-major, 3x1 matrix.\nA stack-allocated, column-major, 3x2 matrix.\nA stack-allocated, column-major, 3x4 matrix.\nA stack-allocated, column-major, 3x5 matrix.\nA stack-allocated, column-major, 3x6 matrix.\nA heap-allocated, row-major, matrix with 3 rows and a …\nA stack-allocated, column-major, 4x4 square matrix.\nA stack-allocated, column-major, 4x1 matrix.\nA stack-allocated, column-major, 4x2 matrix.\nA stack-allocated, column-major, 4x3 matrix.\nA stack-allocated, column-major, 4x5 matrix.\nA stack-allocated, column-major, 4x6 matrix.\nA heap-allocated, row-major, matrix with 4 rows and a …\nA stack-allocated, column-major, 5x5 square matrix.\nA stack-allocated, column-major, 5x1 matrix.\nA stack-allocated, column-major, 5x2 matrix.\nA stack-allocated, column-major, 5x3 matrix.\nA stack-allocated, column-major, 5x4 matrix.\nA stack-allocated, column-major, 5x6 matrix.\nA heap-allocated, row-major, matrix with 5 rows and a …\nA stack-allocated, column-major, 6x6 square matrix.\nA stack-allocated, column-major, 6x1 matrix.\nA stack-allocated, column-major, 6x2 matrix.\nA stack-allocated, column-major, 6x3 matrix.\nA stack-allocated, column-major, 6x4 matrix.\nA stack-allocated, column-major, 6x5 matrix.\nA heap-allocated, row-major, matrix with 6 rows and a …\nThe type of the result of a matrix cross product.\nAn owned matrix column-major matrix with <code>R</code> rows and <code>C</code> …\nAn owned matrix column-major matrix with <code>D</code> columns.\nA matrix slice.\nA column-major 1x1 matrix slice.\nA column-major 1x2 matrix slice.\nA column-major 1x3 matrix slice.\nA column-major 1x4 matrix slice.\nA column-major 1x5 matrix slice.\nA column-major 1x6 matrix slice.\nA column-major matrix slice with 1 row and a number of …\nA column-major 2x2 matrix slice.\nA column-major 2x1 matrix slice.\nA column-major 2x3 matrix slice.\nA column-major 2x4 matrix slice.\nA column-major 2x5 matrix slice.\nA column-major 2x6 matrix slice.\nA column-major matrix slice with 2 rows and a number of …\nA column-major 3x3 matrix slice.\nA column-major 3x1 matrix slice.\nA column-major 3x2 matrix slice.\nA column-major 3x4 matrix slice.\nA column-major 3x5 matrix slice.\nA column-major 3x6 matrix slice.\nA column-major matrix slice with 3 rows and a number of …\nA column-major 4x4 matrix slice.\nA column-major 4x1 matrix slice.\nA column-major 4x2 matrix slice.\nA column-major 4x3 matrix slice.\nA column-major 4x5 matrix slice.\nA column-major 4x6 matrix slice.\nA column-major matrix slice with 4 rows and a number of …\nA column-major 5x5 matrix slice.\nA column-major 5x1 matrix slice.\nA column-major 5x2 matrix slice.\nA column-major 5x3 matrix slice.\nA column-major 5x4 matrix slice.\nA column-major 5x6 matrix slice.\nA column-major matrix slice with 5 rows and a number of …\nA column-major 6x6 matrix slice.\nA column-major 6x1 matrix slice.\nA column-major 6x2 matrix slice.\nA column-major 6x3 matrix slice.\nA column-major 6x4 matrix slice.\nA column-major 6x5 matrix slice.\nA column-major matrix slice with 6 rows and a number of …\nA mutable matrix slice.\nA column-major 1x1 matrix slice.\nA column-major 1x2 matrix slice.\nA column-major 1x3 matrix slice.\nA column-major 1x4 matrix slice.\nA column-major 1x5 matrix slice.\nA column-major 1x6 matrix slice.\nA column-major matrix slice with 1 row and a number of …\nA column-major 2x2 matrix slice.\nA column-major 2x1 matrix slice.\nA column-major 2x3 matrix slice.\nA column-major 2x4 matrix slice.\nA column-major 2x5 matrix slice.\nA column-major 2x6 matrix slice.\nA column-major matrix slice with 2 rows and a number of …\nA column-major 3x3 matrix slice.\nA column-major 3x1 matrix slice.\nA column-major 3x2 matrix slice.\nA column-major 3x4 matrix slice.\nA column-major 3x5 matrix slice.\nA column-major 3x6 matrix slice.\nA column-major matrix slice with 3 rows and a number of …\nA column-major 4x4 matrix slice.\nA column-major 4x1 matrix slice.\nA column-major 4x2 matrix slice.\nA column-major 4x3 matrix slice.\nA column-major 4x5 matrix slice.\nA column-major 4x6 matrix slice.\nA column-major matrix slice with 4 rows and a number of …\nA column-major 5x5 matrix slice.\nA column-major 5x1 matrix slice.\nA column-major 5x2 matrix slice.\nA column-major 5x3 matrix slice.\nA column-major 5x4 matrix slice.\nA column-major 5x6 matrix slice.\nA column-major matrix slice with 5 rows and a number of …\nA column-major 6x6 matrix slice.\nA column-major 6x1 matrix slice.\nA column-major 6x2 matrix slice.\nA column-major 6x3 matrix slice.\nA column-major 6x4 matrix slice.\nA column-major 6x5 matrix slice.\nA column-major matrix slice with 6 rows and a number of …\nA column-major matrix slice with <code>R</code> rows and <code>C</code> columns.\nA column-major matrix slice with <code>D</code> rows and columns.\nA column-major matrix slice with a number of rows chosen …\nA column-major matrix slice with a number of rows chosen …\nA column-major matrix slice with a number of rows chosen …\nA column-major matrix slice with a number of rows chosen …\nA column-major matrix slice with a number of rows chosen …\nA column-major matrix slice with a number of rows chosen …\nA column-major matrix slice with a number of rows chosen …\nA column-major matrix slice with a number of rows chosen …\nA column-major matrix slice with a number of rows chosen …\nA column-major matrix slice with a number of rows chosen …\nA column-major matrix slice with a number of rows chosen …\nA column-major matrix slice with a number of rows chosen …\nThe type of the result of a matrix sum.\nRenamed to <code>VecStorage</code>.\nA heap-allocated, column-major, matrix with a dynamic …\nA heap-allocated, column-major, matrix with a dynamic …\nA heap-allocated, column-major, matrix with a dynamic …\nA heap-allocated, column-major, matrix with a dynamic …\nA heap-allocated, column-major, matrix with a dynamic …\nA heap-allocated, column-major, matrix with a dynamic …\nA trait for abstract matrix norms.\nThe type of the norm.\nTrait implemented by entities scan be be normalized and …\nAn owned matrix column-major matrix with <code>R</code> rows and <code>C</code> …\nAn owned D-dimensional column vector.\nA dynamically sized row vector.\nAn owned D-dimensional row vector.\nA statically sized D-dimensional row vector.\nA matrix with one row and <code>D</code> columns .\nA stack-allocated, 1-dimensional row vector.\nA stack-allocated, 2-dimensional row vector.\nA stack-allocated, 3-dimensional row vector.\nA stack-allocated, 4-dimensional row vector.\nA stack-allocated, 5-dimensional row vector.\nA stack-allocated, 6-dimensional row vector.\nA statically sized column-major matrix with <code>R</code> rows and <code>C</code> …\nA column-major matrix slice with dimensions known at …\nA column-major matrix slice with dimensions known at …\nA statically sized D-dimensional column vector.\nA column vector slice with dimensions known at …\nA column vector slice with dimensions known at …\nThe basic scalar type for all structures of <code>nalgebra</code>.\nType of the range size. May be a type-level integer.\nA range with a size that may be known at compile-time.\nA matrix data storage for a matrix slice. Only contains an …\nA mutable matrix data storage for mutable matrix slice. …\nA square matrix.\nL-infinite norm aka. Chebytchev norm aka. uniform norm …\nAn owned matrix with uninitialized data.\nAn owned matrix with uninitialized data.\nA wrapper that ensures the underlying algebraic entity has …\nA stack-allocated, 1-dimensional unit vector.\nA stack-allocated, 2-dimensional unit vector.\nA stack-allocated, 3-dimensional unit vector.\nA stack-allocated, 4-dimensional unit vector.\nA stack-allocated, 5-dimensional unit vector.\nA stack-allocated, 6-dimensional unit vector.\nA Vec-based matrix data storage. It may be …\nA matrix with one column and <code>D</code> rows.\nA stack-allocated, 1-dimensional column vector.\nA stack-allocated, 2-dimensional column vector.\nA stack-allocated, 3-dimensional column vector.\nA stack-allocated, 4-dimensional column vector.\nA stack-allocated, 5-dimensional column vector.\nA stack-allocated, 6-dimensional column vector.\nAn owned matrix column-major matrix with <code>R</code> rows and <code>C</code> …\nA column vector slice with dimensions known at …\nA 1D column vector slice.\nA 2D column vector slice.\nA 3D column vector slice.\nA 4D column vector slice.\nA 5D column vector slice.\nA 6D column vector slice.\nA column vector slice with dimensions known at …\nA 1D column vector slice.\nA 2D column vector slice.\nA 3D column vector slice.\nA 4D column vector slice.\nA 5D column vector slice.\nA 6D column vector slice.\nThe type of the result of a matrix sum.\nThe column vector with a 1 as its fifth component, and …\nThe column vector with a 1 as its fifth component, and …\nThe unit column vector with a 1 as its fifth component, …\nThe unit column vector with a 1 as its fifth component, …\nComputes the component-wise absolute value.\nEquivalent to <code>self.adjoint() * rhs</code>.\nEquivalent to <code>self.adjoint() * rhs</code> but stores the result …\nComputes the solution of the linear system …\nComputes the solution of the linear system …\nSolves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …\nSolves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …\nComputes the solution of the linear system …\nComputes the solution of the linear system …\nSolves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …\nSolves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …\nComputes the solution of the linear system …\nComputes the solution of the linear system …\nSolves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …\nSolves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …\nComputes the solution of the linear system …\nComputes the solution of the linear system …\nSolves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …\nSolves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …\nAdds a scalar to <code>self</code>.\nAdds a scalar to <code>self</code> in-place.\nEquivalent to <code>self + rhs</code> but stores the result into <code>out</code> to …\nThe adjoint (aka. conjugate-transpose) of <code>self</code>.\nSets <code>self</code> to its adjoint (aka. conjugate-transpose).\nTakes the adjoint (aka. conjugate-transpose) of <code>self</code> and …\nAbstract definition of a matrix data storage allocator.\nReturns the absolute value of the component with the …\nReturns the absolute value of the component with the …\nThe smallest angle between two vectors.\nThe rotation angle in <code>]-pi; pi]</code> of this unit complex …\nThe rotation angle in [0; pi] of this unit quaternion.\nThe rotation angle needed to make <code>self</code> and <code>other</code> coincide.\nThe rotation angle needed to make <code>self</code> and <code>other</code> coincide.\nAppends to <code>self</code> a rotation given in the axis-angle form, …\nComputes the transformation equal to <code>self</code> followed by a …\nComputes the transformation equal to <code>self</code> followed by a …\nComputes in-place the transformation equal to <code>self</code> …\nComputes in-place the transformation equal to <code>self</code> …\nComputes the transformation equal to <code>self</code> followed by an …\nComputes the transformation equal to <code>self</code> followed by an …\nComputes in-place the transformation equal to <code>self</code> …\nComputes in-place the transformation equal to <code>self</code> …\nComputes the transformation equal to <code>self</code> followed by a …\nComputes the transformation equal to <code>self</code> followed by a …\nComputes the transformation equal to <code>self</code> followed by a …\nComputes the transformation equal to <code>self</code> followed by a …\nApplies a closure <code>f</code> to modify each component of <code>self</code>.\nReturns <code>self</code> with each of its components replaced by the …\nUses the metric induced by the given <code>norm</code> to compute the …\nUses the given <code>norm</code> to compute the norm of <code>self</code>.\nComputes the index and value of the vector component with …\nComputes the index and value of the vector component with …\nComputes the index and value of the vector component with …\nComputes the index and value of the vector component with …\nReturns a mutable pointer to the start of the matrix.\nConverts this array storage to a mutable slice.\nExtracts a mutable slice containing the entire matrix …\nA mutable slice containing all the components stored in …\nReturns a mutable reference to the underlying value. This …\nReturns a pointer to the start of the matrix.\nConverts this array storage to a slice.\nExtracts a slice containing the entire matrix entries …\nA slice containing all the components stored in this …\nThe underlying data storage.\nThe underlying mutable data storage.\nAssumes a matrix’s entries to be initialized. This …\nAssumes a matrix’s entries to be initialized. This …\nComputes <code>self = a * x * c + b * self</code>.\nComputes <code>self = a * x * c + b * self</code>.\nThe rotation axis of this unit quaternion or <code>None</code> if the …\nThe rotation axis and angle in ]0, pi] of this complex …\nThe rotation axis and angle in ]0, pi] of this unit …\nComputes <code>self = a * x + b * self</code>.\nComputes <code>self = a * x + b * self</code>.\nThe column vector with a 1 as its sixth component, and …\nThe column vector with a 1 as its sixth component, and …\nThe unit column vector with a 1 as its sixth component, …\nThe unit column vector with a 1 as its sixth component, …\nThe start index of the range.\nComputes the bidiagonalization using householder …\nReturns the the 1-norm of the complex component with the …\nReturns the the 1-norm of the complex component with the …\nReturns a new vector with the same magnitude as <code>self</code> …\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nComputes componentwise …\nAttempts to compute the Cholesky decomposition of this …\nClones this matrix to one that owns its data.\nClones this matrix into one that owns its data. The actual …\nComputes componentwise …\nComputes the QR decomposition (with column pivoting) of …\nReturns a slice containing the i-th column of this matrix.\nIterate through the columns of this matrix.\nMutably iterates through this matrix columns.\nThe mean of all the columns of this matrix.\nReturns a slice containing the i-th column of this matrix.\nReturns a slice containing the <code>n</code> first elements of the …\nReturns a slice containing the <code>n</code> first elements of the …\nThe product of all the columns of this matrix.\nThe sum of all the columns of this matrix.\nThe variance of all the columns of this matrix.\nExtracts from this matrix a set of consecutive columns.\nExtracts from this matrix <code>ncols</code> columns. The number of …\nExtracts from this matrix <code>ncols</code> columns. The number of …\nExtracts from this matrix <code>ncols</code> columns skipping <code>step</code> …\nExtracts from this matrix <code>ncols</code> columns skipping <code>step</code> …\nExtracts from this matrix a set of consecutive columns.\nSlice containing all the columns indexed by the range <code>rows</code>.\nSlice containing all the columns indexed by the range <code>cols</code>.\nSplits this <code>NxM</code> matrix into two parts delimited by two …\nSplits this <code>NxM</code> matrix into two parts delimited by two …\nExtracts from this matrix a set of consecutive columns …\nExtracts from this matrix a set of consecutive columns …\nThe underlying complex number.\nComputes the eigenvalues of this matrix.\nComputes the eigenvalues of this matrix.\nComponentwise matrix or vector division.\nInplace componentwise matrix or vector division.\nInplace componentwise matrix or vector division.\nComponentwise matrix or vector multiplication.\nInplace componentwise matrix or vector multiplication.\nInplace componentwise matrix or vector multiplication.\nReturns a column vector resulting from the folding of <code>f</code> on …\nReturns a row vector where each element is the result of …\nReturns a column vector where each element is the result …\nThe conjugate of <code>self</code>.\nCompute the conjugate of this unit quaternion.\nCompute the conjugate of this unit complex number.\nCompute the conjugate of this unit quaternion.\nThe conjugate of the complex matrix <code>self</code> computed in-place.\nCompute the conjugate of this unit quaternion in-place.\nCompute the conjugate of this unit quaternion in-place.\nCompute in-place the conjugate of this unit complex number.\nSets <code>self</code> to its adjoint.\nThe conjugate transposition of <code>self</code>.\nTakes the conjugate and transposes <code>self</code> and store the …\nCompatibility constraints between matrix shapes, e.g., for …\nReturns the convolution of the target vector and a kernel.\nReturns the convolution of the target vector and a kernel.\nReturns the convolution of the target vector and a kernel.\nReturns the convolution of the target vector and a kernel.\nReturns the convolution of the target vector and a kernel.\nReturns the convolution of the target vector and a kernel.\nStructures to which matrices and vector can be …\nFills this matrix with the content of another one. Both …\nFills this matrix with the content of a slice. Both must …\nThe cosine of the rotation angle.\nThe 3D cross product between two vectors.\nComputes the matrix <code>M</code> such that for all vector <code>v</code> we have …\nComputes the matrix <code>M</code> such that for all vector <code>v</code> we have …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe default matrix data storage allocator.\nComputes the matrix determinant.\nComputes the matrix determinant.\nThe diagonal of this matrix.\nThe diagonal of this matrix.\nTraits and tags for identifying the dimension of all …\nThe dot product between two vectors or matrices (seen as …\nThe conjugate-linear dot product between two vectors or …\nThe underlying dual quaternion.\nComputes the eigenvalues of this matrix.\nComputes the eigenvalues of this matrix.\nThe index immediately after the last index inside of the …\nTests whether <code>self</code> and <code>rhs</code> are exactly equal.\nRetrieves the euler angles corresponding to this unit …\nComputes exponential of this matrix\nComputes exponential of this matrix\nCompute the exponential of a quaternion.\nExtend the number of rows of a <code>Vector</code> with elements from …\nExtends the number of columns of a <code>Matrix</code> with <code>Vector</code>s …\nExtend the number of columns of the <code>Matrix</code> with elements …\nExtends the number of columns of the <code>VecStorage</code> with …\nExtends the number of columns of the <code>VecStorage</code> with …\nExtends the number of columns of the <code>VecStorage</code> with …\nExtends the number of rows of the <code>VecStorage</code> with elements …\nCreates an isometry that corresponds to the local frame of …\nCreates an isometry that corresponds to the local frame of …\nCreates an unit quaternion that corresponds to the local …\nSets all the elements of this matrix to <code>val</code>.\nSets all the elements of the selected column to <code>val</code>.\nSets all the diagonal elements of this matrix to <code>val</code>.\nSets all the elements of the lower-triangular part of this …\nCopies the upper-triangle of this matrix to its …\nSets all the elements of the selected row to <code>val</code>.\nSets all the elements of the lower-triangular part of this …\nCopies the upper-triangle of this matrix to its …\nSets all the elements of this matrix to the value returned …\nFills <code>self</code> with the identity matrix.\nExtracts a compile-time number of consecutive columns from …\nExtracts a compile-time number of consecutive columns from …\nExtracts from this matrix a compile-time number of columns …\nExtracts from this matrix a compile-time number of columns …\nResizes this matrix so that it contains <code>R2::value()</code> rows …\nExtracts a compile-time number of consecutive rows from …\nExtracts a compile-time number of consecutive rows from …\nExtracts from this matrix a compile-time number of rows …\nExtracts from this matrix a compile-time number of rows …\nSlices this matrix starting at its component <code>(irow, icol)</code> …\nSlices this matrix starting at its component <code>(irow, icol)</code> …\nSlices this matrix starting at its component …\nSlices this matrix starting at its component …\nFolds a function <code>f</code> on each entry of <code>self</code>.\nSimilar to <code>self.iter().fold(init, f)</code> except that <code>init</code> is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuilds the unit complex number corresponding to the …\nCreates a new statically-allocated matrix from the given …\nCreates a new statically-allocated matrix from the given …\nBuilds a 3D homogeneous rotation matrix from an axis and a …\nBuilds a 3D homogeneous rotation matrix from an axis and a …\nCreates a new quaternion from a unit vector (the rotation …\nBuilds a rotation from a basis assumed to be orthonormal.\nBuilds an unit quaternion from a basis assumed to be …\nCreates a matrix with its elements filled with the …\nCreates a matrix with its elements filled with the …\nCreates a matrix with its elements filled with the …\nCreates a matrix with its elements filled with the …\nCreates a matrix with its elements filled with the …\nCreates a matrix with its elements filled with the …\nCreates a matrix with its elements filled with the …\nCreates a matrix with its elements filled with the …\nCreates a matrix with its elements filled with the …\nCreates a matrix with its elements filled with the …\nBuilds a new matrix from its columns.\nBuilds a new matrix from its columns.\nCreates a new unit complex number from a complex number.\nCreates a new unit complex number from a complex number.\nBuilds the unit complex number from the sinus and cosinus …\nCreates a new matrix with the given data.\nCreates a new matrix with the given data without …\nCreates a square matrix with its diagonal set to <code>diag</code> and …\nCreates a square matrix with its diagonal set to <code>diag</code> and …\nCreates a matrix filled with its diagonal filled with <code>elt</code> …\nCreates a matrix filled with its diagonal filled with <code>elt</code> …\nCreates a matrix filled with its diagonal filled with <code>elt</code> …\nCreates a matrix filled with its diagonal filled with <code>elt</code> …\nCreates a matrix filled with its diagonal filled with <code>elt</code> …\nCreates a matrix filled with its diagonal filled with <code>elt</code> …\nCreates a matrix filled with its diagonal filled with <code>elt</code> …\nCreates a matrix filled with its diagonal filled with <code>elt</code> …\nCreates a new matrix with its diagonal filled with copies …\nCreates a new matrix with its diagonal filled with copies …\nCreates a matrix or vector with all its elements set to …\nCreates a matrix or vector with all its elements set to …\nCreates a matrix or vector with all its elements set to …\nCreates a matrix or vector with all its elements set to …\nCreates a matrix or vector with all its elements set to …\nCreates a matrix or vector with all its elements set to …\nCreates a matrix or vector with all its elements set to …\nCreates a matrix or vector with all its elements set to …\nCreates a matrix with all its elements set to <code>elem</code>.\nCreates a matrix with all its elements set to <code>elem</code>.\nCreates a new rotation from Euler angles.\nCreates a new rotation from Euler angles.\nCreates a new unit quaternion from Euler angles.\nCreates a matrix or vector filled with the results of a …\nCreates a matrix or vector filled with the results of a …\nCreates a matrix or vector filled with the results of a …\nCreates a matrix or vector filled with the results of a …\nCreates a matrix or vector filled with the results of a …\nCreates a matrix or vector filled with the results of a …\nCreates a matrix or vector filled with the results of a …\nCreates a matrix or vector filled with the results of a …\nCreates a matrix filled with the results of a function …\nCreates a matrix filled with the results of a function …\nConstructs a vector from coordinates in projective space, …\nConstructs a vector from coordinates in projective space, …\nReturn a unit dual quaternion representing the translation …\nCreates a matrix or vector with all its elements filled by …\nCreates a matrix or vector with all its elements filled by …\nCreates a matrix or vector with all its elements filled by …\nCreates a matrix or vector with all its elements filled by …\nCreates a matrix or vector with all its elements filled by …\nCreates a matrix or vector with all its elements filled by …\nCreates a matrix or vector with all its elements filled by …\nCreates a matrix or vector with all its elements filled by …\nCreates a matrix with all its elements filled by an …\nCreates a matrix with all its elements filled by an …\nBuilds an unit complex by extracting the rotation part of …\nBuilds an unit quaternion by extracting the rotation part …\nBuilds an unit complex by extracting the rotation part of …\nBuilds an unit quaternion by extracting the rotation part …\nCreates a new matrix that may be rectangular. The first …\nCreates a new matrix that may be rectangular. The first …\nCreates a new matrix that may be rectangular. The first …\nCreates a new matrix that may be rectangular. The first …\nCreates a new matrix that may be rectangular. The first …\nCreates a new matrix that may be rectangular. The first …\nCreates a new matrix that may be rectangular. The first …\nCreates a new matrix that may be rectangular. The first …\nCreates a new matrix that may be rectangular. The first …\nCreates a new matrix that may be rectangular. The first …\nReturn a dual quaternion representing the translation and …\nCreates a new unit quaternion from a quaternion.\nCreate a new matrix slice without bound checking and from …\nCreate a new matrix slice without bound checking and from …\nWraps the given reference, assuming it is already …\nCreates a dual quaternion from a unit quaternion rotation.\nBuilds the unit complex number from the corresponding 2D …\nBuilds an unit quaternion from a rotation matrix.\nCreates a matrix with its elements filled with the …\nCreates a matrix with its elements filled with the …\nCreates a matrix with its elements filled with the …\nCreates a matrix with its elements filled with the …\nCreates a matrix with its elements filled with the …\nCreates a matrix with its elements filled with the …\nCreates a matrix with its elements filled with the …\nCreates a matrix with its elements filled with the …\nCreates a matrix with its elements filled with the …\nCreates a matrix with its elements filled with the …\nBuilds a new matrix from its rows.\nBuilds a new matrix from its rows.\nBuilds a 3D homogeneous rotation matrix from an axis and …\nBuilds a 3D homogeneous rotation matrix from an axis and …\nBuilds a unit complex rotation from an angle in radian …\nCreates a new unit quaternion rotation from a rotation …\nCreates a new unit quaternion rotation from a rotation …\nCreates a new mutable matrix slice from the given data …\nCreates a new mutable matrix slice from the given data …\nCreates a new mutable matrix slice from the given data …\nCreates a new mutable matrix slice from the given data …\nCreates a new matrix slice from the given data array.\nCreates a new matrix slice from the given data array.\nCreates a new matrix slice from the given data array.\nCreates a new matrix slice from the given data array.\nCreates a new mutable matrix slice from the given data …\nCreates a new matrix slice from the given data array.\nCreates a new matrix slice from the given data array.\nCreates a new mutable matrix slice from the given data …\nCreates a new matrix slice from the given data array.\nCreates a new mutable matrix slice from the given data …\nCreates a new mutable matrix slice from the given data …\nCreates a new matrix slice from the given data array.\nCreates a mutable matrix slice from an array and with …\nCreates a matrix slice from an array and with dimensions …\nCreates a matrix slice from an array and with dimensions …\nCreates a mutable matrix slice from an array and with …\nCreates, without bound-checking, a mutable matrix slice …\nCreates, without bound-checking, a matrix slice from an …\nCreates, without bound-checking, a mutable matrix slice …\nCreates, without bound-checking, a matrix slice from an …\nCreates, without bound checking, a new mutable matrix …\nCreates, without bound checking, a new mutable matrix …\nCreates, without bound checking, a new mutable matrix …\nCreates, without bound checking, a new mutable matrix …\nCreates, without bound checking, a new matrix slice from …\nCreates, without bound checking, a new matrix slice from …\nCreates, without bound checking, a new matrix slice from …\nCreates, without bound checking, a new matrix slice from …\nCreates, without bound checking, a new matrix slice from …\nCreates, without bound checking, a new mutable matrix …\nCreates, without bound checking, a new mutable matrix …\nCreates, without bound checking, a new matrix slice from …\nCreates, without bound checking, a new mutable matrix …\nCreates, without bound checking, a new matrix slice from …\nCreates, without bound checking, a new mutable matrix …\nCreates, without bound checking, a new matrix slice from …\nCreates a new matrix slice with the specified strides from …\nCreates a new matrix slice with the specified strides from …\nCreates a new matrix slice with the specified strides from …\nCreates a new matrix slice with the specified strides from …\nCreates a new matrix slice with the specified strides from …\nCreates a new matrix slice with the specified strides from …\nCreates a new matrix slice with the specified strides from …\nCreates a new matrix slice with the specified strides from …\nCreates a mutable matrix slice from an array and with …\nCreates a matrix slice from an array and with dimensions …\nCreates a matrix slice from an array and with dimensions …\nCreates a mutable matrix slice from an array and with …\nCreates, without bound-checking, a mutable matrix slice …\nCreates, without bound-checking, a matrix slice from an …\nCreates, without bound-checking, a matrix slice from an …\nCreates, without bound-checking, a mutable matrix slice …\nCreates a new mutable matrix slice with the specified …\nCreates a new mutable matrix slice with the specified …\nCreates a new mutable matrix slice with the specified …\nCreates a new mutable matrix slice with the specified …\nCreates a new mutable matrix slice with the specified …\nCreates a new mutable matrix slice with the specified …\nCreates a new mutable matrix slice with the specified …\nCreates a new mutable matrix slice with the specified …\nCreates, without bound checking, a new mutable matrix …\nCreates, without bound checking, a new mutable matrix …\nCreates, without bound checking, a new mutable matrix …\nCreates, without bound checking, a new mutable matrix …\nCreates, without bound checking, a new matrix slice with …\nCreates, without bound checking, a new matrix slice with …\nCreates, without bound checking, a new matrix slice with …\nCreates, without bound checking, a new matrix slice with …\nCreates, without bound checking, a new mutable matrix …\nCreates, without bound checking, a new matrix slice with …\nCreates, without bound checking, a new matrix slice with …\nCreates, without bound checking, a new mutable matrix …\nCreates, without bound checking, a new mutable matrix …\nCreates, without bound checking, a new matrix slice with …\nCreates, without bound checking, a new mutable matrix …\nCreates, without bound checking, a new matrix slice with …\nCreates a matrix backed by a given <code>Vec</code>.\nCreates a matrix backed by a given <code>Vec</code>.\nCreates a matrix backed by a given <code>Vec</code>.\nCreates a matrix backed by a given <code>Vec</code>.\nCreates a matrix backed by a given <code>Vec</code>.\nCreates a matrix backed by a given <code>Vec</code>.\nCreates a matrix backed by a given <code>Vec</code>.\nCreates a matrix backed by a given <code>Vec</code>.\nCreates a matrix backed by a given <code>Vec</code>.\nCreates a matrix backed by a given <code>Vec</code>.\nCreates a new heap-allocated matrix from the given …\nCreates a new heap-allocated matrix from the given …\nCreates a new heap-allocated matrix from the given …\nCreates a new heap-allocated matrix from the given …\nCreates a new heap-allocated matrix from the given …\nCreates a new heap-allocated matrix from the given …\nComputes the LU decomposition with full pivoting of <code>matrix</code>.\nComputes <code>self = alpha * a * b + beta * self</code>, where …\nComputes <code>self = alpha * a.adjoint() * b + beta * self</code>, …\nComputes <code>self = alpha * a.transpose() * b + beta * self</code>, …\nComputes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a …\nComputes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a …\nComputes <code>self = alpha * a.adjoint() * x + beta * self</code>, …\nComputes <code>self = alpha * a.adjoint() * x + beta * self</code>, …\nComputes <code>self = alpha * a.transpose() * x + beta * self</code>, …\nComputes <code>self = alpha * a.transpose() * x + beta * self</code>, …\nCreates a slice that may or may not have a fixed size and …\nCreates a slice that may or may not have a fixed size and …\nCreates a slice that may or may not have a fixed size and …\nCreates a slice that may or may not have a fixed size and …\nComputes <code>self = alpha * x * y.transpose() + beta * self</code>.\nComputes <code>self = alpha * x * y.transpose() + beta * self</code>, …\nComputes <code>self = alpha * x * y.adjoint() + beta * self</code>.\nProduces a view of the data at the given index, or <code>None</code> if …\nProduces a mutable view of the data at the given index, or …\nProduces a view of the data at the given index, without …\nReturns a mutable view of the data at the given index, …\nComputes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is an …\nComputes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is an …\nComputes <code>self = alpha * x * y.adjoint() + beta * self</code>, …\nThe hermitian part of <code>self</code>, i.e., …\nThe hermitian part of <code>self</code>, i.e., …\nComputes the Hessenberg decomposition of this matrix using …\nComputes the index of the vector component with the …\nComputes the index of the vector component with the …\nComputes the index of the matrix component with the …\nComputes the index of the vector component with the …\nComputes the index of the vector component with the …\nComputes the index of the vector component with the …\nComputes the index of the vector component with the …\nComputes the index of the matrix component with the …\nCreates an identity matrix. If the matrix is not square, …\nCreates an identity matrix. If the matrix is not square, …\nCreates an identity matrix. If the matrix is not square, …\nCreates an identity matrix. If the matrix is not square, …\nCreates an identity matrix. If the matrix is not square, …\nCreates an identity matrix. If the matrix is not square, …\nCreates an identity matrix. If the matrix is not square, …\nCreates an identity matrix. If the matrix is not square, …\nThe rotation identity.\nThe unit complex number multiplicative identity.\nThe unit dual quaternion multiplicative identity, which …\nCreates a new identity matrix.\nCreates a new identity matrix.\nComputes the index of the vector component with the …\nComputes the index of the vector component with the …\nComputes the index of the vector component with the …\nComputes the index of the vector component with the …\nProduces a view of the data at the given index, or panics …\nProduces a mutable view of the data at the given index, or …\nIndexing\nComputes the infimum (aka. componentwise min) of two …\nComputes the (infimum, supremum) of two matrices/vectors.\nInserts a column filled with <code>val</code> at the <code>i-th</code> position.\nInserts <code>n</code> columns filled with <code>val</code> starting at the <code>i-th</code> …\nInserts <code>ninsert.value()</code> columns starting at the <code>i-th</code> place …\nInserts <code>D</code> columns filled with <code>val</code> starting at the <code>i-th</code> …\nInserts <code>D::dim()</code> rows filled with <code>val</code> starting at the <code>i-th</code> …\nInserts a row filled with <code>val</code> at the <code>i-th</code> position.\nInserts <code>n</code> rows filled with <code>val</code> starting at the <code>i-th</code> …\nInserts <code>ninsert.value()</code> rows at the <code>i-th</code> place of this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieves the underlying value.\nMoves this matrix into one that owns its data.\nMoves this matrix into one that owns its data. The actual …\nExtracts the original slice from this storage\nExtracts the original slice from this storage\nExtracts the original slice from this storage\nInverts this complex number if it is not zero.\nInverts this dual quaternion if it is not zero.\nInverts this quaternion if it is not zero.\nInverts this quaternion if it is not zero.\nInverts in-place this unit complex number.\nInverts this dual quaternion in place if it is not zero.\nRotate and translate a point by the inverse of this unit …\nRotate the given point by the inverse of this unit complex …\nRotate a point by the inverse of this unit quaternion. …\nRotate a unit vector by the inverse of this unit …\nRotate a vector by the inverse of this unit quaternion. …\nRotate the given vector by the inverse of this unit …\nRotate the given vector by the inverse of this unit …\nRotate a vector by the inverse of this unit quaternion, …\nRotate a vector by the inverse of this unit quaternion. …\nReturns true if the matrix contains no elements.\nReturns true if the underlying vector contains no elements.\nIndicated if this is the identity matrix within a relative …\nReturns <code>true</code> if this matrix is invertible.\nReturns <code>true</code> if this matrix is invertible.\nChecks that <code>Mᵀ × M = Id</code>.\nChecks that this matrix is orthogonal and has a …\nChecks that this matrix is orthogonal and has a …\nIndicates if this is a square matrix.\nThe unit dual quaternion needed to make <code>self</code> and <code>other</code> …\nMatrix iterators.\nIterates through this matrix coordinates in column-major …\nMutably iterates through this matrix coordinates.\nThe column vector with <code>val</code> as its i-th component.\nThe column vector with <code>val</code> as its i-th component.\nThe column unit vector with <code>T::one()</code> as its i-th component.\nThe column unit vector with <code>T::one()</code> as its i-th component.\nThe kronecker product of two matrices (aka. tensor product …\nThe total number of elements of this matrix.\nThe number of elements on the underlying vector.\nReturns <code>self * (1.0 - t) + rhs * t</code>, i.e., the linear blend …\nReturns <code>self * (1.0 - t) + rhs * t</code>, i.e., the linear blend …\nLinear interpolation between two unit dual quaternions.\nLinear interpolation between two unit quaternions.\nCompute the natural logarithm of a quaternion.\nBuilds a left-handed look-at view matrix.\nBuilds a left-handed look-at view matrix.\nBuilds a left-handed look-at view matrix without …\nBuilds a right-handed look-at view matrix.\nBuilds a right-handed look-at view matrix.\nBuilds a right-handed look-at view matrix without …\nExtracts the lower triangular part of this matrix …\nThe Lp norm of this matrix.\nComputes the LU decomposition with partial (row) pivoting …\nA synonym for the norm of this matrix.\nA synonym for the squared norm of this matrix.\nReturns a matrix containing the result of <code>f</code> applied to …\nApply the given function to this matrix’s diagonal and …\nApply the given function to this matrix’s diagonal and …\nReturns a matrix containing the result of <code>f</code> applied to …\nReturns the component with the largest value.\nThe mean of all the elements of this matrix.\nCreate the mean unit quaternion from a data structure …\nUse the metric induced by this norm to compute the metric …\nCompute the distance between <code>self</code> and <code>rhs</code> using the metric …\nReturns the component with the smallest value.\nEquivalent to <code>self * rhs</code> but stores the result into <code>out</code> to …\nThe number of columns of this matrix.\nNegates <code>self</code> in-place.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nInitializes this matrix from its components.\nCreates a new unit quaternion rotation from a rotation …\nBuilds the unit complex number corresponding to the …\nCreates a new dynamic matrix data storage from the given …\nNormalize the given vector and return it wrapped on a <code>Unit</code> …\nCreates a new unit quaternion rotation from a rotation …\nCreates a new homogeneous matrix that applies a distinct …\nCreates a new homogeneous matrix that applies a distinct …\nCreates a new homogeneous matrix that applies a scaling …\nCreates a new homogeneous matrix that applies a scaling …\nCreates a new homogeneous matrix that applies a scaling …\nCreates a new homogeneous matrix that applies a scaling …\nNormalize the given vector and return it wrapped on a <code>Unit</code> …\nDeprecated: Use <code>Matrix4::face_towards</code> instead.\nDeprecated: Use <code>Matrix4::face_towards</code> instead.\nDeprecated: Use <code>UnitQuaternion::face_towards</code> instead.\nCreates a new homogeneous matrix for an orthographic …\nCreates a new homogeneous matrix for an orthographic …\nCreates a new homogeneous matrix for a perspective …\nCreates a new homogeneous matrix for a perspective …\nBuilds a 2 dimensional homogeneous rotation matrix from an …\nBuilds a 3D homogeneous rotation matrix from an axis and …\nBuilds a 3D homogeneous rotation matrix from an axis and …\nBuilds a 2 dimensional homogeneous rotation matrix from an …\nBuilds a 3D homogeneous rotation matrix from an axis and …\nBuilds a 3D homogeneous rotation matrix from an axis and …\nCreates a new homogeneous matrix that applies the same …\nCreates a new homogeneous matrix that applies the same …\nCreates a new homogeneous matrix that applies a pure …\nCreates a new homogeneous matrix that applies a pure …\nCreate a new matrix slice without bound checking.\nCreate a new matrix slice without bound checking.\nWraps the given value, assuming it is already normalized.\nCreate a new matrix slice without bound checking.\nCreate a new matrix slice without bound checking.\nNormalized linear interpolation between two unit …\nNormalized linear interpolation between two unit …\nApply this norm to the given matrix.\nComputes the norm.\nThe L2 norm of this matrix.\nComputes the squared norm.\nThe squared L2 norm of this vector.\nReturns a normalized version of this matrix.\nNormalizes this matrix in-place and returns its norm.\nThe number of rows of this matrix.\nApplies the given closure to each element of the …\nApplies the given closure to each element of the …\nOrthonormalizes the given family of vectors. The largest …\nOrthonormalizes the given family of vectors. The largest …\nThe perpendicular product between two 2D column vectors, …\nComputes the Polar Decomposition of  a <code>matrix</code> (indirectly …\nRaise this matrix to an integral power <code>exp</code>.\nRaises this matrix to an integral power <code>exp</code> in-place.\nRaise this unit complex number to a given floating power.\nRaise the quaternion to a given floating power.\nComputes the transformation equal to a non-uniform scaling …\nComputes the transformation equal to a non-uniform scaling …\nComputes in-place the transformation equal to a …\nComputes in-place the transformation equal to a …\nComputes the transformation equal to an uniform scaling …\nComputes the transformation equal to an uniform scaling …\nComputes in-place the transformation equal to an uniform …\nComputes in-place the transformation equal to an uniform …\nComputes the transformation equal to a translation …\nComputes the transformation equal to a translation …\nComputes the transformation equal to a translation …\nComputes the transformation equal to a translation …\nThe product of all the elements of this matrix.\nComputes the pseudo-inverse of this matrix.\nConstructs a new vector of higher dimension by appending …\nConstructs a new vector of higher dimension by appending …\nComputes the QR decomposition of this matrix.\nComputes the quadratic form …\nComputes the quadratic form …\nComputes the quadratic form …\nComputes the quadratic form …\nComputes the quadratic form …\nComputes the quadratic form …\nComputes the quadratic form …\nComputes the quadratic form …\nThe underlying quaternion.\nComputes the rank of this matrix.\nTests whether <code>self</code> and <code>rhs</code> are equal up to a given epsilon.\nRemoves the <code>i</code>-th column from this matrix.\nRemoves <code>n</code> consecutive columns from this matrix, starting …\nRemoves all columns in <code>indices</code>\nRemoves <code>nremove.value()</code> columns from this matrix, starting …\nRemoves <code>D::dim()</code> consecutive columns from this matrix, …\nRemoves <code>D::dim()</code> consecutive rows from this matrix, …\nRemoves the <code>i</code>-th row from this matrix.\nRemoves <code>n</code> consecutive rows from this matrix, starting with …\nRemoves all rows in <code>indices</code>\nRemoves <code>nremove.value()</code> rows from this matrix, starting …\nNormalizes this vector again. This is useful when repeated …\nNormalizes this vector again using a first-order Taylor …\nCreates a matrix or vector with all its elements set to …\nCreates a matrix or vector with all its elements set to …\nCreates a matrix or vector with all its elements set to …\nCreates a matrix or vector with all its elements set to …\nCreates a matrix or vector with all its elements set to …\nCreates a matrix or vector with all its elements set to …\nCreates a matrix or vector with all its elements set to …\nCreates a matrix or vector with all its elements set to …\nCreates a matrix with all its elements set to <code>elem</code>.\nCreates a matrix with all its elements set to <code>elem</code>.\nReshapes <code>self</code> such that it has dimensions …\nResizes this matrix so that it contains <code>new_nrows</code> rows and …\nResizes the underlying mutable data storage and unwraps it.\nResizes <code>self</code> such that it has dimensions …\nResizes this matrix horizontally, i.e., so that it …\nChanges the number of column of this matrix in-place.\nChanges the number of column of this matrix in-place.\nResizes this matrix in-place.\nResizes this matrix in-place.\nResizes this matrix vertically, i.e., so that it contains …\nChanges the number of rows of this matrix in-place.\nChanges the number of rows of this matrix in-place.\nReturn the rotation part of this unit dual quaternion.\nThe unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …\nThe unit complex needed to make <code>a</code> and <code>b</code> be collinear and …\nThe unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …\nThe unit complex needed to make <code>a</code> and <code>b</code> be collinear and …\nThe unit quaternion needed to make <code>self</code> and <code>other</code> coincide.\nThe unit complex number needed to make <code>self</code> and <code>other</code> …\nReturns a slice containing the i-th row of this matrix.\nIterate through the rows of this matrix.\nMutably iterates through this matrix rows.\nThe mean of all the rows of this matrix.\nThe mean of all the rows of this matrix. The result is …\nReturns a slice containing the i-th row of this matrix.\nReturns a slice containing the <code>n</code> first elements of the …\nReturns a slice containing the <code>n</code> first elements of the …\nThe product of all the rows of this matrix.\nThe product of all the rows of this matrix. The result is …\nThe sum of all the rows of this matrix.\nThe sum of all the rows of this matrix. The result is …\nThe variance of all the rows of this matrix.\nThe variance of all the rows of this matrix. The result is …\nExtracts from this matrix a set of consecutive rows.\nExtracts from this matrix <code>nrows</code> rows regularly skipping …\nExtracts from this matrix <code>nrows</code> rows regularly skipping …\nExtracts from this matrix <code>nrows</code> rows regularly skipping …\nExtracts from this matrix <code>nrows</code> rows regularly skipping …\nExtracts from this matrix a set of consecutive rows.\nSlice containing all the rows indexed by the range <code>rows</code>.\nSlice containing all the rows indexed by the range <code>rows</code>.\nSplits this <code>NxM</code> matrix into two parts delimited by two …\nSplits this <code>NxM</code> matrix into two parts delimited by two …\nExtracts from this matrix a set of consecutive rows …\nExtracts from this matrix a set of consecutive rows …\nMultiplies each component of the complex matrix <code>self</code> by …\nMultiply <code>self</code> by n.\nMultiplies each component of the complex matrix <code>self</code> by …\nThe rotation axis of this unit quaternion multiplied by …\nThe rotation angle returned as a 1-dimensional vector.\nThe smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …\nThe smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …\nThe smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …\nThe smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …\nComputes the Schur decomposition of a square matrix.\nScrew linear interpolation between two unit quaternions. …\nCreates a new matrix by extracting the given set of …\nCreates a new matrix by extracting the given set of rows …\nFills the selected column of this matrix with the content …\nFills the diagonal of this matrix with the content of the …\nSets the magnitude of this vector.\nFills the diagonal of this matrix with the content of the …\nFills the selected row of this matrix with the content of …\nThe shape of this matrix returned as the tuple (number of …\nThe shape of this matrix wrapped into their representative …\nReturns a new vector with the same magnitude as <code>self</code> …\nAttempts to normalize <code>self</code>.\nNormalizes this matrix in-place and return its norm.\nThe sine of the rotation angle.\nComputes the singular values of this matrix. The singular …\nComputes the singular values of this matrix. The singular …\nThe number of elements of the range, i.e., …\nComputes the spherical linear interpolation between two …\nComputes the spherical linear interpolation between two …\nComputes the spherical linear interpolation between two …\nSpherical linear interpolation between two unit …\nSpherical linear interpolation between two rotations …\nSlices this matrix starting at its component <code>(irow, icol)</code> …\nSlices this matrix starting at its component <code>(irow, icol)</code> …\nSlices a sub-matrix containing the rows indexed by the …\nSlices a mutable sub-matrix containing the rows indexed by …\nSlices this matrix starting at its component …\nSlices this matrix starting at its component …\nComputes the solution of the linear system <code>self . x = b</code> …\nComputes the solution of the linear system <code>self . x = b</code> …\nSolves the linear system <code>self . x = b</code> where <code>x</code> is the …\nSolves the linear system <code>self . x = b</code> where <code>x</code> is the …\nComputes the solution of the linear system <code>self . x = b</code> …\nComputes the solution of the linear system <code>self . x = b</code> …\nSolves the linear system <code>self . x = b</code> where <code>x</code> is the …\nSolves the linear system <code>self . x = b</code> where <code>x</code> is the …\nSolves the linear system <code>self . x = b</code> where <code>x</code> is the …\nSolves the linear system <code>self . x = b</code> where <code>x</code> is the …\nSolves the linear system <code>self . x = b</code> where <code>x</code> is the …\nSolves the linear system <code>self . x = b</code> where <code>x</code> is the …\nComputes the solution of the linear system <code>self . x = b</code> …\nComputes the solution of the linear system <code>self . x = b</code> …\nSolves the linear system <code>self . x = b</code> where <code>x</code> is the …\nSolves the linear system <code>self . x = b</code> where <code>x</code> is the …\nComputes the solution of the linear system <code>self . x = b</code> …\nComputes the solution of the linear system <code>self . x = b</code> …\nSolves the linear system <code>self . x = b</code> where <code>x</code> is the …\nSolves the linear system <code>self . x = b</code> where <code>x</code> is the …\nAbstract definition of a matrix data storage.\nThe strides (row stride, column stride) of this matrix.\nEquivalent to <code>self + rhs</code> but stores the result into <code>out</code> to …\nExample\nExample\nThe sum of all the elements of this matrix.\nComputes the supremum (aka. componentwise max) of two …\nComputes the Singular Value Decomposition using implicit …\nComputes the Singular Value Decomposition using implicit …\nSwaps two entries.\nSwaps two columns in-place.\nSwaps two rows in-place.\nSwaps two entries without bound-checking.\nComputes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a …\nComputes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a …\nComputes <code>self = alpha * x * y.transpose() + beta * self</code>, …\nComputes the eigendecomposition of this symmetric matrix.\nComputes the eigenvalues of this symmetric matrix.\nComputes the eigenvalues of this symmetric matrix.\nThe symmetric part of <code>self</code>, i.e., …\nThe symmetric part of <code>self</code>, i.e., …\nComputes the tridiagonalization of this symmetric matrix.\nConverts this unit quaternion into its equivalent Euler …\nComputes the coordinates in projective space of this …\nComputes the coordinates in projective space of this …\nYields the homogeneous matrix for this matrix, i.e., …\nConverts this unit complex number into its equivalent …\nConverts this unit dual quaternion interpreted as an …\nConverts this unit quaternion into its equivalent …\nBuilds an isometry from this unit dual quaternion.\nBuilds the rotation matrix corresponding to this unit …\nBuilds a rotation matrix from this unit quaternion.\nFills this matrix with the content of the transpose …\nThe dot product between the transpose of <code>self</code> and <code>rhs</code>.\nEquivalent to <code>self.transpose() * rhs</code>.\nEquivalent to <code>self.transpose() * rhs</code> but stores the result …\nComputes the solution of the linear system …\nComputes the solution of the linear system …\nSolves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …\nSolves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …\nComputes the solution of the linear system …\nComputes the solution of the linear system …\nSolves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …\nSolves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …\nComputes the solution of the linear system …\nComputes the solution of the linear system …\nSolves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …\nSolves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …\nComputes the solution of the linear system …\nComputes the solution of the linear system …\nSolves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …\nSolves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …\nComputes a trace of a square matrix, i.e., the sum of its …\nComputes a trace of a square matrix, i.e., the sum of its …\nTransforms the given point, assuming the matrix <code>self</code> uses …\nTransforms the given point, assuming the matrix <code>self</code> uses …\nTransforms the given point, assuming the matrix <code>self</code> uses …\nTransforms the given point, assuming the matrix <code>self</code> uses …\nRotate and translate a point by this unit dual quaternion …\nRotate the given point by this unit complex number.\nRotate a point by this unit quaternion.\nTransforms the given vector, assuming the matrix <code>self</code> uses …\nTransforms the given vector, assuming the matrix <code>self</code> uses …\nRotate the given vector by this unit complex number.\nRotate a vector by this unit dual quaternion, ignoring the …\nRotate a vector by this unit quaternion.\nReturn the translation part of this unit dual quaternion.\nTransposes <code>self</code>.\nTransposes the square matrix <code>self</code> in-place.\nTransposes <code>self</code> and store the result into <code>out</code>.\nAttempts to invert this matrix.\nAttempts to invert this matrix.\nAttempts to invert this matrix in-place. Returns <code>false</code> and …\nAttempts to invert this matrix in-place. Returns <code>false</code> and …\nAttempts to normalize the given vector and return it …\nNormalize the given vector and return it wrapped on a <code>Unit</code> …\nReturns a normalized version of this matrix unless its …\nNormalizes this matrix in-place or does nothing if its …\nAttempts to compute the Polar Decomposition of  a <code>matrix</code> …\nAttempts to compute the Schur decomposition of a square …\nComputes the screw-linear interpolation between two unit …\nSets the magnitude of this vector unless it is smaller …\nComputes the spherical linear interpolation between two …\nComputes the spherical linear interpolation between two …\nAttempts to compute the Singular Value Decomposition of …\nAttempts to compute the Singular Value Decomposition of …\nComputes the eigendecomposition of the given symmetric …\nAttempts to compute the UDU decomposition of this matrix.\nMechanisms for working with values that may not be …\nBuilds a matrix with uninitialized elements of type …\nBuilds a matrix with uninitialized elements of type …\nDivides each component of the complex matrix <code>self</code> by the …\nDivides <code>self</code> by n.\nDivides each component of the complex matrix <code>self</code> by the …\nRetrieves the underlying value. Deprecated: use …\nExtracts the upper triangular part of this matrix …\nThe variance of all the elements of this matrix.\nComputes the row and column coordinates of the i-th …\nGets a reference to the i-th element of this column vector …\nGets a reference to the i-th element of this column vector …\nGets a mutable reference to the i-th element of this …\nGets a mutable reference to the i-th element of this …\nThe column vector with a 1 as its fourth component, and …\nThe column vector with a 1 as its fourth component, and …\nThe unit column vector with a 1 as its fourth component, …\nThe unit column vector with a 1 as its fourth component, …\nThe column vector with a 1 as its first component, and …\nThe column vector with a 1 as its first component, and …\nThe unit column vector with a 1 as its first component, …\nThe unit column vector with a 1 as its first component, …\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nThe column vector with a 1 as its second component, and …\nThe column vector with a 1 as its second component, and …\nThe unit column vector with a 1 as its second component, …\nThe unit column vector with a 1 as its second component, …\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nThe column vector with a 1 as its third component, and …\nThe column vector with a 1 as its third component, and …\nThe unit column vector with a 1 as its third component, …\nThe unit column vector with a 1 as its third component, …\nCreates a matrix or vector with all its elements set to <code>0</code>.\nCreates a matrix or vector with all its elements set to <code>0</code>.\nCreates a matrix or vector with all its elements set to <code>0</code>.\nCreates a matrix or vector with all its elements set to <code>0</code>.\nCreates a matrix or vector with all its elements set to <code>0</code>.\nCreates a matrix or vector with all its elements set to <code>0</code>.\nCreates a matrix or vector with all its elements set to <code>0</code>.\nCreates a matrix or vector with all its elements set to <code>0</code>.\nCreates a matrix with all its elements set to 0.\nCreates a matrix with all its elements set to 0.\nReplaces each component of <code>self</code> by the result of a closure …\nFolds a function <code>f</code> on each pairs of entries from <code>self</code> and …\nReturns a matrix containing the result of <code>f</code> applied to …\nReplaces each component of <code>self</code> by the result of a closure …\nReturns a matrix containing the result of <code>f</code> applied to …\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nBuilds a new vector from components of <code>self</code>.\nA matrix allocator of a memory buffer that may contain …\nThe type of buffer this allocator can instanciate.\nThe type of buffer with uninitialized components this …\nA matrix reallocator. Changes the size of the memory …\nRestricts the given number of rows and columns to be …\nThe number of columns of the result of a componentwise …\nThe number of rows of the result of a componentwise …\nRestricts the given number of rows to be equal.\nAllocates a buffer initialized with the content of the …\nAllocates a buffer with the given number of rows and …\nAssumes a data buffer to be initialized.\nReallocates a buffer of shape <code>(RTo, CTo)</code>, possibly reusing …\nConstraints <code>C1</code> and <code>R2</code> to be equivalent.\nConstraints <code>D1</code> and <code>D2</code> to be equivalent.\nThis is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …\nThis is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …\nThis is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …\nThis is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …\nConstraints D1 and D2 to be equivalent, where they both …\nConstraints <code>D1</code> and <code>D2</code> to be equivalent. They are both …\nConstraints <code>D1</code> and <code>D2</code> to be equivalent. They are both …\nA type used in <code>where</code> clauses for enforcing constraints.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nData structure used to provide access to matrix and vector …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn allocator based on <code>GenericArray</code> and <code>VecStorage</code> for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait implemented by any type that can be used as a …\nTrait implemented exclusively by type-level integers.\nDim of dynamically-sized algebraic entities.\nTrait implemented by <code>Dynamic</code>.\nTrait implemented by <code>Dynamic</code> and type-level integers …\nThe value of this dimension.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuilds an instance of <code>Self</code> from a run-time value. Panics …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of this dimension, i.e., the singleton <code>Self</code>.\nA dynamic size equal to <code>value</code>.\nGets the compile-time value of <code>Self</code>. Returns <code>None</code> if it is …\nGets the run-time value of <code>self</code>. For type-level integers, …\nA helper trait used for indexing operations.\nA helper trait used for indexing operations.\nThe output type returned by methods.\nThe output type returned by methods.\nAn iterator through the columns of a matrix.\nAn iterator through the mutable columns of a matrix.\nAn iterator through a dense matrix with arbitrary strides …\nAn iterator through a dense matrix with arbitrary strides …\nAn iterator through the rows of a matrix.\nAn iterator through the mutable rows of a matrix.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new iterator for the given matrix storage.\nCreates a new iterator for the given matrix storage.\nThe column-stride of the owned data storage for a buffer …\nThe static stride of this storage’s columns.\nMarker trait indicating that a storage is stored …\nThe reshaped storage type.\nThe owned data storage that can be allocated from <code>S</code>.\nThe owned data storage that can be allocated from <code>S</code>.\nThe row-stride of the owned data storage for a buffer of …\nThe static stride of this storage’s rows.\nThe trait shared by all matrix data storage.\nTrait implemented by matrix data storage that can provide …\nA matrix storage that can be reshaped in-place.\nThe data storage for the sum of two matrices with …\nTrait shared by all matrix data storage that don’t …\nTrait shared by all mutable matrix data storage that …\nRetrieves the mutable data buffer as a contiguous slice.\nRetrieves the data buffer as a contiguous slice.\nClones this data storage to one that does not contain any …\nGets the address of the i-th matrix component without …\nGets the address of the i-th matrix component without …\nGets the mutable address of the i-th matrix component …\nGets the mutable address of the i-th matrix component …\nRetrieves a reference to the i-th element without …\nRetrieves a reference to the i-th element without …\nRetrieves a mutable reference to the i-th element without …\nRetrieves a mutable reference to the element at …\nBuilds a matrix data storage that does not contain any …\nIndicates whether this data buffer stores its elements …\nCompute the index corresponding to the irow-th row and …\nThe matrix data pointer.\nThe matrix mutable data pointer.\nReshapes the storage into the output storage type.\nThe dimension of the matrix at run-time. Arr length of …\nThe spacing between consecutive row elements and …\nSwaps two elements without bound-checking.\nSwaps two elements using their linear index without …\nA type implementing <code>InitStatus</code> indicating that the value …\nThis trait is used to write code that may work on matrices …\nA type implementing <code>InitStatus</code> indicating that the value …\nThe type of the values with the initialization status …\nRetrieve a mutable reference to the element, assuming that …\nRetrieve a reference to the element, assuming that it is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize the given element.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrait implemented by rotations that can be used inside of …\nA 2D affine transformation. Stored as a homogeneous 3x3 …\nA 3D affine transformation. Stored as a homogeneous 4x4 …\nA dual quaternion.\nA direct isometry, i.e., a rotation followed by a …\nA 2-dimensional direct isometry using a unit complex …\nA 3-dimensional direct isometry using a unit quaternion …\nA 2-dimensional direct isometry using a rotation matrix …\nA 3-dimensional direct isometry using a rotation matrix …\nA point in an euclidean space.\nA 3D orthographic projection stored as a homogeneous 4x4 …\nA 3D perspective projection stored as a homogeneous 4x4 …\nA point with <code>D</code> elements.\nA statically sized 1-dimensional column point.\nA statically sized 2-dimensional column point.\nA statically sized 3-dimensional column point.\nA statically sized 4-dimensional column point.\nA statically sized 5-dimensional column point.\nA statically sized 6-dimensional column point.\nAn invertible 2D general transformation. Stored as a …\nAn invertible 3D general transformation. Stored as a …\nA quaternion. See the type alias …\nA reflection wrt. a plane.\nA 1-dimensional reflection.\nA 2-dimensional reflection.\nA 3-dimensional reflection.\nA 4-dimensional reflection.\nA 5-dimensional reflection.\nA 6-dimensional reflection.\nThe transform category that results from the …\nA rotation matrix.\nA 2-dimensional rotation matrix.\nA 3-dimensional rotation matrix.\nA scale which supports non-uniform scaling.\nA 1-dimensional scale.\nA 2-dimensional scale.\nA 3-dimensional scale.\nA 4-dimensional scale.\nA 5-dimensional scale.\nA 6-dimensional scale.\nA similarity, i.e., an uniform scaling, followed by a …\nA 2-dimensional similarity.\nA 3-dimensional similarity.\nA 2-dimensional similarity using a rotation matrix for its …\nA 3-dimensional similarity using a rotation matrix for its …\nIndicates that <code>Self</code> is a more specific <code>Transform</code> category …\nIndicates that <code>Self</code> is a more general <code>Transform</code> category …\nTag representing an affine <code>Transform</code>. Its bottom-row is …\nTrait implemented by phantom types identifying the …\nTraits that gives the <code>Transform</code> category that is …\nTag representing the most general (not necessarily …\nTag representing the most general inversible <code>Transform</code> …\nA transformation matrix in homogeneous coordinates.\nA 2D general transformation that may not be invertible. …\nA 3D general transformation that may not be inversible. …\nA translation.\nA 1-dimensional translation.\nA 2-dimensional translation.\nA 3-dimensional translation.\nA 4-dimensional translation.\nA 5-dimensional translation.\nA 6-dimensional translation.\nA 2D rotation represented as a complex number with …\nA unit dual quaternion. May be used to represent a …\nA unit quaternions. May be used to represent a rotation.\nCalculates the quaternionic arccosinus.\nCalculates the hyperbolic quaternionic arccosinus.\nThe rotation angle.\nThe rotation angle in [0; pi].\nThe rotation angle in [0; pi] of this unit quaternion.\nThe rotation angle in <code>]-pi; pi]</code> of this unit complex …\nThe rotation angle in [0; pi].\nThe rotation angle.\nThe rotation angle needed to make <code>self</code> and <code>other</code> coincide.\nThe rotation angle needed to make <code>self</code> and <code>other</code> coincide.\nThe rotation angle needed to make <code>self</code> and <code>other</code> coincide.\nThe rotation angle needed to make <code>self</code> and <code>other</code> coincide.\nThe rotation angle needed to make <code>self</code> and <code>other</code> coincide.\nThe rotation angle needed to make <code>self</code> and <code>other</code> coincide.\nAppends to <code>self</code> a rotation given in the axis-angle form, …\nAppends to <code>self</code> the given rotation in-place.\nAppends to <code>self</code> the given rotation in-place.\nAppends in-place to <code>self</code> a rotation centered at the point …\nAppends in-place to <code>self</code> a rotation centered at the point …\nAppends in-place to <code>self</code> a rotation centered at the point <code>p</code>…\nAppends in-place to <code>self</code> a rotation centered at the point <code>p</code>…\nThe similarity transformation that applies a scaling …\nSets <code>self</code> to the similarity transformation that applies a …\nAppends to <code>self</code> the given translation in-place.\nAppends to <code>self</code> the given translation in-place.\nReplaces each component of <code>self</code> by the result of a closure …\nA reference to the underlying homogeneous transformation …\nA reference to the underlying homogeneous transformation …\nA reference to this transformation seen as a <code>Projective3</code>.\nA reference to this transformation seen as a <code>Projective3</code>.\nReinterprets this quaternion as a 4D vector.\nTransforms this quaternion into its 4D vector form (Vector …\nCalculates the quaternionic arcsinus.\nCalculates the hyperbolic quaternionic arcsinus.\nGets the <code>width / height</code> aspect ratio of the view frustum.\nCalculates the quaternionic arctangent.\nCalculates the hyperbolic quaternionic arctangent.\nThe rotation axis. Returns <code>None</code> if the rotation angle is …\nThe rotation axis of this unit quaternion or <code>None</code> if the …\nThe reflection axis.\nThe rotation axis. Returns <code>None</code> if the rotation angle is …\nThe rotation axis and angle in ]0, pi] of this rotation …\nThe rotation axis and angle in ]0, pi] of this unit …\nThe rotation axis and angle in ]0, pi] of this complex …\nThe rotation axis and angle in ]0, pi] of this rotation …\nThe reflection bias.\nThe bottom offset of the view cuboid.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nCast the components of <code>self</code> to another type.\nChecks that the given matrix is a valid homogeneous …\nClones this transform into one that owns its data.\nClones this unit quaternion into one that owns its data.\nThe underlying complex number.\nCompute the conjugate of this unit quaternion.\nCompute the conjugate of this unit quaternion.\nCompute the conjugate of this unit complex number.\nThe conjugate of this quaternion.\nThe conjugate of this dual quaternion, containing the …\nCompute the conjugate of this unit quaternion in-place.\nCompute the conjugate of this unit quaternion in-place.\nCompute in-place the conjugate of this unit complex number.\nReplaces this quaternion by its conjugate.\nReplaces this quaternion by its conjugate.\nThe coordinates of this point, i.e., the shift from the …\nThe coordinates of this point, i.e., the shift from the …\nThe coordinates of this point, i.e., the shift from the …\nThe coordinates of this point, i.e., the shift from the …\nThe coordinates of this point, i.e., the shift from the …\nThe coordinates of this point, i.e., the shift from the …\nThe coordinates of this point, i.e., the shift from the …\nThe coordinates of this point, i.e., the shift from the …\nThis quaternion as a 4D vector of coordinates in the …\nCalculates the quaternionic cosinus.\nThe cosine of the rotation angle.\nCalculates the hyperbolic quaternionic cosinus.\nThe dot product of two quaternions.\nThe dual component of the quaternion\nThe underlying dual quaternion.\nEuler angles corresponding to this rotation from a …\nRetrieves the euler angles corresponding to this unit …\nEuler angles corresponding to this rotation from a …\nCompute the exponential of a quaternion.\nCompute the exponential of a quaternion.\nCompute the exponential of a quaternion. Returns the …\nCreates a rotation that corresponds to the local frame of …\nCreates an unit quaternion that corresponds to the local …\nCreates an isometry that corresponds to the local frame of …\nCreates an isometry that corresponds to the local frame of …\nCreates a rotation that corresponds to the local frame of …\nCreates an isometry that corresponds to the local frame of …\nCreates an isometry that corresponds to the local frame of …\nCreates an similarity that corresponds to a scaling factor …\nCreates an similarity that corresponds to a scaling factor …\nGets the y field of view of the view frustum.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuilds the unit complex number corresponding to the …\nBuilds a 3D rotation matrix from an axis and a rotation …\nCreates a new quaternion from a unit vector (the rotation …\nBuilds a 3D rotation matrix from an axis and a rotation …\nBuilds a rotation from a basis assumed to be orthonormal.\nBuilds a rotation from a basis assumed to be orthonormal.\nBuilds an unit quaternion from a basis assumed to be …\nBuilds a rotation from a basis assumed to be orthonormal.\nBuilds a rotation from a basis assumed to be orthonormal.\nBuilds a rotation from a basis assumed to be orthonormal.\nCreates a new unit complex number from a complex number.\nCreates a new unit complex number from a complex number.\nCreates a new point with the given coordinates.\nBuilds the unit complex number from the sinus and cosinus …\nCreates a new rotation from Euler angles.\nCreates a new unit quaternion from Euler angles.\nCreates a new rotation from Euler angles.\nCreates a new orthographic projection matrix from an …\nCreates a new point from its homogeneous vector …\nConstructs a pure quaternion.\nReturn a unit dual quaternion representing the translation …\nCreates a new similarity from its rotational and …\nBuilds a rotation matrix by extracting the rotation part …\nBuilds a rotation matrix by extracting the rotation part …\nBuilds an unit quaternion by extracting the rotation part …\nBuilds an unit complex by extracting the rotation part of …\nBuilds a rotation matrix by extracting the rotation part …\nBuilds a rotation matrix by extracting the rotation part …\nBuilds a rotation matrix by extracting the rotation part …\nBuilds a rotation matrix by extracting the rotation part …\nBuilds an unit quaternion by extracting the rotation part …\nBuilds an unit complex by extracting the rotation part of …\nBuilds a rotation matrix by extracting the rotation part …\nBuilds a rotation matrix by extracting the rotation part …\nCreates a new transformation from the given homogeneous …\nCreates a new rotation from the given square matrix.\nWraps the given matrix to interpret it as a 3D …\nWraps the given matrix to interpret it as a 3D perspective …\nReturn a dual quaternion representing the translation and …\nCreates a new quaternion from its scalar and vector parts. …\nCreates a new isometry from its rotational and …\nCreates a new similarity from its rotational and …\nCreates a new quaternion from its polar decomposition.\nCreates a new unit quaternion from a quaternion.\nConstructs a real quaternion.\nCreates a dual quaternion from only its real part, with no …\nCreates a dual quaternion from its rotation and …\nCreates a dual quaternion from a unit quaternion rotation.\nBuilds an unit quaternion from a rotation matrix.\nBuilds the unit complex number from the corresponding 2D …\nBuilds a 2 dimensional rotation matrix from an angle in …\nBuilds a 3D rotation matrix from an axis scaled by the …\nCreates a new unit quaternion rotation from a rotation …\nBuilds a unit complex rotation from an angle in radian …\nBuilds a 3D rotation matrix from an axis scaled by the …\nBuilds a 2 dimensional rotation matrix from an angle in …\nCreates a new unit quaternion rotation from a rotation …\nCreates a new similarity that applies only a scaling …\nCreates a new point from a slice.\nCreates a quaternion from a 4D vector. The quaternion …\nCreates a new translation from the given vector.\nGets a reference to i-th element of this point without …\nGets a mutable reference to i-th element of this point …\nDivides quaternion into two.\nIndicates whether a <code>Transform</code> with the category <code>Self</code> has a …\nIndicates whether a <code>Transform</code> with the category <code>Self</code> has a …\nThe rotation identity.\nThe rotation identity.\nThe unit dual quaternion multiplicative identity, which …\nThe unit complex number multiplicative identity.\nCreates a new identity transform.\nCreates a new square identity rotation of the given …\nThe quaternion multiplicative identity.\nThe dual quaternion multiplicative identity.\nCreates a new identity translation.\nCreates a new identity scale.\nCreates a new identity isometry.\nCreates a new identity similarity.\nThe imaginary part of this quaternion.\nComputes the infimum (aka. componentwise min) of two …\nComputes the (infimum, supremum) of two points.\nCalculates the inner product (also known as the dot …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieves the underlying matrix.\nUnwraps the underlying matrix.\nRetrieves the underlying homogeneous matrix.\nRetrieves the underlying homogeneous matrix.\nMoves this unit quaternion into one that owns its data.\nComputes <code>self.inverse() * rhs</code> in a more efficient way.\nThe rotation inverse.\nInverts this quaternion if it is not zero.\nInverts this dual quaternion if it is not zero.\nInverts this complex number if it is not zero.\nInverts this transformation. Use <code>.try_inverse</code> if this …\nInverts <code>self</code>.\nInverts <code>self</code>.\nInverts <code>self</code>.\nInverts <code>self</code>.\nRetrieves the inverse of the underlying homogeneous matrix.\nRetrieves the inverse of the underlying homogeneous matrix.\nChange <code>self</code> to its inverse.\nInverts this quaternion if it is not zero.\nInverts this dual quaternion in place if it is not zero.\nInverts in-place this unit complex number.\nInverts this transformation in-place. Use <code>.try_inverse_mut</code> …\nInverts <code>self</code> in-place.\nInverts <code>self</code> in-place.\nInverts <code>self</code> in-place.\nInverts <code>self</code> in-place.\nApply the inverse rotation to the given point.\nRotate a point by the inverse of this unit quaternion. …\nRotate and translate a point by the inverse of this unit …\nRotate the given point by the inverse of this unit complex …\nTransform the given point by the inverse of this …\nRotate the given point by the inverse of this rotation. …\nTranslate the given point by the inverse of this …\nTransform the given point by the inverse of this isometry. …\nTransform the given point by the inverse of this …\nApply the inverse rotation to the given unit vector.\nApply the inverse rotation to the given unit vector.\nRotate a vector by the inverse of this unit quaternion. …\nRotate a unit vector by the inverse of this unit …\nRotate the given vector by the inverse of this unit …\nRotate the given vector by the inverse of this rotation. …\nTransform the given unit vector by the inverse of this …\nApply the inverse rotation to the given vector.\nRotate a vector by the inverse of this unit quaternion. …\nRotate a vector by the inverse of this unit quaternion, …\nRotate the given vector by the inverse of this unit …\nTransform the given vector by the inverse of this …\nRotate the given vector by the inverse of this rotation. …\nTransform the given vector by the inverse of this …\nTransform the given vector by the inverse of this …\nInverts <code>self</code>.\nReturns true if the point contains no elements.\nCheck if the quaternion is pure.\nThe part of this similarity that does not include the …\nThe part of this similarity that does not include the …\nThe part of this similarity that does not include the …\nThe part of this similarity that does not include the …\nThe part of this similarity that does not include the …\nThe unit dual quaternion needed to make <code>self</code> and <code>other</code> …\nIterates through this point coordinates.\nMutably iterates through this point coordinates.\nThe left offset of the view cuboid.\nLeft quaternionic division.\nThe dimension of this point.\nLinear interpolation between two unit quaternions.\nLinear interpolation between two unit dual quaternions.\nLinear interpolation between two quaternion.\nLinear interpolation between two dual quaternions.\nInterpolates between two isometries using a linear …\nInterpolates between two isometries using a linear …\nInterpolates between two isometries using a linear …\nInterpolates between two isometries using a linear …\nInterpolates between two isometries using a linear …\nInterpolates between two isometries using a linear …\nInterpolates between two isometries using a linear …\nInterpolates between two isometries using a linear …\nCompute the natural logarithm of a quaternion.\nCompute the natural logarithm of a quaternion.\nBuilds a left-handed look-at view matrix without …\nBuilds a left-handed look-at view matrix without …\nBuilds a left-handed look-at view matrix.\nBuilds a left-handed look-at view matrix.\nBuilds a left-handed look-at view matrix without …\nBuilds a left-handed look-at view matrix.\nBuilds a left-handed look-at view matrix.\nBuilds a left-handed look-at view matrix including a …\nBuilds a left-handed look-at view matrix including a …")