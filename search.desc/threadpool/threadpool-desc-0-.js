searchState.loadedDescShard("threadpool", 0, "A thread pool used to execute functions in parallel.\n<code>ThreadPool</code> factory, which can be used in order to …\nAbstraction of a thread pool for basic parallelism.\nReturns the number of currently active threads.\nFinalize the <code>Builder</code> and build the <code>ThreadPool</code>.\nCloning a pool will create a new handle to the pool. The …\nCheck if you are working with the same pool\nExecutes the function <code>job</code> on a thread in the pool.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBlock the current thread until all jobs in the pool have …\nReturns the maximum number of threads the pool will …\nCreates a new thread pool capable of executing <code>num_threads</code> …\nInitiate a new <code>Builder</code>.\n<strong>Deprecated: Use <code>ThreadPool::with_name</code></strong>\nSet the maximum number of worker-threads that will be …\nReturns the number of panicked threads over the lifetime …\nReturns the number of jobs waiting to executed in the pool.\nSets the number of worker-threads to use as <code>num_threads</code>. …\n<strong>Deprecated: Use <code>ThreadPool::set_num_threads</code></strong>\nSet the thread name for each of the threads spawned by the …\nSet the stack size (in bytes) for each of the threads …\nCreates a new thread pool capable of executing <code>num_threads</code> …")