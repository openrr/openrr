searchState.loadedDescShard("async_io", 0, "Async I/O and timers.\nAsync adapter for I/O types.\nTypes whose I/O trait implementations do not drop the …\nFuture for <code>Async::readable</code>.\nFuture for <code>Async::readable_owned</code>.\nA future or stream that emits timed events.\nFuture for <code>Async::writable</code>.\nFuture for <code>Async::writable_owned</code>.\nAccepts a new incoming UDS stream connection.\nAccepts a new incoming TCP connection.\nCreates a timer that emits an event once after the given …\nCreates a timer that emits an event once at the given time …\nCreates a TCP listener bound to the specified address.\nCreates a UDP socket bound to the specified address.\nCreates a UDS listener bound to the specified path.\nCreates a UDS datagram socket bound to the specified path.\nBlocks the current thread on a future, processing I/O …\nClear any timeouts set on this timer. It will never fire …\nCreates a UDS stream connected to the specified path.\nCreates a TCP connection to the specified address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the inner I/O handle.\nGets a reference to the inner I/O handle.\nReturns a stream of incoming UDS connections.\nReturns a stream of incoming TCP connections.\nCreates a timer that emits events periodically.\nCreates a timer that emits events periodically, starting …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the inner I/O handle.\nCreates a timer that will never fire.\nCreates an async I/O handle.\nCreates an async I/O handle without setting it to …\nPlatform-specific functionality.\nCreates an unnamed pair of connected Unix datagram sockets.\nCreates an unnamed pair of connected UDS stream sockets.\nReads data from the stream without removing it from the …\nReceives a single datagram message from the connected peer …\nReceives a single datagram message without removing it …\nPolls the I/O handle for readability.\nPolls the I/O handle for writability.\nPerforms a read operation asynchronously.\nPerforms a read operation asynchronously.\nWaits until the I/O handle is readable.\nWaits until the I/O handle is readable.\nReceives data from the connected peer.\nReceives a single datagram message from the connected peer.\nReceives a single datagram message.\nReceives data from the socket.\nSends data to the connected peer.\nSends data to the connected peer.\nSends data to the specified address.\nSends data to the specified address.\nSets the timer to emit an event once after the given …\nSets the timer to emit an event once at the given time …\nSets the timer to emit events periodically.\nSets the timer to emit events periodically, starting at …\nCreates a UDS datagram socket not bound to any address.\nIndicates whether or not this timer will ever fire.\nWaits until the I/O handle is writable.\nWaits until the I/O handle is writable.\nPerforms a write operation asynchronously.\nPerforms a write operation asynchronously.\nFunctionality that is only available for <code>unix</code> platforms.\nGet a file descriptor that can be used to wait for …")