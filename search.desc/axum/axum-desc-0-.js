searchState.loadedDescShard("axum", 0, "axum is a web application framework that focuses on …\nAlias for a type-erased error type.\nErrors that can happen when using axum.\nExtractor and response for extensions.\nExtension trait that adds additional methods to <code>Request</code>.\nExtension trait that adds additional methods to <code>Parts</code>.\nThe router type for composing handlers and services.\nExtension trait that adds additional methods to any <code>Service</code>…\nHTTP body utilities.\nError handling model and utilities\nTypes and traits for extracting data from requests.\nApply an extractor to this <code>Request</code>.\nApply an extractor to this <code>Parts</code>.\nApply a parts extractor to this <code>Request</code>.\nApply a parts extractor that requires some state to this …\nApply an extractor that requires some state to this <code>Request</code>…\nApply an extractor that requires some state to this <code>Parts</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert this service into a <code>HandleError</code>, that will handle …\nConvert this service into a <code>HandleError</code>, that will handle …\nAsync functions that can be used to handle requests.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an <code>Error</code> back into the underlying boxed trait …\nConsumes the request, returning the body wrapped in …\nConvert this service into a <code>MakeService</code>, that is a <code>Service</code> …\nUtilities for writing middleware\nCreate a new <code>Error</code> from a boxable error.\nTypes and traits for generating responses.\nRouting between <code>Service</code>s and handlers.\nApply the default body limit.\nThe body type used in axum requests and responses.\nA stream of data frames.\nCreate an empty body.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Body</code> from a <code>Stream</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the body into a <code>Stream</code> of data frames.\nCreate a new <code>Body</code> that wraps another <code>http_body::Body</code>.\nConverts <code>Body</code> into <code>Bytes</code> and limits the maximum size of …\nA <code>Service</code> adapter that handles errors by converting them …\n<code>Layer</code> that applies <code>HandleError</code> which is a <code>Service</code> adapter …\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuture types.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>HandleErrorLayer</code>.\nCreate a new <code>HandleError</code>.\nResponse future for [<code>HandleError</code>].\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLayer for configuring the default request body limit.\nUsed to do reference-to-value conversions thus not …\nTypes that can be created from requests.\nTypes that can be created from request parts.\nExtractor that resolves the hostname of the request.\nAccess the path the matched the route is nested at.\nExtractor that will get captures from the URL and parse …\nExtractor that extracts raw form requests.\nExtractor that will get captures from the URL without …\nExtractor that extracts the raw query string, without …\nIf the extractor fails it’ll use this “rejection” …\nIf the extractor fails it’ll use this “rejection” …\nType alias for <code>http::Request</code> whose body type defaults to …\nExtractor for state.\nReturns a <code>str</code> representation of the path.\nDisable the default request body limit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts to this type from a reference to the input type.\nPerform the extraction.\nPerform the extraction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the default request body limit.\nExtractor that will get captures from the URL and parse …\nRejection response types.\nThe kinds of errors that can happen we deserializing into …\nRejection type for <code>Path</code> if the captured routes params …\nRejection used by <code>RawPathParams</code> if a parameter contained …\nA parameter contained text that, once percent decoded, wasn…\nCatch-all variant for errors that don’t fit any other …\nFailed to parse a value into the expected type.\nFailed to parse the value at a specific index into the …\nFailed to parse the value at a specific key into the …\nExtractor that will get captures from the URL and parse …\nExtractor that will get captures from the URL without …\nAn iterator over raw path parameters.\nTried to serialize into an unsupported type such as nested …\nThe URI contained the wrong number of parameters.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this error into the underlying error kind.\nGet an iterator over the path parameters.\nGet a reference to the underlying error kind.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nThe number of expected parameters.\nThe expected type of the value.\nThe expected type of the value.\nThe expected type of the value.\nThe number of actual parameters in the URI.\nThe index at which the value was located.\nThe key at which the value was located.\nThe key at which the invalid value was located.\nThe name of the unsupported type.\nThe value from the URI.\nThe value from the URI.\nThe value from the URI.\nRejection used for <code>Bytes</code>.\nRejection used for <code>Extension</code>.\nRejection type for extractors that buffer the request …\nRejection type used if the <code>Form</code> extractor is unable to …\nRejection type used if the <code>Form</code> extractor is unable to …\nRejection type used if the <code>Query</code> extractor is unable to …\nRejection type used if the <code>Host</code> extractor is unable to …\nRejection used for <code>Form</code>.\nRejection used for <code>Host</code>.\nRejection type for <code>Form</code> or <code>RawForm</code> used if the <code>Content-Type</code>…\nRejection type used when buffering the request into a …\nEncountered some other error when buffering the body.\nRejection type for <code>Extension</code> if an expected request …\nRejection type used if axum’s internal representation of …\nRejection type for <code>NestedPath</code>.\nRejection used for <code>Path</code>.\nRejection used for <code>Query</code>.\nRejection used for <code>RawForm</code>.\nRejection used for <code>RawPathParams</code>.\nRejection used for <code>String</code>.\nEncountered an unknown error when buffering the body.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nThe type of future calling this handler returns.\nTrait for async functions that can be used to handle …\nAn adapter that makes a <code>Handler</code> into a <code>Service</code>.\nExtension trait for <code>Handler</code>s that don’t have state.\nA <code>Service</code> created from a <code>Handler</code> by applying a Tower …\nCall the handler with the given request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandler future types.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the handler into a <code>MakeService</code> and no state.\nConvert the handler into a <code>MakeService</code>.\nConvert the handler into a <code>Service</code> and no state.\nApply a <code>tower::Layer</code> to the handler.\nGet a reference to the state.\nConvert the handler into a <code>Service</code> by providing the state\nThe response future for <code>IntoService</code>.\nThe response future for <code>Layered</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMiddleware for adding some shareable value to request …\nMiddleware that runs an extractor and discards the value.\n<code>Layer</code> that applies <code>FromExtractor</code> that runs an extractor and\nA middleware created from an async function.\nA <code>tower::Layer</code> from an async function.\nTrait implemented by types that can be returned from …\nA middleware created from an async function that …\nA <code>tower::Layer</code> from an async function that transforms a …\nA middleware created from an async function that …\nA <code>tower::Layer</code> from an async function that transforms a …\nThe remainder of a middleware stack, including the handler.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a middleware from an extractor.\nCreate a middleware from an extractor with the given state.\nCreate a middleware from an async function.\nCreate a middleware from an async function with the given …\nFuture types.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform the conversion.\nCreate a middleware from an async function that transforms …\nCreate a middleware from an async function that transforms …\nCreate a middleware from an async function that transforms …\nCreate a middleware from an async function that transforms …\nExecute the remaining middleware stack.\nResponse future for <code>FromExtractor</code>.\nResponse future for <code>FromFn</code>.\nResponse future for <code>MapRequest</code>.\nResponse future for <code>MapResponse</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAppend headers to a response.\nContains the error value\nThe type returned in the event of an error.\nAn <code>IntoResponse</code>-based error type\nAn HTML response.\nTrait for generating responses.\nTrait for adding headers and extensions to a response.\nAn empty response with 204 No Content status.\nContains the success value\nResponse that redirects the request to another location.\nType alias for <code>http::Response</code> whose body type defaults to …\nParts of a response.\nAn <code>IntoResponse</code>-based result type that uses <code>ErrorResponse</code> …\nGets a reference to the response extensions.\nGets a mutable reference to the response extensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the response headers.\nGets a mutable reference to the response headers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a response.\nSet parts of the response\nCreate a new <code>Redirect</code> that uses a <code>308 Permanent Redirect</code> …\nCreate a new <code>Redirect</code> that uses a <code>307 Temporary Redirect</code> …\nCreate a new <code>Redirect</code> that uses a <code>303 See Other</code> status …\nMatch <code>CONNECT</code> requests.\nMatch <code>DELETE</code> requests.\nMatch <code>GET</code> requests.\nMatch <code>HEAD</code> requests.\nA <code>MakeService</code> that produces axum router services.\nA filter that matches one or more HTTP methods.\nMatch <code>OPTIONS</code> requests.\nMatch <code>PATCH</code> requests.\nMatch <code>POST</code> requests.\nMatch <code>PUT</code> requests.\nHow routes are stored inside a <code>Router</code>.\nThe router type for composing handlers and services.\nA <code>Router</code> converted into a borrowed <code>Service</code> with a fixed …\nA <code>Router</code> converted into an owned <code>Service</code> with a fixed body …\nMatch <code>TRACE</code> requests.\nConvert the router into a borrowed <code>Service</code> with a fixed …\nAdd a fallback <code>Handler</code> to the router.\nAdd a fallback <code>Service</code> to the router.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuture types.\nTrue if the router currently has at least one route added.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this router into a <code>MakeService</code>, that is a <code>Service</code> …\nConvert the router into an owned <code>Service</code> with a fixed …\nApply a <code>tower::Layer</code> to all routes in the router.\nMerge the paths and fallbacks of two routers into a single …\nAdd a fallback <code>Handler</code> for the case where a route exists, …\nRoute to services and handlers based on HTTP methods.\nNest a <code>Router</code> at some path.\nLike <code>nest</code>, but accepts an arbitrary <code>Service</code>.\nCreate a new <code>Router</code>.\nPerforms the OR operation between the <code>MethodFilter</code> in <code>self</code> …\nAdd another route to the router.\nApply a <code>tower::Layer</code> to the router that will only run if …\nAdd another route to the router that calls a <code>Service</code>.\nProvide the state for the router. State passed to this …\nA <code>RouteFuture</code> that always yields a <code>Response</code>.\nResponse future for <code>IntoMakeService</code>.\nResponse future for <code>Route</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>Service</code> that accepts requests based on a <code>MethodFilter</code> and\nRoute requests with the given handler regardless of the …\nRoute requests to the given service regardless of its …\nRoute <code>CONNECT</code> requests to the given handler.\nChain an additional handler that will only accept <code>CONNECT</code> …\nRoute <code>CONNECT</code> requests to the given service.\nChain an additional service that will only accept <code>CONNECT</code> …\nRoute <code>DELETE</code> requests to the given handler.\nChain an additional handler that will only accept <code>DELETE</code> …\nRoute <code>DELETE</code> requests to the given service.\nChain an additional service that will only accept <code>DELETE</code> …\nAdd a fallback <code>Handler</code> to the router.\nAdd a fallback service to the router.\nReturns the argument unchanged.\nRoute <code>GET</code> requests to the given handler.\nChain an additional handler that will only accept <code>GET</code> …\nRoute <code>GET</code> requests to the given service.\nChain an additional service that will only accept <code>GET</code> …\nApply a <code>HandleErrorLayer</code>.\nRoute <code>HEAD</code> requests to the given handler.\nChain an additional handler that will only accept <code>HEAD</code> …\nRoute <code>HEAD</code> requests to the given service.\nChain an additional service that will only accept <code>HEAD</code> …\nCalls <code>U::from(self)</code>.\nConvert the router into a <code>MakeService</code>.\nApply a <code>tower::Layer</code> to all routes in the router.\nMerge two routers into one.\nCreate a default <code>MethodRouter</code> that will respond with …\nRoute requests with the given method to the handler.\nChain an additional handler that will accept requests …\nRoute requests with the given method to the service.\nChain an additional service that will accept requests …\nRoute <code>OPTIONS</code> requests to the given handler.\nChain an additional handler that will only accept <code>OPTIONS</code> …\nRoute <code>OPTIONS</code> requests to the given service.\nChain an additional service that will only accept <code>OPTIONS</code> …\nRoute <code>PATCH</code> requests to the given handler.\nChain an additional handler that will only accept <code>PATCH</code> …\nRoute <code>PATCH</code> requests to the given service.\nChain an additional service that will only accept <code>PATCH</code> …\nRoute <code>POST</code> requests to the given handler.\nChain an additional handler that will only accept <code>POST</code> …\nRoute <code>POST</code> requests to the given service.\nChain an additional service that will only accept <code>POST</code> …\nRoute <code>PUT</code> requests to the given handler.\nChain an additional handler that will only accept <code>PUT</code> …\nRoute <code>PUT</code> requests to the given service.\nChain an additional service that will only accept <code>PUT</code> …\nApply a <code>tower::Layer</code> to the router that will only run if …\nRoute <code>TRACE</code> requests to the given handler.\nChain an additional handler that will only accept <code>TRACE</code> …\nRoute <code>TRACE</code> requests to the given service.\nChain an additional service that will only accept <code>TRACE</code> …\nProvide the state for the router.")