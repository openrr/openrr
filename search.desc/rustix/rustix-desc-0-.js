searchState.loadedDescShard("rustix", 0, "<code>rustix</code> provides efficient memory-safe and I/O-safe …\nUtilities for functions that return data via buffers.\nMacro for defining the amount of space to allocate in a …\nA macro for <code>CStr</code> literals.\nEvent operations.\nExport the <code>*Fd</code> types and traits that are used in rustix’…\nUtilities related to FFI bindings.\nFilesystem operations.\nI/O operations.\nUnsafe <code>ioctl</code> API.\nNetwork-related operations.\nDocumentation about unimplemented functions.\nFilesystem path operations.\n<code>pipe</code> and related APIs.\nProcess-associated operations.\nPOSIX shared memory\nUname and other system-level functions.\nTime-related operations.\nA memory buffer that may be uninitialized.\nA type that implements <code>Buffer</code> by appending to a <code>Vec</code>, up to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct an <code>SpareCapacity</code>, which implements <code>Buffer</code>.\n<code>EFD_CLOEXEC</code>\n<code>POLLERR</code>\n<code>EFD_*</code> flags for use with <code>eventfd</code>.\nStorage element type for use with <code>select</code>.\nAn iterator over the fds in a set.\n<code>POLLHUP</code>\n<code>POLLIN</code>\n<code>EFD_NONBLOCK</code>\n<code>POLLNVAL</code>\nA type for the <code>tv_nsec</code> field of <code>Timespec</code>.\n<code>POLLOUT</code>\n<code>POLLPRI</code>\n<code>struct pollfd</code>—File descriptor and flags for use with <code>poll</code>…\n<code>POLL*</code> flags for use with <code>poll</code>.\n<code>POLLRDBAND</code>\n<code>POLLRDHUP</code>\n<code>POLLRDNORM</code>\n<code>EFD_SEMAPHORE</code>\nA type for the <code>tv_sec</code> field of <code>Timespec</code>.\n<code>struct timespec</code>—A quantity of time in seconds plus …\n<code>POLLWRBAND</code>\n<code>POLLWRNORM</code>\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nChecked <code>Timespec</code> addition. Returns <code>None</code> if overflow …\nChecked <code>Timespec</code> subtraction. Returns <code>None</code> if overflow …\nClears the ready events.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nLinux <code>epoll</code> support.\n<code>eventfd(initval, flags)</code>—Creates a file descriptor for …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nCompute the minimum <code>nfds</code> value needed for the set pointed …\nSet <code>fd</code> in the set pointed to by <code>fds</code>.\nCompute the number of <code>FdSetElement</code>s needed to hold a set …\nClear <code>fd</code> in the set pointed to by <code>fds</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConstructs a new <code>PollFd</code> holding <code>fd</code> and <code>events</code>.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nConstruct a <code>FdSetIter</code> for the given set.\nConstructs a new <code>PollFd</code> holding <code>fd</code> and <code>events</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n<code>pause()</code>—Sleep until interrupted by a signal.\n<code>poll(self.fds, timeout)</code>—Wait for events on lists of file …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the ready events.\n<code>select(nfds, readfds, writefds, exceptfds, timeout)</code>—Wait …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the contained file descriptor to <code>fd</code>.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nNanoseconds. Must be less than 1_000_000_000.\nSeconds.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>EPOLL_CLOEXEC</code>\n<code>EPOLL_*</code> for use with <code>epoll::create</code>.\n<code>EPOLLERR</code>\n<code>EPOLLET</code>\n<code>EPOLLEXCLUSIVE</code>\nA record of an event that occurred.\nData associated with an <code>epoll::Event</code>. This can either be a …\n<code>EPOLL*</code> for use with <code>epoll::add</code>.\n<code>EPOLLHUP</code>\n<code>EPOLLIN</code>\n<code>EPOLLMSG</code>\n<code>EPOLLONESHOT</code>\n<code>EPOLLOUT</code>\n<code>EPOLLPRI</code>\n<code>EPOLLRDBAND</code>\n<code>EPOLLRDHUP</code>\n<code>EPOLLRDNORM</code>\n<code>EPOLLWAKEUP</code>\n<code>EPOLLWRBAND</code>\n<code>EPOLLWRNORM</code>\n<code>epoll_ctl(self, EPOLL_CTL_ADD, data, event)</code>—Adds an …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\n<code>epoll_create1(flags)</code>—Creates a new epoll object.\nUser data.\n<code>epoll_ctl(self, EPOLL_CTL_DEL, target, NULL)</code>—Removes an …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nWhich specific event(s) occurred.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\n<code>epoll_ctl(self, EPOLL_CTL_MOD, target, event)</code>—Modifies …\nConstruct a new value containing a <code>*mut c_void</code>.\nConstruct a new value containing a <code>u64</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturn the value as a <code>*mut c_void</code>.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturn the value as a <code>u64</code>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>epoll_wait(self, events, timeout)</code>—Waits for registered …\nA trait to borrow the file descriptor from an underlying …\nA trait to extract the raw file descriptor from an …\nA borrowed file descriptor.\nA trait to express the ability to construct an object from …\nA trait to express the ability to consume an object and …\nAn owned file descriptor.\nRaw file descriptors.\nBorrows the file descriptor.\nExtracts the raw file descriptor.\nReturns a <code>BorrowedFd</code> holding the given raw file descriptor.\nTakes ownership of a <code>ChildStderr</code>’s file descriptor.\nReturns the argument unchanged.\nTakes ownership of a <code>TcpListener</code>’s socket file …\nTakes ownership of a <code>TcpStream</code>’s socket file descriptor.\nTakes ownership of a <code>File</code>’s underlying file descriptor.\nTakes ownership of a <code>ChildStdout</code>’s file descriptor.\nTakes ownership of a <code>ChildStdin</code>’s file descriptor.\nTakes ownership of a <code>UnixStream</code>’s socket file descriptor.\nTakes ownership of a <code>UdpSocket</code>’s file descriptor.\nTakes ownership of a <code>UnixListener</code>’s socket file …\nTakes ownership of a <code>UnixDatagram</code>’s socket file …\nReturns the argument unchanged.\nConstructs a new instance of <code>Self</code> from the given raw file …\nConstructs a new instance of <code>Self</code> from the given raw file …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this object, returning the raw underlying file …\nCreates a new <code>OwnedFd</code> instance that shares the same …\nCreates a new <code>OwnedFd</code> instance that shares the same …\nRepresentation of a borrowed C string.\nA type representing an owned, C-compatible, nul-terminated …\nAn error indicating that a nul byte was not in the …\nData provided contains an interior nul byte at byte …\nData provided is not nul terminated.\nAn error indicating that an interior nul byte was found.\nReturns the contents of this <code>CString</code> as a slice of bytes.\nEquivalent to <code>CString::as_bytes()</code> except that the returned …\nExtracts a <code>CStr</code> slice containing the entire string.\nReturns the inner pointer to this C string.\nIterates over the bytes in this C string.\nEquivalent to C’s <code>char</code> type.\nEquivalent to C’s <code>signed int</code> (<code>int</code>) type.\nEquivalent to C’s <code>signed long</code> (<code>long</code>) type.\nEquivalent to C’s <code>signed long long</code> (<code>long long</code>) type.\nEquivalent to C’s <code>signed short</code> (<code>short</code>) type.\nEquivalent to C’s <code>unsigned int</code> type.\nEquivalent to C’s <code>unsigned long</code> type.\nEquivalent to C’s <code>unsigned long long</code> type.\nEquivalent to C’s <code>unsigned short</code> type.\nEquivalent to C’s <code>void</code> type when used as a pointer.\nReturns the length of <code>self</code>. Like C’s <code>strlen</code>, this does …\nCreates an empty <code>CString</code>.\nReturns an object that implements <code>Display</code> for safely …\nConverts a &amp;CStr into a <code>CString</code> by copying the contents …\nConverts a Vec&lt;NonZero&lt;u8&gt;&gt; into a <code>CString</code> without copying …\nConverts a Box&lt;CStr&gt; into a <code>CString</code> without copying or …\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>CString</code>, by copying the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a C string wrapper from a byte slice with any …\nCreates a C string wrapper from a byte slice with exactly …\nUnsafely creates a C string wrapper from a byte slice.\nWraps a raw C string with a safe C string wrapper.\nRetakes ownership of a <code>CString</code> that was transferred to C …\nConverts a string <code>s</code> into a <code>CString</code>.\nCreates a C-compatible string by consuming a byte vector, …\nAttempts to converts a Vec&lt;u8&gt; to a <code>CString</code>.\nConverts a Vec&lt;u8&gt; to a <code>CString</code> without checking the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>CString</code> into a boxed <code>CStr</code>.\nConsumes the <code>CString</code> and returns the underlying byte …\nEquivalent to <code>CString::into_bytes()</code> except that the …\nConverts a Box&lt;CStr&gt; into a <code>CString</code> without copying or …\nConsumes the <code>CString</code> and transfers ownership of the string …\nConverts the <code>CString</code> into a <code>String</code> if it contains valid …\nConsumes this error, returning the underlying vector of …\nReturns <code>true</code> if <code>self.to_bytes()</code> has a length of 0.\nCreates a new C-compatible string from a container of …\nReturns the position of the nul byte in the slice that …\nConverts this C string to a byte slice.\nConverts this C string to a byte slice containing the …\nYields a &amp;str slice if the <code>CStr</code> contains valid UTF-8.\nConverts a <code>CStr</code> into a Cow&lt;str&gt;.\nThe position of the interior nul byte.\n<code>-EBADF</code>—A handle that requires paths to be absolute.\n<code>O_ACCMODE</code>\n<code>STATX_ALL</code>\n<code>MFD_ALLOW_SEALING</code>\n<code>O_APPEND</code>\n<code>FS_APPEND_FL</code>\n<code>STATX_ATTR_APPEND</code>\n<code>O_ASYNC</code>, <code>FASYNC</code>\n<code>STATX_ATIME</code>\n<code>STATX_ATTR_AUTOMOUNT</code>\n<code>*_OK</code> constants for use with <code>accessat</code>.\n<code>POSIX_FADV_*</code> constants for use with <code>fadvise</code>.\n<code>AT_*</code> constants for use with <code>openat</code>, <code>statat</code>, and other <code>*at</code> …\n<code>STATX_BASIC_STATS</code>\n<code>RESOLVE_BENEATH</code>\n<code>STATX_BLOCKS</code>\n<code>STATX_BTIME</code>\n<code>S_IFBLK</code>\n<code>RESOLVE_CACHED</code> (since Linux 5.12)\n<code>O_CLOEXEC</code>\n<code>MFD_CLOEXEC</code>\n<code>FALLOC_FL_COLLAPSE_RANGE</code>\n<code>FS_COMPR_FL</code>\n<code>STATX_ATTR_COMPRESSED</code>\n<code>O_CREAT</code>\n<code>XATTR_CREATE</code>\n<code>STATX_CTIME</code>\n<code>AT_FDCWD</code>—A handle representing the current working …\n<code>S_IFCHR</code>\nSets the offset to the current position plus the specified …\n<code>STATX_ATTR_DAX</code>\n<code>STATX_DIOALIGN</code> (since Linux 6.1)\n<code>O_DIRECT</code>\n<code>O_DIRECTORY</code>\n<code>FS_DIRSYNC_FL</code>\n<code>O_DSYNC</code>\nSets the offset to the current position plus the specified …\n<code>dev_t</code>\n<code>DIR*</code>\n<code>struct dirent</code>\nRe-export types common to POSIX-ish platforms. …\n<code>S_IFDIR</code>\n<code>POSIX_FADV_DONTNEED</code>\n<code>AT_EACCESS</code>\n<code>AT_EMPTY_PATH</code>\n<code>STATX_ATTR_ENCRYPTED</code>\n<code>RENAME_EXCHANGE</code>\n<code>O_EXCL</code>\n<code>MFD_EXEC</code> (since Linux 6.3)\n<code>F_SEAL_EXEC</code> (since Linux 6.3)\n<code>X_OK</code>\n<code>F_OK</code>\nSets the offset to the size of this object plus the …\n<code>O_FSYNC</code>\n<code>F_SEAL_FUTURE_WRITE</code> (since Linux 5.1)\n<code>FALLOC_FL_*</code> constants for use with <code>fallocate</code>.\n<code>S_IFIFO</code>\nRe-export types common to POSIX-ish platforms. …\n<code>S_IF*</code> constants for use with <code>mknodat</code> and <code>Stat</code>’s <code>st_mode</code> …\nRe-export types common to POSIX-ish platforms. …\n<code>LOCK_*</code> constants for use with <code>flock</code> and <code>fcntl_lock</code>.\n<code>__fsword_t</code>\n<code>fsid_t</code> for use with <code>StatFs</code>.\n<code>STATX_GID</code>\n<code>F_SEAL_GROW</code>\n<code>gid_t</code>—A Unix group ID.\n<code>MFD_HUGETLB</code> (since Linux 4.14)\n<code>MFD_HUGE_16GB</code>\n<code>MFD_HUGE_16MB</code>\n<code>MFD_HUGE_1GB</code>\n<code>MFD_HUGE_1MB</code>\n<code>MFD_HUGE_256MB</code>\n<code>MFD_HUGE_2GB</code>\n<code>MFD_HUGE_2MB</code>\n<code>MFD_HUGE_32MB</code>\n<code>MFD_HUGE_512KB</code>\n<code>MFD_HUGE_512MB</code>\n<code>MFD_HUGE_64KB</code>\n<code>MFD_HUGE_8MB</code>\nSets the offset to the current position plus the specified …\n<code>FS_*</code> constants for use with <code>ioctl_getflags</code>.\n<code>FS_IMMUTABLE_FL</code>\n<code>STATX_ATTR_IMMUTABLE</code>\n<code>STATX_INO</code>\n<code>FALLOC_FL_INSERT_RANGE</code>\n<code>RESOLVE_IN_ROOT</code>\n<code>FS_JOURNAL_DATA_FL</code>\n<code>FALLOC_FL_KEEP_SIZE</code>\n<code>O_LARGEFILE</code>\n<code>LOCK_EX</code>\n<code>LOCK_SH</code>\n<code>ST_MANDLOCK</code>\n<code>STATX_MNT_ID</code> (since Linux 5.8)\n<code>STATX_MODE</code>\n<code>STATX_ATTR_MOUNT_ROOT</code>\n<code>STATX_MTIME</code>\n<code>MFD_*</code> constants for use with <code>memfd_create</code>.\nRe-export types common to POSIX-ish platforms. …\n<code>S_I*</code> constants for use with <code>openat</code>, <code>chmodat</code>, and <code>fchmod</code>.\nThe filesystem magic number for NFS.\n<code>STATX_NLINK</code>\n<code>O_NOATIME</code>\n<code>ST_NOATIME</code>\n<code>FS_NOATIME_FL</code>\n<code>FS_NOCOW_FL</code>\n<code>O_NOCTTY</code>\n<code>ST_NODEV</code>\n<code>ST_NODIRATIME</code>\n<code>FS_NODUMP_FL</code>\n<code>STATX_ATTR_NODUMP</code>\n<code>ST_NOEXEC</code>\n<code>MFD_NOEXEC_SEAL</code> (since Linux 6.3)\n<code>O_NOFOLLOW</code>\n<code>O_NONBLOCK</code>\n<code>RENAME_NOREPLACE</code>\n<code>ST_NOSUID</code>\n<code>FS_NOTAIL_FL</code>\n<code>AT_NO_AUTOMOUNT</code>\n<code>FALLOC_FL_NO_HIDE_STALE</code>\n<code>RESOLVE_NO_MAGICLINKS</code>\n<code>RESOLVE_NO_SYMLINKS</code>\n<code>RESOLVE_NO_XDEV</code>\n<code>POSIX_FADV_NOREUSE</code>\n<code>LOCK_EX | LOCK_NB</code>\n<code>LOCK_SH | LOCK_NB</code>\n<code>LOCK_UN | LOCK_NB</code>\n<code>POSIX_FADV_NORMAL</code>\nA type for the <code>tv_nsec</code> field of <code>Timespec</code>.\n<code>O_*</code> constants for use with <code>openat</code>.\nRe-export types common to POSIX-ish platforms. …\n<code>O_PATH</code>\nThe filesystem magic number for procfs.\n<code>FS_PROJINHERIT_FL</code>\n<code>FALLOC_FL_PUNCH_HOLE</code>\n<code>O_RDONLY</code>\n<code>ST_RDONLY</code>\n<code>O_RDWR</code>\n<code>R_OK</code>\n<code>ST_RELATIME</code>\n<code>AT_REMOVEDIR</code>\n<code>XATTR_REPLACE</code>\n<code>S_IRGRP</code>\nA <code>Uid</code> corresponding to the root user (uid 0).\nA <code>Gid</code> corresponding to the root group (gid 0).\n<code>S_IROTH</code>\n<code>O_RSYNC</code>\n<code>S_IRUSR</code>\nSimilar to <code>ACCMODE</code>, but just includes the read/write …\n<code>S_IRWXG</code>\n<code>S_IRWXO</code>\n<code>S_IRWXU</code>\n<code>POSIX_FADV_RANDOM</code>\nA directory iterator implemented with getdents.\nA raw directory entry, similar to <code>std::fs::DirEntry</code>.\n<code>mode_t</code>\n<code>S_IFREG</code>\n<code>RENAME_*</code> constants for use with <code>renameat_with</code>.\n<code>RESOLVE_*</code> constants for use with <code>openat2</code>.\n<code>F_SEAL_SEAL</code>\n<code>FS_SECRM_FL</code>\n<code>S_ISGID</code>\n<code>F_SEAL_SHRINK</code>\n<code>STATX_SIZE</code>\n<code>AT_STATX_DONT_SYNC</code>\n<code>AT_STATX_FORCE_SYNC</code>\n<code>AT_STATX_SYNC_AS_STAT</code>\n<code>S_ISUID</code>\n<code>S_ISVTX</code>\n<code>AT_SYMLINK_FOLLOW</code>\n<code>AT_SYMLINK_NOFOLLOW</code>\n<code>O_SYNC</code>\n<code>FS_SYNC_FL</code>\n<code>ST_SYNCHRONOUS</code>\n<code>F_SEAL_*</code> constants for use with <code>fcntl_add_seals</code> and …\nA type for the <code>tv_sec</code> field of <code>Timespec</code>.\nEnumeration of possible methods to seek within an I/O …\n<code>POSIX_FADV_SEQUENTIAL</code>\n<code>S_IFSOCK</code>\nSets the offset to the provided number of bytes.\n<code>struct stat</code> for use with <code>statat</code> and <code>fstat</code>.\n<code>struct statfs</code> for use with <code>statfs</code> and <code>fstatfs</code>.\n<code>struct statvfs</code> for use with <code>statvfs</code> and <code>fstatvfs</code>.\n<code>ST_*</code> constants for use with <code>StatVfs</code>.\n<code>struct statx</code> for use with <code>statx</code>.\n<code>STATX_ATTR_*</code> flags for use with <code>Statx</code>.\n<code>STATX_*</code> constants for use with <code>statx</code>.\n<code>struct statx_timestamp</code> for use with <code>Statx</code>.\n<code>S_IFLNK</code>\n<code>O_TMPFILE</code>\n<code>FS_TOPDIR_FL</code>\n<code>O_TRUNC</code>\n<code>STATX_TYPE</code>\n<code>struct timespec</code>—A quantity of time in seconds plus …\nTimestamps used by <code>utimensat</code> and <code>futimens</code>.\n<code>STATX_UID</code>\n<code>FS_UNRM_FL</code>\n<code>FALLOC_FL_UNSHARE_RANGE</code>\n<code>UTIME_NOW</code> for use with <code>utimensat</code>.\n<code>UTIME_OMIT</code> for use with <code>utimensat</code>.\n<code>uid_t</code>—A Unix user ID.\nAn unknown filesystem object.\n<code>LOCK_UN</code>\n<code>STATX_ATTR_VERITY</code>\n<code>S_IWGRP</code>\n<code>RENAME_WHITEOUT</code>\n<code>S_IWOTH</code>\n<code>F_SEAL_WRITE</code>\n<code>W_OK</code>\n<code>O_WRONLY</code>\n<code>S_IWUSR</code>\n<code>POSIX_FADV_WILLNEED</code>\n<code>S_IXGRP</code>\n<code>S_IXOTH</code>\n<code>S_IXUSR</code>\n<code>XATTR_*</code> constants for use with <code>setxattr</code>, and other …\n<code>FALLOC_FL_ZERO_RANGE</code>\n<code>access(path, access)</code>—Tests permissions for a file or …\n<code>faccessat(dirfd, path, access, flags)</code>—Tests permissions …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nConverts a <code>Uid</code> into a <code>RawUid</code>.\nConverts a <code>Gid</code> into a <code>RawGid</code>.\nConstruct an <code>st_mode</code> value from a <code>Mode</code>.\nConstruct an <code>st_mode</code> value from a <code>FileType</code>.\nReturns the last access time of the file, in seconds since …\nReturns the last access time of the file, in nanoseconds …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the block size for filesystem I/O.\nReturns the number of blocks allocated to the file, in …\n<code>fchdir(self)</code>\n<code>chmod(path, mode)</code>—Sets file or directory permissions.\n<code>fchmodat(dirfd, path, mode, flags)</code>—Sets file or …\n<code>chown(path, owner, group)</code>—Sets open file or directory …\n<code>fchownat(dirfd, path, owner, group, flags)</code>—Sets file or …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\n<code>copy_file_range(fd_in, off_in, fd_out, off_out, len, 0)</code>…\nReturns the last status change time of the file, in …\nReturns the last status change time of the file, in …\nPass custom flags to the <code>flags</code> argument of <code>open</code>.\nReturns the ID of the device containing the file.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\n<code>ioctl(fd, EXT4_IOC_RESIZE_FS, blocks)</code>—Resize ext4 …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\n<code>posix_fadvise(fd, offset, len, advice)</code>—Declares an …\n<code>fallocate(fd, mode, offset, len)</code>—Adjusts file allocation.\n<code>fchmod(fd, mode)</code>—Sets open file or directory permissions.\n<code>fchown(fd, owner, group)</code>—Sets open file or directory …\n<code>fcntl(fd, F_ADD_SEALS)</code>—Add seals to <code>fd</code>’s inode.\n<code>fcntl(fd, F_GET_SEALS)</code>—Return the seals for <code>fd</code>’s inode.\n<code>fcntl(fd, F_GETFL)</code>—Returns a file descriptor’s access …\n<code>fcntl(fd, F_SETLK)</code>—Acquire or release an <code>fcntl</code>-style …\n<code>fcntl(fd, F_SETFL, flags)</code>—Sets a file descriptor’s …\n<code>fdatasync(fd)</code>—Ensures that file data is written to the …\n<code>fgetxattr(fd, name, value.as_ptr(), value.len())</code>—Get …\nReturns the file name of this directory entry.\nReturns the file name of this directory entry.\nReturns the type of this directory entry.\nReturns the type of this directory entry.\n<code>flistxattr(fd, list.as_ptr(), list.len())</code>—List extended …\n<code>flock(fd, operation)</code>—Acquire or release an advisory lock …\n<code>fremovexattr(fd, name)</code>—Remove an extended filesystem …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSupport conversions from <code>Mode</code> to raw mode values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSupport conversions from raw mode values to <code>Mode</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nConverts a <code>RawUid</code> into a <code>Uid</code>.\nConverts a <code>RawGid</code> into a <code>Gid</code>.\nConstruct a <code>Mode</code> from the mode bits of the <code>st_mode</code> field …\nConstruct a <code>FileType</code> from the <code>S_IFMT</code> bits of the <code>st_mode</code> …\nConverts a <code>RawUid</code> into a <code>Uid</code>.\nConverts a <code>RawGid</code> into a <code>Gid</code>.\n<code>fsetxattr(fd, name, value.as_ptr(), value.len(), flags)</code>…\n<code>fstat(fd)</code>—Queries metadata for an open file or directory.\n<code>fstatfs(fd)</code>—Queries filesystem statistics for an open …\n<code>fstatvfs(fd)</code>—Queries filesystem statistics for an open …\n<code>fsync(fd)</code>—Ensures that file data and metadata is written …\n<code>ftruncate(fd, length)</code>—Sets the length of a file.\n<code>futimens(fd, times)</code>—Sets timestamps for an open file or …\n<code>getxattr(path, name, value)</code>—Get extended filesystem …\nReturns the group ID of the owner of this file.\nReturns the inode number.\nReturns the underlying <code>d_ino</code> field in the contained <code>dirent</code> …\nReturns the inode number of this directory entry.\nReturn the inode number of this directory entry.\ninotify support for working with inotify objects.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ioctl(fd, BLKPBSZGET)</code>—Returns the physical block size of …\n<code>ioctl(fd, BLKSSZGET)</code>—Returns the logical block size of a …\n<code>ioctl(fd, FICLONE, src_fd)</code>—Share data between open files.\n<code>ioctl(fd, FS_IOC_GETFLAGS)</code>—Returns the inode flags …\n<code>ioctl(fd, FS_IOC_SETFLAGS)</code>—Modify the inode flags …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if this file type is a block device.\nReturns <code>true</code> if this <code>FileType</code> is a block device.\nReturns true if the internal buffer is empty and will be …\nReturns <code>true</code> if this file type is a char device.\nReturns <code>true</code> if this <code>FileType</code> is a character device.\nReturns <code>true</code> if this <code>FileType</code> is a directory.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if this file type is a fifo.\nReturns <code>true</code> if this <code>FileType</code> is a fifo.\nReturns <code>true</code> if this <code>FileType</code> is a regular file.\nTest whether this uid represents the root user (<code>Uid::ROOT</code>).\nTest whether this gid represents the root group (<code>Gid::ROOT</code>…\nReturns <code>true</code> if this file type is a socket.\nReturns <code>true</code> if this <code>FileType</code> is a socket.\nReturns <code>true</code> if this <code>FileType</code> is a symlink.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe timestamp of the last access to a filesystem object.\nThe timestamp of the last modification of a filesystem …\n<code>lgetxattr(path, name, value.as_ptr(), value.len())</code>—Get …\n<code>link(old_path, new_path)</code>—Creates a hard link.\n<code>linkat(old_dirfd, old_path, new_dirfd, new_path, flags)</code>…\n<code>listxattr(path, list.as_ptr(), list.len())</code>—List extended …\n<code>llistxattr(path, list.as_ptr(), list.len())</code>—List …\n<code>lremovexattr(path, name)</code>—Remove an extended filesystem …\n<code>setxattr(path, name, value.as_ptr(), value.len(), flags)</code>…\n<code>lstat(path)</code>—Queries metadata for a file or directory, …\n<code>major(dev)</code>—Compute the major ID of a given device ID.\n<code>makedev(maj, min)</code>—Compute a device ID from a given major …\n<code>memfd_create(name, flags)</code>—Create an anonymous file.\n<code>minor(dev)</code>—Compute the minor ID of a given device ID.\n<code>mkdir(path, mode)</code>—Creates a directory.\n<code>mkdirat(fd, path, mode)</code>—Creates a directory.\n<code>mkfifoat(dirfd, path, mode)</code>—Make a FIFO special file.\n<code>mknodat(dirfd, path, mode, dev)</code>—Creates special or …\nSets the mode bits that a new file will be created with.\nReturns the rights applied to this file.\nReturns the last modification time of the file, in seconds …\nReturns the last modification time of the file, in …\nTake ownership of <code>fd</code> and construct a <code>Dir</code> that reads …\nCreate a new iterator from the given file descriptor and …\nIdentical to <code>Iterator::next</code> except that <code>Iterator::Item</code> …\nReturns the seek cookie to the next directory entry.\nReturns the number of hard links pointing to this file.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the “offset” of this directory entry. This is …\n<code>open(path, oflags, mode)</code>—Opens a file.\n<code>openat(dirfd, path, oflags, mode)</code>—Opens a file.\n…\nReturns the device ID of this file (if it is a special …\n<code>readdir(self)</code>, where <code>None</code> means the end of the directory.\nReads a number of bytes starting from a given offset.\nReads the exact number of bytes required to fill <code>buf</code> from …\nBorrow <code>fd</code> and construct a <code>Dir</code> that reads entries from the …\nLike <code>read_at</code>, except that it reads into a slice of buffers.\n<code>readlink(path)</code>—Reads the contents of a symlink.\n<code>readlinkat(fd, path)</code>—Reads the contents of a symlink.\n<code>readlinkat(fd, path)</code>—Reads the contents of a symlink, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\n<code>removexattr(path, name)</code>—Remove an extended filesystem …\n<code>rename(old_path, new_path)</code>—Renames a file or directory.\n<code>renameat(old_dirfd, old_path, new_dirfd, new_path)</code>…\n<code>renameat2(old_dirfd, old_path, new_dirfd, new_path, flags)</code>…\n<code>rewinddir(self)</code>\n<code>rmdir(path)</code>—Removes a directory.\n<code>lseek(fd, offset, whence)</code>—Repositions a file descriptor …\n<code>seekdir(self, offset)</code>\n<code>sendfile(out_fd, in_fd, offset, count)</code>—Transfer data …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\n<code>setxattr(path, name, value.as_ptr(), value.len(), flags)</code>…\nReturns the total size of this file in bytes.\n<code>stat(path)</code>—Queries metadata for a file or directory.\n<code>fstat(self)</code>\n<code>fstatat(dirfd, path, flags)</code>—Queries metadata for a file …\n<code>statfs</code>—Queries filesystem metadata.\n<code>fstatfs(self)</code>\n<code>statvfs</code>—Queries filesystem metadata, POSIX version.\n<code>fstatvfs(self)</code>\n<code>statx(dirfd, path, flags, mask, statxbuf)</code>—Extended <code>stat</code>.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\n<code>symlink(old_path, new_path)</code>—Creates a symlink.\n<code>symlinkat(old_path, new_dirfd, new_path)</code>—Creates a …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n<code>sync</code>—Flush cached filesystem data for all filesystems.\n<code>syncfs(fd)</code>—Flush cached filesystem data.\n<code>lseek(fd, 0, SEEK_CUR)</code>—Returns the current position …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nNanoseconds. Must be less than 1_000_000_000.\nNanoseconds. Must be less than 1_000_000_000.\nSeconds.\nSeconds.\nReturns the user ID of the owner of this file.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>unlink(path)</code>—Unlinks a file.\n<code>unlinkat(fd, path, flags)</code>—Unlinks a file or remove a …\n<code>utimensat(dirfd, path, times, flags)</code>—Sets file or …\nAttempts to write an entire buffer starting from a given …\nWrites a number of bytes starting from a given offset.\nLike <code>write_at</code>, except that it writes from a slice of …\n<code>IN_ACCESS</code>\n<code>IN_ACCESS</code>\n<code>IN_ALL_EVENTS</code>\n<code>IN_ATTRIB</code>\n<code>IN_ATTRIB</code>\n<code>IN_CLOEXEC</code>\n<code>IN_CLOSE</code>\n<code>IN_CLOSE_NOWRITE</code>\n<code>IN_CLOSE_NOWRITE</code>\n<code>IN_CLOSE_WRITE</code>\n<code>IN_CLOSE_WRITE</code>\n<code>IN_CREATE</code>\n<code>IN_CREATE</code>\n<code>IN_*</code> for use with <code>inotify::init</code>.\n<code>IN_DELETE</code>\n<code>IN_DELETE</code>\n<code>IN_DELETE_SELF</code>\n<code>IN_DELETE_SELF</code>\n<code>IN_DONT_FOLLOW</code>\n<code>IN_EXCL_UNLINK</code>\nAn inotify event.\n<code>IN_IGNORED</code>\n<code>IN_ISDIR</code>\n<code>IN_MASK_ADD</code>\n<code>IN_MASK_CREATE</code>\n<code>IN_MODIFY</code>\n<code>IN_MODIFY</code>\n<code>IN_MOVE</code>\n<code>IN_MOVED_FROM</code>\n<code>IN_MOVED_FROM</code>\n<code>IN_MOVED_TO</code>\n<code>IN_MOVED_TO</code>\n<code>IN_MOVE_SELF</code>\n<code>IN_MOVE_SELF</code>\n<code>IN_NONBLOCK</code>\n<code>IN_ONESHOT</code>\n<code>IN_ONLYDIR</code>\n<code>IN_OPEN</code>\n<code>IN_OPEN</code>\n<code>IN_Q_OVERFLOW</code>\n<code>IN*</code> for use with <code>inotify::Reader</code>.\nAn inotify event iterator implemented with the read …\n<code>IN_UNMOUNT</code>\n<code>IN*</code> for use with <code>inotify::add_watch</code>.\n<code>inotify_add_watch(self, path, flags)</code>—Adds a watch to …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns the unique cookie associating related events.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nReturns a description of the events.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the file name of this event, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\n<code>inotify_init1(flags)</code>—Creates a new inotify object.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns true if the internal buffer is empty and will be …\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nCreate a new iterator from the given file descriptor and …\nRead the next inotify event.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\n<code>inotify_rm_watch(self, wd)</code>—Removes a watch from this …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the watch for which this event occurs.\n<code>EACCES</code>\n<code>EADDRINUSE</code>\n<code>EADDRNOTAVAIL</code>\n<code>EADV</code>\n<code>EAFNOSUPPORT</code>\n<code>EAGAIN</code>\n<code>EALREADY</code>\n<code>RWF_APPEND</code> (since Linux 4.16)\n<code>EBADE</code>\n<code>EBADF</code>\n<code>EBADFD</code>\n<code>EBADMSG</code>\n<code>EBADR</code>\n<code>EBADRQC</code>\n<code>EBADSLT</code>\n<code>EBFONT</code>\n<code>EBUSY</code>\n<code>ECANCELED</code>\n<code>ECHILD</code>\n<code>ECHRNG</code>\n<code>FD_CLOEXEC</code>\n<code>O_CLOEXEC</code>\n<code>ECOMM</code>\n<code>ECONNABORTED</code>\n<code>ECONNREFUSED</code>\n<code>ECONNRESET</code>\n<code>EDEADLK</code>\n<code>EDEADLOCK</code>\n<code>EDESTADDRREQ</code>\n<code>EDOM</code>\n<code>EDOTDOT</code>\n<code>EDQUOT</code>\n<code>RWF_DSYNC</code> (since Linux 4.7)\n<code>O_*</code> constants for use with <code>dup2</code>.\n<code>EEXIST</code>\nContains the error value\n<code>errno</code>—An error code.\n<code>EFAULT</code>\n<code>EFBIG</code>\n<code>FD_*</code> constants for use with <code>fcntl_getfd</code> and <code>fcntl_setfd</code>.\n<code>RWF_HIPRI</code> (since Linux 4.6)\n<code>EHOSTDOWN</code>\n<code>EHOSTUNREACH</code>\n<code>EHWPOISON</code>\n<code>EIDRM</code>\n<code>EILSEQ</code>\n<code>EINPROGRESS</code>\n<code>EINTR</code>\n<code>EINVAL</code>\n<code>EIO</code>\n<code>EISCONN</code>\n<code>EISDIR</code>\n<code>EISNAM</code>\nA buffer type used with <code>Write::write_vectored</code>.\nA buffer type used with <code>Read::read_vectored</code>.\n<code>EKEYEXPIRED</code>\n<code>EKEYREJECTED</code>\n<code>EKEYREVOKED</code>\n<code>EL2HLT</code>\n<code>EL2NSYNC</code>\n<code>EL3HLT</code>\n<code>EL3RST</code>\n<code>ELIBACC</code>\n<code>ELIBBAD</code>\n<code>ELIBEXEC</code>\n<code>ELIBMAX</code>\n<code>ELIBSCN</code>\n<code>ELNRNG</code>\n<code>ELOOP</code>\n<code>EMEDIUMTYPE</code>\n<code>EMFILE</code>\n<code>EMLINK</code>\n<code>EMSGSIZE</code>\n<code>EMULTIHOP</code>\n<code>ENAMETOOLONG</code>\n<code>ENAVAIL</code>\n<code>ENETDOWN</code>\n<code>ENETRESET</code>\n<code>ENETUNREACH</code>\n<code>ENFILE</code>\n<code>ENOANO</code>\n<code>ENOBUFS</code>\n<code>ENOCSI</code>\n<code>ENODATA</code>\n<code>ENODEV</code>\n<code>ENOENT</code>\n<code>ENOEXEC</code>\n<code>ENOKEY</code>\n<code>ENOLCK</code>\n<code>ENOLINK</code>\n<code>ENOMEDIUM</code>\n<code>ENOMEM</code>\n<code>ENOMSG</code>\n<code>ENONET</code>\n<code>ENOPKG</code>\n<code>ENOPROTOOPT</code>\n<code>ENOSPC</code>\n<code>ENOSR</code>\n<code>ENOSTR</code>\n<code>ENOSYS</code>\n<code>ENOTBLK</code>\n<code>ENOTCONN</code>\n<code>ENOTDIR</code>\n<code>ENOTEMPTY</code>\n<code>ENOTNAM</code>\n<code>ENOTRECOVERABLE</code>\n<code>ENOTSOCK</code>\n<code>ENOTSUP</code>\n<code>ENOTTY</code>\n<code>ENOTUNIQ</code>\n<code>RWF_NOWAIT</code> (since Linux 4.14)\n<code>ENXIO</code>\n<code>EOPNOTSUPP</code>\n<code>EOVERFLOW</code>\n<code>EOWNERDEAD</code>\nContains the success value\n<code>EPERM</code>\n<code>EPFNOSUPPORT</code>\n<code>EPIPE</code>\n<code>EPROTO</code>\n<code>EPROTONOSUPPORT</code>\n<code>EPROTOTYPE</code>\n<code>ERANGE</code>\n<code>EREMCHG</code>\n<code>EREMOTE</code>\n<code>EREMOTEIO</code>\n<code>ERESTART</code>\n<code>ERFKILL</code>\n<code>EROFS</code>\n<code>RWF_*</code> constants for use with <code>preadv2</code> and <code>pwritev2</code>.\nA specialized <code>Result</code> type for <code>rustix</code> APIs.\n<code>ESHUTDOWN</code>\n<code>ESOCKTNOSUPPORT</code>\n<code>ESPIPE</code>\n<code>ESRCH</code>\n<code>ESRMNT</code>\n<code>ESTALE</code>\n<code>ESTRPIPE</code>\n<code>RWF_SYNC</code> (since Linux 4.7)\n<code>ETIME</code>\n<code>ETIMEDOUT</code>\n<code>E2BIG</code>\n<code>ETOOMANYREFS</code>\n<code>ETXTBSY</code>\n<code>EUCLEAN</code>\n<code>EUNATCH</code>\n<code>EUSERS</code>\n<code>EWOULDBLOCK</code>\n<code>EXDEV</code>\n<code>EXFULL</code>\nAdvance the internal cursor of the slice.\nAdvance the internal cursor of the slice.\nAdvance a slice of slices.\nAdvance a slice of slices.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet the underlying bytes as a slice with the original …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n<code>close(raw_fd)</code>—Closes a <code>RawFd</code> directly.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\n<code>dup(fd)</code>—Creates a new <code>OwnedFd</code> instance that shares the …\n<code>dup2(fd, new)</code>—Changes the file description of a file …\n<code>dup3(fd, new, flags)</code>—Changes the file description of a …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\n<code>fcntl(fd, F_DUPFD_CLOEXEC)</code>—Creates a new <code>OwnedFd</code> …\n<code>fcntl(fd, F_GETFD)</code>—Returns a file descriptor’s flags.\n<code>fcntl(fd, F_SETFD, flags)</code>—Sets a file descriptor’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nExtract an <code>Errno</code> value from a <code>std::io::Error</code>.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nConstruct an <code>Errno</code> from a raw OS error number.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the underlying bytes as a mutable slice with the …\n<code>ioctl(fd, FIOCLEX, NULL)</code>—Set the close-on-exec flag.\n<code>ioctl(fd, FIONBIO, &amp;value)</code>—Enables or disables …\n<code>ioctl(fd, FIONCLEX, NULL)</code>—Remove the close-on-exec flag.\n<code>ioctl(fd, FIONREAD)</code>—Returns the number of bytes ready to …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nShorthand for <code>std::io::Error::from(self).kind()</code>.\nCreates a new <code>IoSliceMut</code> wrapping a byte slice.\nCreates a new <code>IoSlice</code> wrapping a byte slice.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n<code>pread(fd, buf, offset)</code>—Reads from a file at a given …\n<code>preadv(fd, bufs, offset)</code>—Reads from a file at a given …\n<code>preadv2(fd, bufs, offset, flags)</code>—Reads data, with …\n<code>pwrite(fd, bufs)</code>—Writes to a file at a given position.\n<code>pwritev(fd, bufs, offset)</code>—Writes to a file at a given …\n<code>pwritev2(fd, bufs, offset, flags)</code>—Writes data, with …\nExtract the raw OS error number from this error.\n<code>read(fd, buf)</code>—Reads from a stream.\n<code>readv(fd, bufs)</code>—Reads from a stream into multiple …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>f</code> until it either succeeds or fails other than …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>write(fd, buf)</code>—Writes to a stream.\n<code>writev(fd, bufs)</code>—Writes to a stream from multiple …\nThe direction that an <code>ioctl</code> is going.\nImplements the traditional “getter” pattern for <code>ioctl</code>s.\nDoes the <code>ioctl</code> mutate any data in the userspace?\nImplements an <code>ioctl</code> that passes an integer into the <code>ioctl</code>.\nA trait defining the properties of an <code>ioctl</code> command.\nThe type used by the <code>ioctl</code> to signify the output.\nImplements an <code>ioctl</code> with no real arguments.\nNone of the above.\nThe type used by the <code>ioctl</code> to signify the command.\nThe type of the output data.\nRead data from the kernel.\nRead and write data to the kernel.\nImplements the pattern for <code>ioctl</code>s where a pointer argument …\nImplements an “updater” pattern for <code>ioctl</code>s.\nWrite data to the kernel.\nGet a pointer to the data to be passed to the <code>ioctl</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform an <code>ioctl</code> call.\nCreate a new no-argument <code>ioctl</code> object.\nCreate a new getter-style <code>ioctl</code> object.\nCreate a new pointer setter-style <code>ioctl</code> object.\nCreate a new pointer updater-style <code>ioctl</code> object.\nCreate a new integer <code>Ioctl</code> helper containing a <code>*mut c_void</code>.\nCreate a new integer <code>Ioctl</code> helper containing a <code>usize</code>.\nConst functions for computing opcode values.\nGet the opcode used by this <code>ioctl</code> command.\nCast the output data to the correct type.\nCreate a new opcode from a direction, group, number, and …\nCreate a new opcode from a group, a number, that uses no …\nCreate a new reading opcode from a group, a number and the …\nCreate a new reading and writing opcode from a group, a …\nCreate a new writing opcode from a group, a number and the …\n<code>AF_APPLETALK</code>\n<code>AF_ASH</code>\n<code>AF_ATMPVC</code>\n<code>AF_ATMSVC</code>\n<code>AF_AX25</code>\n<code>AF_*</code> constants for use with <code>socket</code>, <code>socket_with</code>, and …\nAn iterator that drains messages from a <code>RecvAncillaryBuffer</code>…\nAn iterator over data in an ancillary buffer.\nThe size of an IPv4 address in bits.\nThe size of an IPv6 address in bits.\n<code>AF_BLUETOOTH</code>\n<code>AF_BRIDGE</code>\nAn IPv4 address representing the broadcast address: …\n<code>SHUT_RDWR</code>—Disable further read and write operations.\n<code>AF_CAN</code>\n<code>SOCK_CLOEXEC</code>\n<code>MSG_CMSG_CLOEXEC</code>\n<code>MSG_CMSG_CLOEXEC</code>\n<code>MSG_CONFIRM</code>\n<code>MSG_CTRUNC</code>\n<code>SOF_TXTIME_DEADLINE_MODE</code>\n<code>AF_DECnet</code>\n<code>SOCK_DGRAM</code>\n<code>MSG_DONTROUTE</code>\n<code>MSG_DONTWAIT</code>\n<code>MSG_DONTWAIT</code>\n<code>AF_ECONET</code>\n<code>MSG_EOR</code>\n<code>MSG_EOR</code>\n<code>MSG_ERRQUEUE</code>\n<code>MSG_ERRQUEUE</code>\n<code>AF_IEEE802154</code>\n<code>AF_INET</code>\n<code>AF_INET6</code>\n<code>AF_IPX</code>\n<code>AF_IRDA</code>\n<code>AF_ISDN</code>\n<code>AF_IUCV</code>\nAn IP address, either IPv4 or IPv6.\nAn IPv4 address.\nAn IPv6 address.\n<code>AF_KEY</code>\n<code>AF_LLC</code>\nAn IPv4 address with the address pointing to localhost: …\nAn IPv6 address representing localhost: <code>::1</code>.\nAn ABI-compatible wrapper for <code>mmsghdr</code>, for sending …\n<code>MSG_MORE</code>\n<code>AF_NETBEUI</code>\n<code>AF_NETLINK</code>\n<code>AF_NETROM</code>\n<code>SOCK_NONBLOCK</code>\n<code>MSG_NOSIGNAL</code>\n<code>MSG_OOB</code>\n<code>MSG_OOB</code>\n<code>MSG_OOB</code>\n<code>AF_PACKET</code>\n<code>MSG_PEEK</code>\n<code>AF_PHONET</code>\n<code>AF_PPPOX</code>\n<code>IPPROTO_*</code> and other constants for use with <code>socket</code>, …\n<code>SOCK_RAW</code>\n<code>SOCK_RDM</code>\n<code>AF_RDS</code>\n<code>SOF_TXTIME_REPORT_ERRORS</code>\n<code>AF_ROSE</code>\n<code>AF_RXRPC</code>\nA type for holding raw integer address families.\nA type for holding raw integer protocols.\nA type for holding raw integer socket types.\n<code>SHUT_RD</code>—Disable further read operations.\nBuffer for receiving ancillary messages with <code>recvmsg</code>.\nAncillary message for <code>recvmsg</code>.\n<code>MSG_*</code> flags for use with <code>recv</code>, <code>recvfrom</code>, and related …\nThe result of a successful <code>recvmsg</code> call.\n<code>MSG_*</code> flags returned from <code>recvmsg</code>, in the <code>flags</code> field of …\n<code>AF_SECURITY</code>\n<code>SOCK_SEQPACKET</code>\n<code>AF_SNA</code>\n<code>SOCK_STREAM</code>\nSend process credentials.\nReceived process credentials.\nSend file descriptors.\nReceived file descriptors.\nBuffer for sending ancillary messages with <code>sendmsg</code> and …\nAncillary message for <code>sendmsg</code> and <code>sendmsg_addr</code>.\n<code>MSG_*</code> flags for use with <code>send</code>, <code>sendto</code>, and related …\n<code>SHUT_*</code> constants for use with <code>shutdown</code>.\nAn internet socket address, either IPv4 or IPv6.\nA type that can hold any kind of socket address, as a safe …\n<code>struct sockaddr_un</code>\nAn IPv4 socket address.\nAn IPv6 socket address.\n<code>SOCK_*</code> constants for use with <code>socket_with</code>, <code>accept_with</code> and …\n<code>SOCK_*</code> constants for use with <code>socket</code>.\n<code>AF_TIPC</code>\n<code>MSG_TRUNC</code>\n<code>MSG_TRUNC</code>\nTransmission time, in nanoseconds. The value will be …\nFlags for use with <code>set_txtime</code>.\nUNIX credentials of socket peer, for use with …\n<code>AF_UNIX</code>, aka <code>AF_LOCAL</code>\n<code>AF_UNSPEC</code>\nAn IPv4 address representing an unspecified address: …\nAn IPv6 address representing the unspecified address: <code>::</code>.\nAn IPv4 address.\nAn IPv4 socket address.\nAn IPv6 address.\nAn IPv6 socket address.\n<code>AF_VSOCK</code>\n<code>MSG_WAITALL</code>\n<code>AF_WANPIPE</code>\n<code>SHUT_WR</code>—Disable further write operations.\n<code>AF_X25</code>\n<code>AF_XDP</code>\nFor an abstract address, return the identifier.\n<code>accept(fd, NULL, NULL)</code>—Accepts an incoming connection.\n<code>accept4(fd, NULL, NULL, flags)</code>—Accepts an incoming …\n<code>accept(fd, &amp;addr, &amp;len)</code>—Accepts an incoming connection …\n<code>accept4(fd, &amp;addr, &amp;len, flags)</code>—Accepts an incoming …\nTypes for implementers of socket address types or code …\nReturns the length of the encoded sockaddr.\nThe address of the socket we received from, if any.\nGets the address family of this socket address.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nReturns a raw mutable pointer to the sockaddr.\nReturns the eight-bit integers this address consists of as …\nReturns the four eight-bit integers that make up this …\nReturns the sixteen eight-bit integers the IPv6 address …\nReturns a raw pointer to the sockaddr.\nReturns the raw integer for this <code>SocketType</code>.\nReturns the raw integer for this <code>AddressFamily</code>.\nReturns the raw integer for this <code>Protocol</code>.\n<code>bind(sockfd, addr)</code>—Binds a socket to an IP address.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe number of bytes received.\nReturns the number of bytes sent. This will return 0 until …\nDelete all messages from the buffer.\nMacro for defining the amount of space to allocate in a …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n<code>connect(sockfd, addr)</code>—Initiates a connection to an IP …\n…\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDrain all messages from the buffer.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\n<code>ETH_P_*</code> constants.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe flags received.\nReturns the flow information associated with this address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCopies this address to a new <code>IpAddr::V6</code>.\nReturns the argument unchanged.\nCopies this address to a new <code>IpAddr::V4</code>.\nCreates an <code>IpAddr::V6</code> from an eight element 16-bit array.\nCreates an <code>IpAddr::V4</code> from a four element byte array.\nCreates an <code>IpAddr::V6</code> from a sixteen element byte array.\nUses <code>Ipv4Addr::from_bits</code> to convert a host byte order <code>u32</code> …\nCreates an <code>Ipv4Addr</code> from a four element byte array.\nReturns the argument unchanged.\nUses <code>Ipv6Addr::from_bits</code> to convert a host byte order <code>u128</code> …\nCreates an <code>Ipv6Addr</code> from a sixteen element byte array.\nReturns the argument unchanged.\nCreates an <code>Ipv6Addr</code> from an eight element 16-bit array.\nConverts a <code>SocketAddrV4</code> into a <code>SocketAddr::V4</code>.\nConverts a tuple struct (Into&lt;<code>IpAddr</code>&gt;, <code>u16</code>) into a …\nReturns the argument unchanged.\nConverts a <code>SocketAddrV6</code> into a <code>SocketAddr::V6</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConverts a native byte order <code>u32</code> into an IPv4 address.\nConverts a native byte order <code>u128</code> into an IPv6 address.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates an <code>Ipv4Addr</code> from a four element byte array.\nCreates an <code>Ipv6Addr</code> from a sixteen element byte array.\nConstructs a <code>SocketType</code> from a raw integer.\nConstructs a <code>AddressFamily</code> from a raw integer.\nConstructs a <code>Protocol</code> from a raw integer.\nCreates an <code>Ipv6Addr</code> from an eight element 16-bit array.\n<code>getpeername(fd, addr, len)</code>—Returns the address a socket …\n<code>getsockname(fd, addr, len)</code>—Returns the address a socket …\nGroup ID of peer\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the IP address associated with this socket address.\nReturns the IP address associated with this socket address.\nReturns the IP address associated with this socket address.\n<code>IPPROTO_*</code> constants.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this address part of the <code>198.18.0.0/15</code> …\nReturns <code>true</code> if this is an address reserved for …\nReturns <code>true</code> if this is a broadcast address (…\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this is an address reserved for …\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if this address is an <code>IPv4</code> address, and <code>false</code> …\nReturns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …\nReturns <code>true</code> if the address is an IPv4-mapped address (…\nReturns <code>true</code> if this address is an <code>IPv6</code> address, and <code>false</code> …\nReturns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …\nReturns <code>true</code> if the address is link-local (<code>169.254.0.0/16</code>).\nReturns <code>true</code> if this is a loopback address.\nReturns <code>true</code> if this is a loopback address (<code>127.0.0.0/8</code>).\nReturns <code>true</code> if this is the loopback address (<code>::1</code>), as …\nReturns <code>true</code> if this is a multicast address.\nReturns <code>true</code> if this is a multicast address (<code>224.0.0.0/4</code>).\nReturns <code>true</code> if this is a multicast address (<code>ff00::/8</code>).\nReturns <code>true</code> if this is a private address.\nReturns <code>true</code> if this address is reserved by IANA for …\nReturns <code>true</code> if this address is part of the Shared Address …\nReturns <code>true</code> if this is a unicast address, as defined by …\nReturns <code>true</code> if the address is a globally routable unicast …\nReturns <code>true</code> if the address is a unicast address with …\nReturns <code>true</code> if this is a unique local address (<code>fc00::/7</code>).\n<code>true</code> if the socket address is unnamed.\nReturns <code>true</code> for the special ‘unspecified’ address.\nReturns <code>true</code> for the special ‘unspecified’ address (…\nReturns <code>true</code> for the special ‘unspecified’ address (<code>::</code>…\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\n<code>listen(fd, backlog)</code>—Enables listening for incoming …\nReturns the address’s multicast scope if the address is …\nLow-level Linux network device access\n<code>NETLINK_*</code> constants.\nCreate a new, empty <code>SendAncillaryBuffer</code> from a raw byte …\nConstructs a new message with no destination address.\nConstruct a new Unix-domain address from a filesystem path.\nCreate a new, empty <code>RecvAncillaryBuffer</code> from a raw byte …\nCreates a socket address from <code>storage</code>, which is …\nCreates a new IPv4 address from four eight-bit octets.\nCreates a new IPv6 address from eight 16-bit segments.\nCreates a new socket address from an IP address and a port …\nCreates a new socket address from an <code>IPv4</code> address and a …\nCreates a new socket address from an <code>IPv6</code> address, a …\nConstruct a new abstract Unix-domain address from a byte …\nConstruct a new unnamed address.\nConstructs a new message to a specific address.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the four eight-bit integers that make up this …\nReturns the sixteen eight-bit integers the IPv6 address …\nCreate an iterator for control messages that were received …\nParse an IP address from a slice of bytes.\nParse an IPv4 address from a slice of bytes.\nParse an IPv6 address from a slice of bytes.\nParse a socket address from a slice of bytes.\nParse an IPv4 socket address from a slice of bytes.\nParse an IPv6 socket address from a slice of bytes.\nFor a filesystem path address, return the path.\nFor a filesystem path address, return the path as a byte …\nProcess ID of peer\nReturns the port number associated with this socket …\nReturns the port number associated with this socket …\nReturns the port number associated with this socket …\nAdd an ancillary message to the buffer.\nCreates a socket address from reading from <code>ptr</code>, which …\n<code>recv(fd, buf, flags)</code>—Reads data from a socket.\n<code>recvfrom(fd, buf, flags, addr, len)</code>—Reads data from a …\n<code>recvmsg(msghdr)</code>—Receives a message from a socket.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the scope ID associated with this address.\nReturns the eight 16-bit segments that make up this …\n<code>send(fd, buf, flags)</code>—Writes data to a socket.\n<code>sendmmsg(msghdr)</code>—Sends multiple messages on a socket.\n<code>sendmsg(msghdr)</code>—Sends a message on a socket.\n<code>sendmsg(msghdr)</code>—Sends a message on a socket to a …\n<code>sendto(fd, buf, flags, addr)</code>—Writes data to a socket to …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nChanges the flow information associated with this socket …\nChanges the IP address associated with this socket address.\nChanges the IP address associated with this socket address.\nChanges the IP address associated with this socket address.\nChanges the port number associated with this socket …\nChanges the port number associated with this socket …\nChanges the port number associated with this socket …\nChanges the scope ID associated with this socket address.\n<code>shutdown(fd, how)</code>—Closes the read and/or write sides of …\nGet the maximum size of an ancillary message.\n<code>socket(domain, type_, protocol)</code>—Creates a socket.\n<code>socket_with(domain, type_ | flags, protocol)</code>—Creates a …\n<code>socketpair(domain, type_ | accept_flags, protocol)</code>…\n<code>getsockopt</code> and <code>setsockopt</code> functions.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n<code>SYSPROTO_*</code> constants.\nConverts an IPv4 address into a <code>u32</code> representation using …\nConverts an IPv6 address into a <code>u128</code> representation using …\nConverts this address to an <code>IpAddr::V4</code> if it is an …\nConverts this address to an <code>IpAddr::V4</code> if it is an …\nConverts this address to an <code>IPv4</code> address if it is either …\nConverts this address to an <code>IPv4</code> address if it’s an …\nConverts this address to an IPv4-compatible <code>IPv6</code> address.\nConverts this address to an IPv4-mapped <code>IPv6</code> address.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConvert if the address is a Unix socket address.\nConvert if the address is an IPv4 or IPv6 address.\nConvert if the address is an IPv4 address.\nConvert if the address is an IPv6 address.\nUser ID of peer\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>AF_XDP</code> related types and constants.\nA trait abstracting over the types that can be passed as a …\nA type for the length of a socket address.\nOpaque type equivalent to <code>sockaddr</code> in C.\n<code>struct sockaddr_storage</code>\nConvert to <code>SocketAddrAny</code>.\nClear the <code>sa_family</code> of this socket address to …\nReturn the <code>sa_family</code> of this socket address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCall a closure with the pointer and length to the …\nEncode an address into a <code>SocketAddrStorage</code>.\nReturn a socket addr storage initialized to all zero …\n<code>ETH_P_AARP</code>\n<code>ETH_P_AF_IUCV</code>\n<code>ETH_P_ALL</code>\n<code>ETH_P_AOE</code>\n<code>ETH_P_ARCNET</code>\n<code>ETH_P_ARP</code>\n<code>ETH_P_ATALK</code>\n<code>ETH_P_ATMFATE</code>\n<code>ETH_P_ATMMPOA</code>\n<code>ETH_P_AX25</code>\n<code>ETH_P_BATMAN</code>\n<code>ETH_P_BPQ</code>\n<code>ETH_P_CAIF</code>\n<code>ETH_P_CAN</code>\n<code>ETH_P_CANFD</code>\n<code>ETH_P_CANXL</code>\n<code>ETH_P_CFM</code>\n<code>ETH_P_CONTROL</code>\n<code>ETH_P_CUST</code>\n<code>ETH_P_DDCMP</code>\n<code>ETH_P_DEC</code>\n<code>ETH_P_DIAG</code>\n<code>ETH_P_DNA_DL</code>\n<code>ETH_P_DNA_RC</code>\n<code>ETH_P_DNA_RT</code>\n<code>ETH_P_DSA</code>\n<code>ETH_P_DSA_8021Q</code>\n<code>ETH_P_DSA_A5PSW</code>\n<code>ETH_P_ECONET</code>\n<code>ETH_P_EDSA</code>\n<code>ETH_P_ERSPAN</code>\n<code>ETH_P_ERSPAN2</code>\n<code>ETH_P_ETHERCAT</code>\n<code>ETH_P_FCOE</code>\n<code>ETH_P_FIP</code>\n<code>ETH_P_HDLC</code>\n<code>ETH_P_HSR</code>\n<code>ETH_P_IBOE</code>\n<code>ETH_P_IEEE802154</code>\n<code>ETH_P_IEEEPUP</code>\n<code>ETH_P_IEEEPUPAT</code>\n<code>ETH_P_IFE</code>\n<code>ETH_P_IP</code>\n<code>ETH_P_IPV6</code>\n<code>ETH_P_IPX</code>\n<code>ETH_P_IRDA</code>\n<code>ETH_P_LAT</code>\n<code>ETH_P_LINK_CTL</code>\n<code>ETH_P_LLDP</code>\n<code>ETH_P_LOCALTALK</code>\n<code>ETH_P_LOOP</code>\n<code>ETH_P_LOOPBACK</code>\n<code>ETH_P_MACSEC</code>\n<code>ETH_P_MAP</code>\n<code>ETH_P_MCTP</code>\n<code>ETH_P_MOBITEX</code>\n<code>ETH_P_MPLS_MC</code>\n<code>ETH_P_MPLS_UC</code>\n<code>ETH_P_MRP</code>\n<code>ETH_P_MVRP</code>\n<code>ETH_P_NCSI</code>\n<code>ETH_P_NSH</code>\n<code>ETH_P_PAE</code>\n<code>ETH_P_PAUSE</code>\n<code>ETH_P_PHONET</code>\n<code>ETH_P_PPPTALK</code>\n<code>ETH_P_PPP_DISC</code>\n<code>ETH_P_PPP_MP</code>\n<code>ETH_P_PPP_SES</code>\n<code>ETH_P_PREAUTH</code>\n<code>ETH_P_PROFINET</code>\n<code>ETH_P_PRP</code>\n<code>ETH_P_PUP</code>\n<code>ETH_P_PUPAT</code>\n<code>ETH_P_1588</code>\n<code>ETH_P_8021AD</code>\n<code>ETH_P_8021AH</code>\n<code>ETH_P_8021Q</code>\n<code>ETH_P_80221</code>\n<code>ETH_P_802_2</code>\n<code>ETH_P_802_3</code>\n<code>ETH_P_802_3_MIN</code>\n<code>ETH_P_802_EX1</code>\n<code>ETH_P_QINQ1</code>\n<code>ETH_P_QINQ2</code>\n<code>ETH_P_QINQ3</code>\n<code>ETH_P_RARP</code>\n<code>ETH_P_REALTEK</code>\n<code>ETH_P_SCA</code>\n<code>ETH_P_SLOW</code>\n<code>ETH_P_SNAP</code>\n<code>ETH_P_TDLS</code>\n<code>ETH_P_TEB</code>\n<code>ETH_P_TIPC</code>\n<code>ETH_P_TRAILER</code>\n<code>ETH_P_TR_802_2</code>\n<code>ETH_P_TSN</code>\n<code>ETH_P_WAN_PPP</code>\n<code>ETH_P_WCCP</code>\n<code>ETH_P_X25</code>\n<code>ETH_P_XDSA</code>\n<code>IPPROTO_AH</code>\n<code>IPPROTO_BEETPH</code>\n<code>IPPROTO_COMP</code>\n<code>IPPROTO_DCCP</code>\n<code>IPPROTO_EGP</code>\n<code>IPPROTO_ENCAP</code>\n<code>IPPROTO_ESP</code>\n<code>IPPROTO_ETHERNET</code>\n<code>IPPROTO_FRAGMENT</code>\n<code>IPPROTO_GRE</code>\n<code>IPPROTO_ICMP</code>\n<code>IPPROTO_ICMPV6</code>\n<code>IPPROTO_IDP</code>\n<code>IPPROTO_IGMP</code>\n<code>IPPROTO_IPIP</code>\n<code>IPPROTO_IPV6</code>\n<code>IPPROTO_MH</code>\n<code>IPPROTO_MPLS</code>\n<code>IPPROTO_MPTCP</code>\n<code>IPPROTO_MTP</code>\n<code>IPPROTO_PIM</code>\n<code>IPPROTO_PUP</code>\n<code>IPPROTO_RAW</code>\n<code>IPPROTO_ROUTING</code>\n<code>IPPROTO_RSVP</code>\n<code>IPPROTO_SCTP</code>\n<code>IPPROTO_TCP</code>\n<code>IPPROTO_TP</code>\n<code>IPPROTO_UDP</code>\n<code>IPPROTO_UDPLITE</code>\nThe inlined interface name.\nReturns the bytes representation of the inlined name.\nReturns the str representation of the inlined name.\nReturns the argument unchanged.\n<code>ioctl(fd, SIOCGIFNAME, ifreq)</code>—Returns the interface name …\n<code>ioctl(fd, SIOCGIFNAME, ifreq)</code>—Returns the interface name …\nCalls <code>U::from(self)</code>.\n<code>ioctl(fd, SIOCGIFINDEX, ifreq)</code>—Returns the interface …\n<code>NETLINK_AUDIT</code>\n<code>NETLINK_CONNECTOR</code>\n<code>NETLINK_CRYPTO</code>\n<code>NETLINK_DNRTMSG</code>\n<code>NETLINK_ECRYPTFS</code>\n<code>NETLINK_FIB_LOOKUP</code>\n<code>NETLINK_FIREWALL</code>\n<code>NETLINK_GENERIC</code>\n<code>NETLINK_INET_DIAG</code>\n<code>NETLINK_IP6_FW</code>\n<code>NETLINK_ISCSI</code>\n<code>NETLINK_KOBJECT_UEVENT</code>\n<code>NETLINK_NETFILTER</code>\n<code>NETLINK_NFLOG</code>\n<code>NETLINK_RDMA</code>\n<code>NETLINK_SCSITRANSPORT</code>\n<code>NETLINK_SELINUX</code>\n<code>NETLINK_SOCK_DIAG</code>\nA Netlink socket address.\n<code>NETLINK_UNUSED</code>\n<code>NETLINK_USERSOCK</code>\n<code>NETLINK_XFRM</code>\nReturns the argument unchanged.\nReturn multicast groups mask.\nCalls <code>U::from(self)</code>.\nConstruct a netlink address\nReturn port id.\nSet multicast groups mask.\nSet port id.\n<code>IP_PMTUDISC_DO</code>\n<code>IPV6_PMTUDISC_DO</code>\n<code>IP_PMTUDISC_DONT</code>\n<code>IPV6_PMTUDISC_DONT</code>\n<code>IP_PMTUDISC_INTERFACE</code>\n<code>IPV6_PMTUDISC_INTERFACE</code>\nIPv4 Path MTU Discovery option values (<code>IP_PMTUDISC_*</code>) for …\nIPv6 Path MTU Discovery option values (<code>IPV6_PMTUDISC_*</code>) …\n<code>IP_PMTUDISC_OMIT</code>\n<code>IPV6_PMTUDISC_OMIT</code>\n<code>IP_PMTUDISC_PROBE</code>\n<code>IPV6_PMTUDISC_PROBE</code>\nA type for holding raw integer IPv4 Path MTU Discovery …\nA type for holding raw integer IPv6 Path MTU Discovery …\n<code>SO_RCVTIMEO</code>—Timeout for receiving.\n<code>SO_SNDTIMEO</code>—Timeout for sending.\nTimeout identifier for use with <code>set_socket_timeout</code> and …\n<code>IP_PMTUDISC_WANT</code>\n<code>IPV6_PMTUDISC_WANT</code>\nReturns the raw integer for this option.\nReturns the raw integer for this option.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an option from a raw integer.\nConstructs an option from a raw integer.\n<code>getsockopt(fd, SOL_SOCKET, SO_TXTIME)</code> — Get transmission …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>getsockopt(fd, IPPROTO_IP, IP_FREEBIND)</code>\n<code>getsockopt(fd, IPPROTO_IP, IP_MTU)</code>\n<code>getsockopt(fd, IPPROTO_IP, IP_MTU_DISCOVER)</code>\n<code>getsockopt(fd, IPPROTO_IP, IP_MULTICAST_IF)</code>\n<code>getsockopt(fd, IPPROTO_IP, IP_MULTICAST_LOOP)</code>\n<code>getsockopt(fd, IPPROTO_IP, IP_MULTICAST_TTL)</code>\n<code>getsockopt(fd, IPPROTO_IP, SO_ORIGINAL_DST)</code>\n<code>getsockopt(fd, IPPROTO_IP, IP_RECVTOS)</code>\n<code>getsockopt(fd, IPPROTO_IP, IP_TOS)</code>\n<code>getsockopt(fd, IPPROTO_IP, IP_TTL)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_FREEBIND)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_MTU)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_MTU_DISCOVER)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_MULTICAST_HOPS)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_MULTICAST_IF)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_MULTICAST_LOOP)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IP6T_SO_ORIGINAL_DST)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_RECVTCLASS)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_TCLASS)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_UNICAST_HOPS)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY)</code>\n…\n…\n<code>setsockopt(fd, IPPROTO_IP, IP_ADD_SOURCE_MEMBERSHIP, value)</code>\n…\n…\n…\n<code>setsockopt(fd, IPPROTO_IP, IP_FREEBIND, value)</code>\n<code>setsockopt(fd, IPPROTO_IP, IP_MTU_DISCOVER, value)</code>\n<code>setsockopt(fd, IPPROTO_IP, IP_MULTICAST_IF, value)</code>\n…\n<code>setsockopt(fd, IPPROTO_IP, IP_MULTICAST_LOOP, value)</code>\n<code>setsockopt(fd, IPPROTO_IP, IP_MULTICAST_TTL, value)</code>\n<code>setsockopt(fd, IPPROTO_IP, IP_RECVTOS, value)</code>\n<code>setsockopt(fd, IPPROTO_IP, IP_TOS, value)</code>\n<code>setsockopt(fd, IPPROTO_IP, IP_TTL, value)</code>\n…\n…\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_FREEBIND, value)</code>\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_MTU_DISCOVER, value)</code>\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, value)</code>\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_MULTICAST_IF, value)</code>\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_MULTICAST_LOOP, value)</code>\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_RECVTCLASS, value)</code>\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_TCLASS, value)</code>\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_UNICAST_HOPS, value)</code>\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_BROADCAST, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_INCOMING_CPU, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_LINGER, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_OOBINLINE, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_PASSCRED, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_RCVBUF, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_RCVBUFFORCE, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, value)</code>—Set …\n<code>setsockopt(fd, SOL_SOCKET, SO_REUSEPORT, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_SNDBUF, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_SNDBUFFORCE, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, id, value)</code>—Set the sending or …\n<code>setsockopt(fd, IPPROTO_TCP, TCP_CONGESTION, value)</code>\n<code>setsockopt(fd, IPPROTO_TCP, TCP_CORK, value)</code>\n<code>setsockopt(fd, IPPROTO_TCP, TCP_KEEPCNT, value)</code>\n<code>setsockopt(fd, IPPROTO_TCP, TCP_KEEPIDLE, value)</code>\n<code>setsockopt(fd, IPPROTO_TCP, TCP_KEEPINTVL, value)</code>\n<code>setsockopt(fd, IPPROTO_TCP, TCP_NODELAY, value)</code>\n<code>setsockopt(fd, IPPROTO_TCP, TCP_QUICKACK, value)</code>\n…\n<code>setsockopt(fd, IPPROTO_TCP, TCP_USER_TIMEOUT, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_TXTIME)</code> — Configure …\n<code>setsockopt(fd, SOL_XDP, XDP_RX_RING, value)</code>\n<code>setsockopt(fd, SOL_XDP, XDP_TX_RING, value)</code>\n<code>setsockopt(fd, SOL_XDP, XDP_UMEM_COMPLETION_RING, value)</code>\n<code>setsockopt(fd, SOL_XDP, XDP_UMEM_FILL_RING, value)</code>\n<code>setsockopt(fd, SOL_XDP, XDP_UMEM_REG, value)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_ACCEPTCONN)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_BROADCAST)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_COOKIE)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_DOMAIN)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_ERROR)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_INCOMING_CPU)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_KEEPALIVE)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_LINGER)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_OOBINLINE)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_PASSCRED)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_PEERCRED)</code>—Get credentials …\n<code>getsockopt(fd, SOL_SOCKET, SO_PROTOCOL)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_RCVBUF)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_REUSEADDR)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_REUSEPORT)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_SNDBUF)</code>\n<code>getsockopt(fd, SOL_SOCKET, id)</code>—Get the sending or …\n<code>getsockopt(fd, SOL_SOCKET, SO_TYPE)</code>—Returns the type of …\n<code>getsockopt(fd, IPPROTO_TCP, TCP_CONGESTION)</code>\n<code>getsockopt(fd, IPPROTO_TCP, TCP_CORK)</code>\n<code>getsockopt(fd, IPPROTO_TCP, TCP_KEEPCNT)</code>\n<code>getsockopt(fd, IPPROTO_TCP, TCP_KEEPIDLE)</code>\n<code>getsockopt(fd, IPPROTO_TCP, TCP_KEEPINTVL)</code>\n<code>getsockopt(fd, IPPROTO_TCP, TCP_NODELAY)</code>\n<code>getsockopt(fd, IPPROTO_TCP, TCP_QUICKACK)</code>\n<code>getsockopt(fd, IPPROTO_TCP, TCP_THIN_LINEAR_TIMEOUTS)</code>\n<code>getsockopt(fd, IPPROTO_TCP, TCP_USER_TIMEOUT)</code>\n<code>getsockopt(fd, SOL_XDP, XDP_MMAP_OFFSETS)</code>\n<code>getsockopt(fd, SOL_XDP, XDP_OPTIONS)</code>\n<code>getsockopt(fd, SOL_XDP, XDP_STATISTICS)</code>\nA XDP socket address.\n<code>XDP_*</code> constants for use in <code>SocketAddrXdp</code>.\nAn XDP socket address with a shared UMEM file descriptor.\n<code>XDP_COPY</code>\n<code>XDP_OPTIONS_ZEROCOPY</code>\nOffset for mmapping rx ring.\nOffset for mmapping tx ring.\n<code>XDP_PKT_CONTD</code>\n<code>XDP_RING_NEED_WAKEUP</code>\n<code>XDP_SHARED_UMEM</code>\nOffset for mmapping completion ring.\nOffset for mmapping fill ring.\n<code>XDP_UMEM_UNALIGNED_CHUNK_FLAG</code>\n<code>XDP_USE_NEED_WAKEUP</code>\n<code>XDP_USE_SG</code>\n<code>XDP_COPY</code>\nMask used to binary <code>and</code> the <code>XdpDesc</code> addr to extract the …\nOffset used to shift the <code>XdpDesc</code> addr to the right to …\nXDP rx/tx frame descriptor.\n<code>XDP_*</code> constants for use in <code>XdpDesc</code>.\nXDP mmap offsets.\nXDP options.\n<code>XDP_OPTIONS_*</code> constants returned by <code>get_xdp_options</code>.\n<code>XDP_RING_*</code> constants for use in fill and/or Tx ring.\nXDP ring offset.\nXDP statistics.\nXDP umem registration.\n<code>XDP_UMEM_*</code> constants for use in <code>XdpUmemReg</code>.\nXDP address.\nStart address of UMEM.\nOffset from the start of the UMEM.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nChunk size in bytes.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nConsumer offset.\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nCompletion ring offsets.\nDescriptors offset.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.")