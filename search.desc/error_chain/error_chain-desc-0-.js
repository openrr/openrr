searchState.loadedDescShard("error_chain", 0, "A library for consistent and reliable error handling\nRepresentation of an owned and self-contained backtrace.\nThis trait is implemented on all the errors generated by …\nA struct which formats an error for output.\nAssociated kind type.\nRepresents a value that can be used as the exit status of …\nIterator over the error chain using the <code>Error::cause()</code> …\nReturns the backtrace associated with this error.\nExits a function early with an error\nExtends the error chain with a new entry.\nReturns the value to use as the exit status.\nReturns an object which implements <code>Display</code> for printing …\nExits a function early with an error if the condition is …\nMacro for generating error types and traits. See crate …\nThese modules show an example of code generated by the …\nReturns the frames from when this backtrace was captured.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an error from a kind, and generates a backtrace.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates over the error chain.\nReturns the kind of the error.\nReturns a new iterator over the error chain using …\nCaptures a backtrace at the callsite of this function, …\nSimilar to <code>new</code> except that this does not resolve any …\nConvenient wrapper to be able to use <code>?</code> and such in the …\nIf this backtrace was created from <code>new_unresolved</code> then …\nFrom https://github.com/tailhook/quick-error Changes:\nConstructs a chained error from another error and a kind, …\nMacro used interally for output expanding an expression\nA custom error kind.\nContains the error value\nThe Error type.\nThe kind of an error.\nLink to another <code>ErrorChain</code>.\nLink to a <code>std::io::Error</code> type.\nA convenient variant for String.\nContains the success value\nConvenient wrapper around <code>std::Result</code>.\nAdditional methods for <code>Result</code>, for easy interaction with …\nReturns the backtrace associated with this error.\nIf the <code>Result</code> is an <code>Err</code> then <code>chain_err</code> evaluates the …\nExtends the error chain with a new entry.\nA short description of the error. This method is identical …\nA string describing the error kind.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an error from a kind, and generates a backtrace.\nAnother code generated by the macro.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates over the error chain.\nReturns the kind of the error.\nConstruct a chained error from another boxed error and a …\nConstructs a chained error from another error and a kind, …\nContains the error value\nThe Error type.\nThe kind of an error.\nA convenient variant for String.\nContains the success value\nConvenient wrapper around <code>std::Result</code>.\nAdditional methods for <code>Result</code>, for easy interaction with …\nReturns the backtrace associated with this error.\nIf the <code>Result</code> is an <code>Err</code> then <code>chain_err</code> evaluates the …\nExtends the error chain with a new entry.\nA short description of the error. This method is identical …\nA string describing the error kind.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an error from a kind, and generates a backtrace.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates over the error chain.\nReturns the kind of the error.\nConstruct a chained error from another boxed error and a …\nConstructs a chained error from another error and a kind, …")