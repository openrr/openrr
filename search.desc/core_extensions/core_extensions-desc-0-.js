searchState.loadedDescShard("core_extensions", 0, "Extension traits for many standard/core library …\nExtension trait for every type.\nA type-level identity function\nThis is always <code>Self</code>.\nAllows converting <code>Self</code> to <code>Self::Type</code> by proving that both …\nPerforms a mutable reference to mutable reference …\nPerforms a mutable reference to mutable reference …\nPerforms a reference to reference conversion with <code>AsRef</code>, …\nPerforms a reference to reference conversion with <code>AsRef</code>, …\nConverts a reference back to the original type.\nConverts a reference back to the original type.\nConverts a mutable reference back to the original type.\nConverts a mutable reference back to the original type.\nStringifies the input tokens, and errors with <code>compile_error</code>…\nStringifies the input tokens, and errors with <code>compile_error</code>…\nCounts the amount of token trees passed to this macro, …\nCounts the amount of token trees passed to this macro, …\nDrops <code>self</code> using method notation. Alternative to …\nDrops <code>self</code> using method notation. Alternative to …\nCompares the address of <code>self</code> with the address of <code>other</code>.\nCompares the address of <code>self</code> with the address of <code>other</code>.\nConverts a value back to the original type.\nConverts a value back to the original type.\nConverts an Arc back to the original type.\nConverts an Arc back to the original type.\nConverts a box back to the original type.\nConverts a box back to the original type.\nConverts a mutable reference back to the original type.\nConverts a mutable reference back to the original type.\nConverts an Rc back to the original type.\nConverts an Rc back to the original type.\nConverts a reference back to the original type.\nConverts a reference back to the original type.\nGenerates identifiers. passing them to a callback macro.\nPerforms a conversion with <code>Into</code>. using the turbofish …\nPerforms a conversion with <code>Into</code>. using the turbofish …\nConverts a value back to the original type.\nConverts a value back to the original type.\nConverts an Arc back to the original type.\nConverts an Arc back to the original type.\nConverts a box back to the original type.\nConverts a box back to the original type.\nConverts an Rc back to the original type.\nConverts an Rc back to the original type.\nUse this macro to create an <code>IterCloner</code> from an <code>IntoIterator</code>…\nIterator adaptors and constructors.\nFor using function-like macros as attributes.\nEvaluates to true if the expression matches any of the …\nTime measurement.\nMutates self using a closure taking self by mutable …\nMutates self using a closure taking self by mutable …\nObserves the value of self, passing it along unmodified. …\nObserves the value of self, passing it along unmodified. …\nAdaptor macro which passes arguments to a callback macro, …\nAdaptor macro which passes arguments to a callback macro, …\nEmulates the pipeline operator, allowing method syntax in …\nEmulates the pipeline operator, allowing method syntax in …\nThe same as <code>piped</code>, except that the function takes <code>&amp;mut Self</code>…\nThe same as <code>piped</code>, except that the function takes <code>&amp;mut Self</code>…\nThe same as <code>piped</code> except that the function takes <code>&amp;Self</code> …\nThe same as <code>piped</code> except that the function takes <code>&amp;Self</code> …\nRewraps the tokens inside macro parameters into …\nRewraps the tokens inside macro parameters into …\nSlice extension traits, and related items.\nExtension trait for string types.\nDoes slice and iterator operations on tokens, passing the …\nType-level assertions, most useful for tests.\nType level booleans\nMiscelaneous utility functions\nContains types and functions for impossible situations.\nImplements <code>IntoIterator::into_iter</code> by cloning the iterator …\nUses a closure to construct <code>Iterator</code>s.\nExtension trait for <code>std::iter::Iterator</code> implementors.\nA version of <code>std::iter::OnceWith</code> usable in Rust 1.41.0.\nAn Iterator that replaces the <code>nth</code> element with another …\nCollects into a pre-allocated collection,returning it by …\nCollects into an existing collection by extending it.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a LazyOnce.\nConstructs a <code>ReplaceNth</code>.\nMultiplies the items of the iterator, into the item’s …\nAn Iterator that replaces the nth element with another …\nSums the items of the iterator, into the item’s type.\nMeasures the time taken by <code>f</code> to execute, returning a pair …\nMeasures the time taken by fallible function <code>f</code> to execute, …\nThe direction a range bound is moved towards to make the …\nThe type of a slice element.\nBiased inwards, start bounds go right, end bounds go left.\nA pair of (slice, key) returned by the RSplitSliceWhile/ …\nBiased leftwards, both bounds go left.\nMeans that the bound is biased to lower indices\nBiased outwards, start bounds go left, end bounds go right.\nBiased rightwards. both bounds go right.\nIterator over slices, in which all the elements in each …\nMeans that the bound is biased to higher indices\nWhat directions <code>SliceExt</code><code>::{</code><code>slice_lossy</code><code>, </code><code>slice_lossy_mut</code><code>}</code> …\nExtension trait for <code>[T]</code> and <code>str</code>.\nIterator over slices, in which all the elements in each …\nExtension trait for <code>[T]</code>.\nChecks whether self fully contains the <code>other</code> slice in …\nbias of the end bound\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the index of <code>other</code> if it’s stored in the slice …\nReturns the index at which <code>other</code> starts.\nReturns the index of <code>other</code> if it’s stored in the slice …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this into a key-slice pair.\nChecks whether <code>self</code> is exactly the <code>other</code> slice in memory.\nThe value that all the elements in the slice were mapped …\nReturns the index at which <code>other</code> starts.\nA variation of <code>split_while</code> that iterates from the …\nA variation of <code>split_while</code> that iterates from the …\nA slice where every element was mapped to the same key by …\nUsed for non-panicking slicing.\nUsed for non-panicking mutable slicing.\nReturns an iterator over subslices whose elements were …\nReturns an iterator over subslices whose elements were …\nbias of the start bound\nLike <code>CharIndices</code>, which starts from an offset.\nA pair of (string slice, key) returned by the RSplitWhile/ …\nAdd padding to a string in its <code>Display</code> impl.\nIterator over string slices, in which all the chars in …\nIterator over string slices, in which all the chars in …\nExtension trait for strings (any type that borrows as <code>str</code>).\nReturns the rest of the slice to be iterated over.\nReturns the length of the string in utf16\nReturns an iterator over (index, char) pairs, starting …\nReturns an iterator over (index,char) pairs up to (but not …\nReturns a string containing the first <code>n</code> chars.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the string from the <code>n</code>th character\nReturns the character at the <code>at_byte</code> index inside of the …\nThe byte index of the <code>nth</code> character\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this into a key, string slice pair\nThe value that all the chars in the string slice were …\nReturns a string containing the last <code>n</code> chars\nReturns the closest characted boundary left of <code>index</code>…\nPads the string on the left with <code>how_much</code> additional …\nReturns a value that pads the string on the left with …\nThe indentation of the first line.\nThe maximum indentation of the string, ignoring lines that …\nThe minimum indentation of the string, ignoring lines that …\nConstructs a LeftPadder\nReturns the next character boundary.\nReturns the <code>nth</code> character in the str.\nThe byte index of the <code>nth</code> character\nReturns the previous character boundary, stopping at 0.\nReturns the closest characted boundary right of <code>index</code>…\nA variation of <code>split_while</code> that iterates from the …\nReturns an iterator over substrings whose characters were …\n<code>str_slice</code> is a string slice for which all characters were …\nAsserts that its 2 type parameters are the same type.\nAsserts that its 3 type parameters are the same type.\nAsserts that its 4 type parameters are the same type.\nConstructs an <code>AssertEq</code>.\nConstructs an <code>AssertEq3</code>.\nConstructs an <code>AssertEq4</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs an <code>AssertEq</code>.\nConstructs an <code>AssertEq3</code>.\nConstructs an <code>AssertEq4</code>.\n<code>And</code>s two Booleans\nRepresents a type-level <code>bool</code>\nRepresents a type-level <code>false</code>\nNegates a Boolean.\n<code>Or</code>s two Booleans\nRepresents a type-level <code>true</code>\nThe <code>bool</code> value of this type\n<code>Xor</code>s two Booleans\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUse this function to mark to the compiler that this branch …\nAllows transmuting between types of different sizes.\nTransmutes a <code>Vec&lt;T&gt;</code> into a <code>Vec&lt;U&gt;</code>\nType for impossible situations.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts a <code>Void</code> to any type.")