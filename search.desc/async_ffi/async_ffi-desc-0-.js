searchState.loadedDescShard("async_ffi", 0, "FFI-compatible <code>Future</code>s\nThe ABI version of <code>FfiFuture</code> and all variants. Every …\nThe FFI compatible future type with <code>Send</code> bound.\nHelper trait to provide convenience methods for converting …\nThe FFI compatible <code>std::task::Context</code>\nThe FFI compatible future type with <code>Send</code> bound and <code>&#39;static</code> …\nThe FFI compatible <code>std::task::Poll</code>\nHelper trait to provide conversion from <code>Future</code> to <code>FfiFuture</code>…\nThe FFI compatible future type without <code>Send</code> bound.\nThe FFI compatible future type without <code>Send</code> bound but with …\nRepresents that the future panicked\nRepresents that a value is not ready yet.\nRepresents that the poll function panicked.\nRepresents that a value is immediately ready.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>std::task::Poll</code> to the <code>FfiPoll</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a Rust <code>Future</code> implementing <code>Send</code> into a …\nConvert a Rust <code>Future</code> into a FFI-compatible <code>LocalFfiFuture</code>.\nConvert an <code>std::future::Future</code> implementing <code>Send</code> into a …\nConvert an <code>std::future::Future</code> into a FFI-compatible …\nTry to convert a <code>FfiPoll</code> back to the <code>std::task::Poll</code>.\nRuns a closure with the <code>FfiContext</code> as a normal …\nRuns a closure with the <code>std::task::Context</code> as a <code>FfiContext</code>.")