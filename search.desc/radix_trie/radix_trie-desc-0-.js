searchState.loadedDescShard("radix_trie", 0, "A wonderful, fast, safe, generic radix trie implementation.\nContains the error value\nA data-structure for storing a sequence of 4-bit values.\nContains the success value\nImmutable view of a sub-tree a larger trie.\nMutable view of a sub-tree of a larger trie.\nWrapper for subtrie lookup results.\nData-structure for storing and querying string-like keys …\nCommon functionality available for tries and subtries.\nTrait for types which can be used to key a Radix Trie.\nReturns a byte slice of the nibble vector’s contents.\nReturn an iterator over the child subtries of this node.\nEncode a value as a NibbleVec.\nEncode a value as a NibbleVec.\nEncode a value as a vector of bytes.\nEncode a value as a vector of bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a nibble vector from a vector of bytes.\nFetch a single entry from the vector.\nFetch a reference to the given key’s corresponding …\nLook up the value for the given key, which should be an …\nLook up the value for the given key, which should be an …\nFetch a reference to the closest ancestor node of the …\nFetch the closest ancestor <em>value</em> for a given key.\nFetch a mutable reference to the given key’s …\nThe key may be any borrowed form of the trie’s key type, …\nFetch the closest descendant for a given key.\nInsert the given key-value pair, returning any previous …\nInsert a value in this subtrie. The key should be an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a nibble vector into a byte vector.\nReturns <code>true</code> if the nibble vector has a length of 0.\nDetermine if the Trie contains 0 key-value pairs.\nDetermine if the Trie contains 0 key-value pairs.\nDetermine if the trie is a leaf node (has no children).\nDetermine if the trie is a leaf node (has no children).\nIterators over key-value pairs, keys, values and child …\nReturn an iterator over the keys and values of the Trie.\nReturn an iterator over the keys and values of the Trie.\nAppend another nibble vector whilst consuming this vector.\nGet the key stored at this node, if any.\nGet the key stored at this node, if any.\nReturn an iterator over the keys of the Trie.\nReturn an iterator over the keys of the Trie.\nNumber of key/value pairs stored in this trie.\nGet the number of elements stored in the vector.\n<strong>Computes</strong> from scratch.\nTake a function <code>f</code> and apply it to the value stored at <code>key</code>.\nCreate an empty nibble vector.\nCreate an empty Trie.\nGet the prefix of this node.\nGet the prefix of this node.\nAdd a single nibble to the vector.\nRemove the value associated with the given key.\nRemove a value from this subtrie. The key should be an …\nSplit the vector into two parts.\nFetch a reference to the subtrie for a given key.\nFetch a mutable reference to the subtrie for a given key.\nGet the value stored at this node, if any.\nGet the value stored at this node, if any.\nGet a mutable reference to the value stored at this node, …\nMutable reference to the node’s value.\nReturn an iterator over the values of the Trie.\nReturn an iterator over the values of the Trie.\nIterator over the child subtries of a trie.\nIterator over the keys and values of a Trie.\nIterator over the keys of a Trie.\nIterator over the values of a Trie.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")