searchState.loadedDescShard("k", 0, "<code>k</code>: Kinematics library for rust-lang\nKinematic Chain using <code>Node</code>\nA bundle of flags determining which coordinates are …\nThe reason of joint error\nIK solver\nInverse Kinematics Solver using Jacobian matrix\nError about mimic\nFailed to set joint angle because the input is out of …\nKinematic chain without any branch.\nGave invalid size of vec as input\nIf the angle distance is smaller than this value, it is …\nIf the distance is smaller than this value, it is reached.\nCalculate the center of mass of the chain\nClear the null function which is set by …\nset parents easily\nUtility function to create nullspace function using …\nInitialize with all true\nCalculate the degree of freedom\nCalculate transform of the end joint\nFind the joint by name\nFind the joint by link name\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate <code>Chain</code> from end joint. It has any branches.\nCreate SerialChain from the end <code>Node</code>\nCreate <code>Chain</code> from end node and root node, without any …\nCreate SerialChain from the end <code>Node</code> and root <code>Node</code>.\nCreate <code>Chain</code> from nodes.\nCreate Chain from root joint\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate for all joint nodes\nIterate for movable joints\nIterate for links\nIterators to iterate descendants and ancestors\nCalculate Jacobian of the serial chain (manipulator).\nmultiplier for jacobian\nJoint related structs\nGet the positions of the joints\n<code>link</code> can be used to show the shape of the robot, or …\nCreate instance of <code>JacobianIkSolver</code>.\nConvert Chain into SerialChain without any check\ngraph structure for kinematic chain\nHow many times the joints are tried to be moved\nGet the <code>Chain</code>’s origin\ntrue means the constraint is used. The coordinates is the …\nLoad basic traits of <code>k</code>\nSet the positions of the joints\nSet the clamped positions of the joints\nFast, but without check, dangerous <code>set_joint_positions</code>\nSet a null space function for redundant manipulator.\nSet the <code>Chain</code>’s origin\nMove the end transform of the <code>arm</code> to <code>target_pose</code>\nMove the end transform of the <code>arm</code> to <code>target_pose</code>\nSet joint positions of <code>arm</code> to reach the <code>target_pose</code>\nMove the end transform of the <code>arm</code> to <code>target_pose</code> with …\nSet joint positions of <code>arm</code> to reach the <code>target_pose</code> with …\nConvert Chain into SerialChain\nSafely unwrap and returns inner <code>Chain</code> instance\nUpdate transforms of the links\nUpdate world_transform() of the joints\nUpdate world_velocity() of the joints\nLoad URDF format and create <code>k::Chain</code>\ntried to copy from <code>from</code>\nsize of input\nname of the joint\nname of the joint\nmax limit\nmin limit\ntarget position\nrequired size\ntried to copy to <code>to</code>\nIterator for parents\nIterator for children\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFixed joint. It has no <code>joint_position</code> and axis.\nJoint with type\nType of Joint, <code>Fixed</code>, <code>Rotational</code>, <code>Linear</code> is supported now\nLinear joint. position is length\nInformation for copying joint state of other joint\nmin/max range to check the joint position\nRotational joint around axis. It has an position <code>[rad]</code>.\nClamp the value with the range\nClear caches defined in the world coordinate\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExamples\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the value is in the range\nReturns the position (angle)\nType of this joint\nReturns the velocity\nLimits of this joint\nCalculate and returns the transform of the end of this …\nCalculate the mimic joint position\nName of this joint\nCreate new Joint with name and type\nCreate new instance of Mimic\nCreate new Range instance\nSet the position of the joint\nSet the clamped position of the joint\nGet the result of forward kinematics\naxis of the joint\naxis of the joint\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParts of <code>Chain</code>\nBuild a <code>Link&lt;T&gt;</code>\nNode for joint tree struct\nCreate <code>Joint</code> instance\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate <code>Node</code> instead of <code>Joint</code> as output\nExamples\nExamples\niter from the end to root, it contains <code>nodes[id]</code> itself\niter to the end, it contains <code>nodes[id]</code> itself\nSet the joint which is connected to this link\nSet joint limits\nSet the name of the <code>Link</code>\nGet the origin transform of the joint\nSet the origin transform of this joint\nRemove parent and child relations at same time\nSet the rotation of the origin transform of this joint\nSet the position (angle) of the joint\nSet the clamped position (angle) of the joint\nSet the origin transform of the joint\nSet parent and child relations at same time\nSet the translation of the origin transform of this joint\nGet the calculated world transform. Call …\nIK solver\nMove the end transform of the <code>arm</code> to <code>target_pose</code>\nMove the end transform of the <code>arm</code> to <code>target_pose</code> with …\nUseful function to deal about ‘Links’ of URDF\nReturns nalgebra::UnitQuaternion from f64 array\nReturns nalgebra::Translation3 from f64 array")