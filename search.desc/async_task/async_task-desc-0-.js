searchState.loadedDescShard("async_task", 0, "Task abstraction for building executors.\nA builder that creates a new task.\nA spawned task with a fallible response.\nA handle to a runnable task.\nThe trait for scheduling functions.\nExtra scheduling information that can be passed to the …\nA spawned task.\nPass a scheduling function with more scheduling …\nCancels the task and waits for it to stop running.\nCancels the task and waits for it to stop running.\nDetaches the task to let it keep running in the background.\nDetaches the task to let it keep running in the background.\nConverts this task into a <code>FallibleTask</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a raw pointer into a Runnable.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this task into a raw pointer.\nReturns <code>true</code> if the current task is finished.\nReturns <code>true</code> if the current task is finished.\nGet the metadata associated with this task.\nGet the metadata associated with this task.\nAdds metadata to the task.\nCreates a new task builder.\nPropagates panics that occur in the task.\nRuns the task by polling its future.\nThe actual scheduling procedure.\nSchedules the task.\nCreates a new task.\nCreates a new task.\nCreates a new thread-local task.\nCreates a new thread-local task.\nCreates a new task without <code>Send</code>, <code>Sync</code>, and <code>&#39;static</code> bounds.\nCreates a new task without <code>Send</code>, <code>Sync</code>, and <code>&#39;static</code> bounds.\nReturns a waker associated with this task.\nIndicates whether the task gets woken up while running.")