searchState.loadedDescShard("const_panic", 0, "For panicking with formatting in const contexts.\nA <code>PanicVal</code> that formats to nothing.\nThe maximum length of panic messages (in bytes), after …\nAn opaque enum of the values that this crate knows how to …\nA wrapper type used to define methods for std types.\nCoerces <code>$reff</code> to a type that has a <code>to_panicvals</code> method, …\nAsserts that <code>$condition</code> is true.\nPanics by concatenating the argument slice.\nPanics with the concanenation of the arguments.\nCoerces a <code>&amp;[PanicVal&lt;&#39;_&gt;; N]</code> into a <code>&amp;[PanicVal&lt;&#39;_&gt;]</code>\nCoerces a <code>&amp;&amp;[PanicVal&lt;&#39;_&gt;]</code> into a <code>&amp;[PanicVal&lt;&#39;_&gt;]</code>\nCoerces a <code>&amp;&amp;[PanicVal&lt;&#39;_&gt;; N]</code> into a <code>&amp;[PanicVal&lt;&#39;_&gt;]</code>\nFormatting-related items\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>PanicVal</code> from a <code>bool</code> .\nConstructs a <code>PanicVal</code> from a <code>char</code>.\nConstructs this <code>PanicVal</code> from an integer.\nConstructs this <code>PanicVal</code> from an integer.\nConstructs this <code>PanicVal</code> from an integer.\nConstructs this <code>PanicVal</code> from an integer.\nConstructs this <code>PanicVal</code> from an integer.\nConstructs this <code>PanicVal</code> from an integer.\nConstructs a <code>PanicVal</code> from a <code>&amp;str</code>\nConstructs this <code>PanicVal</code> from an integer.\nConstructs this <code>PanicVal</code> from an integer.\nConstructs this <code>PanicVal</code> from an integer.\nConstructs this <code>PanicVal</code> from an integer.\nConstructs this <code>PanicVal</code> from an integer.\nConstructs this <code>PanicVal</code> from an integer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow many spaces are printed before this\nHow many spaces are printed after this\nReturns a copy of this <code>PanicVal</code>.\nConverts this <code>u16</code> to a <code>PanicVal</code>.\nConverts this <code>u32</code> to a <code>PanicVal</code>.\nConverts this <code>i32</code> to a <code>PanicVal</code>.\nConverts this <code>usize</code> to a <code>PanicVal</code>.\nConverts this <code>u128</code> to a <code>PanicVal</code>.\nConverts this <code>i64</code> to a <code>PanicVal</code>.\nFormats this <code>&amp;str</code> into a <code>PanicVal</code>\nConverts this <code>u8</code> to a <code>PanicVal</code>.\nConverts this <code>i128</code> to a <code>PanicVal</code>.\nConverts this <code>i8</code> to a <code>PanicVal</code>.\nConverts this <code>isize</code> to a <code>PanicVal</code>.\nConverts this <code>i16</code> to a <code>PanicVal</code>.\nFormats this <code>bool</code> into a <code>PanicVal</code>\nConverts this <code>u64</code> to a <code>PanicVal</code>.\nConverts this <code>char</code> to a <code>PanicVal</code>.\nWraps this <code>PanicVal</code> in a single-element array.\nFormats this <code>&amp;str</code> into a single-<code>PanicVal</code> array\nConverts this <code>i8</code> to a single-element <code>PanicVal</code> array.\nConverts this <code>u128</code> to a single-element <code>PanicVal</code> array.\nConverts this <code>char</code> to a single-element <code>PanicVal</code> array.\nConverts this <code>i32</code> to a single-element <code>PanicVal</code> array.\nConverts this <code>u64</code> to a single-element <code>PanicVal</code> array.\nConverts this <code>usize</code> to a single-element <code>PanicVal</code> array.\nConverts this <code>u32</code> to a single-element <code>PanicVal</code> array.\nConverts this <code>i16</code> to a single-element <code>PanicVal</code> array.\nConverts this <code>u16</code> to a single-element <code>PanicVal</code> array.\nFormats this <code>bool</code> into a single-<code>PanicVal</code> array\nConverts this <code>isize</code> to a single-element <code>PanicVal</code> array.\nConverts this <code>u8</code> to a single-element <code>PanicVal</code> array.\nConverts this <code>i128</code> to a single-element <code>PanicVal</code> array.\nConverts this <code>i64</code> to a single-element <code>PanicVal</code> array.\nGets the value in the <code>Err</code> variant.\nGets the value in the <code>Ok</code> variant.\nGets the value in the <code>Some</code> variant.\nUtility functions\nSets the amount of spaces printed before this to …\nSets the amount of spaces printed after this to …\nConstructs a PanicVal which outputs the contents of <code>string</code> …\nA <code>FmtArg</code> with alternate <code>Debug</code> and <code>Binary</code> formatting, …\nA <code>FmtArg</code> with alternate <code>Debug</code> formatting, starting with no …\nA <code>FmtArg</code> with alternate <code>Display</code> formatting, starting with …\nA <code>FmtArg</code> with alternate <code>Debug</code> and <code>Hexadecimal</code> formatting, …\nA <code>FmtArg</code> with <code>Debug</code> and <code>Binary</code> formatting and no …\nFormatted as binary, eg: <code>101</code>, <code>0b110</code>.\nComputes the type that the <code>T</code> argument is converted into by …\nComputes the type that the <code>T</code> argument is converted into by …\nThe type that the <code>T</code> argument is converted into.\nA <code>FmtArg</code> with <code>Debug</code> formatting and no indentation.\nA <code>FmtArg</code> with no indentation and <code>Display</code> formatting.\n<code>Debug</code> formatting\nFormatted as decimal.\n<code>Display</code> formatting\nCarries all of the configuration for formatting functions.\nWhat kind of formatting to do, either <code>Display</code> or <code>Debug</code>.\nA <code>FmtArg</code> with <code>Debug</code> and <code>Hexadecimal</code> formatting and no …\nFormatted as hexadecimal, eg: <code>FAD</code>, <code>0xDE</code>.\nMarker type used as the <code>PanicFmt::Kind</code> for user-defined …\nA marker type that proves that <code>S</code> implements …\nMarker type used as the <code>PanicFmt::Kind</code> associated type for …\nWhether this is a user-defined type or standard library …\nConstucts an <code>IsPanicFmt</code>\nWhat integers are formatted as.\nA marker type that proves that <code>Self</code> implements <code>PanicFmt</code>.\nThe length of the array returned in <code>Self::to_panicvals</code> (an …\nTrait for types that can be formatted by const panics.\nThe type after dereferencing all references.\n<code>char</code>-formatted related items\nFor coercing <code>&amp;T</code> to <code>StdWrapper&lt;&amp;T&gt;</code>.\nWhether this is intended to be <code>Display</code> or <code>Debug</code> formatted.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHow much indentation is needed for a field/array element.\nInfers the <code>S</code> type parameter with the argument.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether alternate formatting is being used.\nWhat integers are formatted as: decimal, hexadecimal, or …\nSets whether alternate formatting is enabled\nChanges the formatting to <code>Debug</code>, and number formatting to …\nChanges the formatting to <code>Debug</code>.\nChanges the formatting to <code>Display</code>.\nChanges the formatting to <code>Debug</code>, and number formatting to …\nAn byte slice with a display/debug formatted <code>char</code>.\nDebug formats a <code>char</code>\nDisplay formats a <code>char</code>\nArray which contains the display/debug-formatted  <code>char</code>, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe length of the subslice that contains the formatted …\nConst equivalent of <code>&amp;buffer[..upto]</code> with saturating …\nComputes the maximum of <code>l</code> and <code>r</code>\nComputes the minimum of <code>l</code> and <code>r</code>")