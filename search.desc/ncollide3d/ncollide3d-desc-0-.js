searchState.loadedDescShard("ncollide3d", 0, "ncollide\nBounding volumes.\nInterpolation of the motion of an object.\nCompilation flags dependent aliases for mathematical types.\nSpatial partitioning tools.\nPersistent and time-coherent collision detection.\nProcedural mesh generation.\nNon-persistent geometric queries.\nCollision shapes supported by ncollide.\nTransformation, simplification and decomposition of meshes.\nVarious unsorted geometrical and logical operators.\nAn Axis Aligned Bounding Box.\nA Bounding Sphere.\nTrait of bounding volumes.\nA cone with a circular basis and its apex at the origin.\nAn empty cone containing only the zero vector.\nA cone which is the whole space.\nTraits of objects having a bounding volume.\nThe combination of an AABB with a circular cone to bound …\nAll the vectors emanating from the origin, with a maximal …\nComputes the axis-aligned bounding box of a shape <code>g</code> …\nAn AABB bounding the space occupied by a geometry.\nComputes the Axis-Aligned Bounding Box of a ball …\nComputes the bounding sphere of a shape <code>g</code> transformed by <code>m</code>.\nThe smallest bounding sphere containing this AABB.\nThe bounding volume of <code>self</code> transformed by <code>m</code>.\nReturns a point inside of this bounding volume. This is …\nThe center of this AABB.\nThe bounding sphere center.\nComputes the intersection segment between a line and this …\nComputes the parameters of the two intersection points …\nComputes the intersection segment between a ray and this …\nComputes the parameters of the two intersection points …\nChecks if this bounding volume contains another one.\nReturns <code>true</code> if this cone contains <code>other</code>.\nTests if this circular cone, extended to be a double cone, …\nThe extents of this AABB.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new AABB from its center and its half-extents.\nCreates a new AABB from a set of points.\nCreates a circular cone from a set of vectors.\nThe half extents of this AABB.\nChecks if this bounding volume intersect with another one.\nReturns <code>true</code> if this cone intersects <code>other</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this cone is empty.\nComputes the axis-aligned bounding box of a shape <code>g</code>.\nComputes the bounding sphere of a shape <code>g</code>.\nThe bounding volume of <code>self</code>.\nComputes the AABB of a set of points.\nComputes the AABB of an support mapped shape.\nEnlarges this bounding volume.\nCreates a new, enlarged version, of this bounding volume.\nReference to the AABB point with the biggest components …\nMerges this bounding volume with another one. The merge is …\nMerges this cone with <code>other</code> in-place.\nMerges this bounding volume with another one.\nMerges this cone with <code>other</code>.\nReference to the AABB point with the smallest components …\nCreates a new AABB.\nCreates a new bounding sphere.\nCreates an invalid AABB with <code>mins</code> components set to …\nA circular cone bounding the normals of a geometry.\nComputes the AABB of a set of points transformed by <code>m</code>.\nComputes a bounding sphere of the specified set of point.\nComputes the bounding sphere of a set of point, given its …\nEnlarge this cone so it contains <code>dir</code> too.\nThe bounding sphere radius.\nComputes the AABB of an support mapped shape.\nEnlarges this AABB so it also contains the point <code>pt</code>.\nTighten this bounding volume.\nCreates a new, tightened version, of this bounding volume.\nComputes the AABB bounding <code>self</code> transformed by <code>m</code>.\nTransforms this bounding sphere by <code>m</code>.\nHalf of the cone apex angle, i.e., the largest angle …\nThe cone axis.\nA linear motion from a starting isometry traveling at …\nA linear motion from a starting isometry traveling at …\nInterpolation between two isometries using LERP for the …\nA continuous rigid motion.\nTrait for composing some rigid motions.\nThe angular velocity of this motion.\nThe transformation at <code>t = 1.0</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe translational velocity of this motion.\nThe local-space point at which the rotational part of this …\nInitialize a lerp-slerp interpolation with the given start …\nInitialize a linear motion from a starting isometry and a …\nInitialize a motion from a starting isometry and linear …\nGet a position at the time <code>t</code>.\nPrepend a transformation to the rigid motion <code>self</code>.\nPrepend a transformation to the rigid motion <code>self</code>.\nPrepend a translation to the rigid motion <code>self</code>.\nPrepend a translation to the rigid motion <code>self</code>.\nThe transformation at <code>t = 0.0</code>.\nThe starting isometry at <code>t = self.t0</code>.\nThe starting isometry at <code>t = self.t0</code>.\nThe time at which this parametrization begins. Can be …\nThe time at which this parametrization begins. Can be …\nThe translational velocity of this motion.\nThe dimension of the rotations.\nThe angular vector type.\nThe dimension of the space.\nThe dimension of the ambient space.\nThe transformation matrix type.\nThe matrix type.\nThe orientation type.\nThe point type.\nThe rotation matrix type.\nThe dimension of a spatial vector.\nThe vector type with dimension <code>SpatialDim × 1</code>.\nThe translation type.\nThe vector type.\nThe coordinates of this point, i.e., the shift from the …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe pure rotational part of this isometry.\nThe pure translational part of this isometry.\nThe translation coordinates, i.e., how much is added to a …\nTrait implemented by Bounding Volume Hierarchy.\nAn enum grouping references to all the BVH implementations …\nA Bounding Volume Tree.\nA static binary bounding volume tree.\nThe identifier of a BVT node.\nThe next action to be taken by a BVH traversal algorithm …\nTrait implemented by cost functions used by the best-first …\nResult of a binary partition.\nThe traversal should continue on the children of the …\nThe traversal continues recursively, associating the given …\nA bounding volume hierarchy on which objects can be added …\nA dynamic binary bounding volume tree.\nLeaf of a Dynamic Bounding Volume Tree.\nThe unique identifier of a DBVT leaf.\nThe identifier of a node of the DBVT.\nThe traversal should exit immediately.\nThe traversal aborts.\nIdentifier of an internal node.\nId of an internal node.\nIdentifier of a leaf node.\nId of a leaf.\nType of a node identifiers on this BVH.\nResult of the partitioning of one element.\nResult of the partitioning of several elements.\nThe result of a best-first traversal.\nTrait implemented by visitor called during a simultaneous …\nThe traversal should not be executed on the children of …\nThe traversal does not continue recursively on the visited …\nThe status of the spatial partitioning structure traversal.\nTrait implemented by visitor called during the traversal …\nPerforms a best-first-search on the BVH.\nPerforms a best-first-search on the BVH.\nPerforms a best-fist-search on the tree.\nThe bounding volume of this node.\nThe center of this node bounding volume.\nThe i-th child of the given node.\nThe bounding volume and data contained by the given node.\nAn user-defined data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuilds a bounding volume tree using the specified …\nGets the given leaf if it exists.\nInserts a leaf into this DBVT.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether this DBVT empty.\nCheckis if this identifier is invalid.\nReturns <code>true</code> if this leaf is the root of the tree, or if …\nReferenceto the i-th leaf of this BVT.\nThe set of leaves on this BVT.\nConstruction function for a kdree to be used with …\nConstruction function for a kdree to be used with …\nCreates a new empty dynamic bonding volume hierarchy.\nCreates a new DBVT leaf from its bounding volume and …\nCreates a balanced <code>BVT</code>.\nCreates an invalid identifier.\nBuilds a bounding volume tree using the specified …\nThe number of children of the given node.\nRefits the bounding volumes so that all node of the BVT …\nRemoves a leaf from this DBVT.\nThe root of the BVH.\nReference to the bounding volume of the tree root.\nThe bounding volume of the root of this DBVT.\nSet the bounding volume of the i-th leaf.\nGets the underlying reference to a BVT, or panics if this …\nGets the underlying reference to a DBVT, or panics if this …\nExecute an operation on the content of a node of the …\nExecute an operation on the content of two nodes, one from …\nCompute the next action to be taken by the …\nTraverses this BVH using a visitor.\nTraverses this BVH using a visitor.\nTraverses this tree using a visitor.\nVisits the bounding volume test tree implicitly formed …\nVisits the bounding volume test tree implicitly formed …\nVisits the bounding volume traversal tree implicitly …\nThe cost associated to this node.\nThe result, if any, associated to this cost.\nBroad phases.\nGlue code between each part of the collision-detection …\nPersistent collision detection algorithms to compute …\nDefinition of collision objects and some of their …\nHigh level API to detect collisions in large, complex …\nTrait all broad phase must implement.\nProximity handling for BroadPhase updates.\nA signal handler for contact detection.\nBroad phase based on a Dynamic Bounding Volume Tree.\nTells the broad phase to add a bounding-volume at the next …\nForces the broad-phase to recompute and re-report all the …\nForces the broad-phase to recompute and re-report all the …\nSets the next bounding volume to be used during the update …\nReturns the first object that interferes with a ray.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle a starting interference.\nHandle a stopping interference.\nCollects every object which might intersect a given …\nCollects every object which might contain a given point.\nCollects every object which might intersect a given ray.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA pre-filter that may cheaply discard objects before …\nActivate an action for when two objects start or stop to …\nCreates a new broad phase based on a Dynamic Bounding …\nNumber of interferences detected by this broad phase.\nRetrieves the bounding volume and data associated to the …\nRetrieves the bounding volume and data associated to the …\nTells the broad phase to remove the given set of handles.\nUpdates the object additions, removals, and interferences …\nReturn structure for <code>first_interference_with_ray</code>\nIterator through all the objects on the world which …\nIterator through all the objects on the world that …\nIterator through all the objects on the world that …\nReference to the object the ray collided with.\nRegisters a collision object handle so it can be taken …\nAllocate a default broad-phase, configured with a default …\nAllocate a default interaction graph.\nAllocate a default narrow-phase, configured with the …\nReturns an the closest collision object intersecting with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle to the object the ray collided with.\nIntersection details\nReturns an iterator yielding all the collision objects …\nReturns an iterator yielding all the collision objects …\nReturns an iterator yielding all the collision objects …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerforms the broad-phase and the narrow-phase.\nPerforms the broad-phase.\nPerforms the narrow-phase.\nFree all the resources allocated by the broad-phase and …\nCollision detector between two balls.\nProximity detector between two balls.\nCollision detector between two balls.\nCollision detector between a concave shape and another …\nCollision detector between a concave shape and another …\nIndex of a node of the interaction graph.\nCollision detector between a concave shape and another …\nCollision detector between a concave shape and another …\nProximity detector between a concave shape and another …\nA potential contact between two collision objects.\nEvents occuring when two collision objects start or stop …\nA set of contact events.\nAn algorithm to compute contact points, normals and …\nCollision dispatcher for shapes defined by …\nProximity dispatcher for shapes defined by …\nA set of events.\nCollision detector between an heightfield and another …\nAn interaction between two collision objects.\nA graph where nodes are collision objects and edges are …\nCollision detector dispatcher for collision objects.\nCollision detector between g1 plane and g1 shape …\nCollision detector between g1 plane and g1 shape …\nProximity detector between a plane and a shape …\nA proximity between two collision objects.\nTrait implemented by algorithms that determine if two …\nEvents occuring when two collision objects start or stop …\nA set of proximity events.\nEvent occuring when two collision objects start being in …\nEvent occuring when two collision objects stop being in …\nProximity detector between a plane and a shape …\nPersistent proximity detector between two shapes having a …\nTemporary index to and edge of the interaction graph.\nCollision detector between a concave shape and another …\nAdds a handle to this graph.\nEmpties this set of events.\nClear the events generated by this narrow-phase.\nThe first collider to which the proximity event applies.\nThe second collider to which the proximity event applies.\nAll the collision object handles of collision objects in …\nAll the collision object handles of collision objects in …\nAll the collision object handles of collision objects …\nThe set of contact events generated by this narrow-phase.\nThe contact pair between the two collision objects …\nAll the contact pairs on this graph.\nAll the contact pairs involving the collision object with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRuns the collision detection on two objects. It is assumed …\nAllocate a collision algorithm corresponding to a pair of …\nAllocate a collision algorithm corresponding to the given …\nHandles a pair of collision objects detected as either …\nGets the interaction with the given index.\nGenerate an empty contact manifold configured as required …\nThe interaction between the two collision objects …\nThe interaction between the two collision objects …\nAll the interactions pairs on this graph.\nAll the interaction involving the collision object with …\nAll the mutable references to interactions involving the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if this interaction is a potential contact …\nChecks if this interaction is a potential proximity …\nIterates through all events contained on this set in a …\nThe number of events on this pool.\nCreates a new collision detector between a concave shape …\nCreates a new collision detector between a concave shape …\nCreates a new collision detector between a concave shape …\nCreates a new collision detector between a concave shape …\nCreates a new basic collision dispatcher.\nCreates a new collision detector between an heightfield …\nCreates a new collision detector between a concave shape …\nCreates a new empty set of events.\nCreates a new empty collection of collision objects.\nCreates a new <code>NarrowPhase</code>.\nCreates a new persistent collision detector between two …\nCreates a new proximity detector between a concave shape …\nCreates a new basic proximity dispatcher.\nCreates a new persistent collision detector between two …\nCreates a new persistent collision detector between two …\nCreates g1 new persistent collision detector between g1 …\nCreates g1 new persistent collision detector between g1 …\nInstantiates a new proximity event.\nCreates a new persistent proximity detector between a …\nCreates a new persistent proximity detector between a …\nCreates a new persistant proximity detector between two …\nThe new state of proximity between the two collision …\nThe previous state of proximity between the two collision …\nAll the proximity pairs involving the collision object …\nThe set of proximity events generated by this narrow-phase.\nThe proximity pair between the two collision objects …\nThe proximity pair between the two collision objects …\nAll the proximity pairs on this graph.\nAdds the given event at the end of this set.\nRemoves a handle from this graph and returns a handle that …\nRemoves from this set all events for which <code>filter</code> returns …\nRuns the proximity detection on two objects. It is assumed …\nUpdates the narrow-phase by actually computing contact …\nUpdate the specified contact manifold between two …\nUpdate the specified interaction between two collision …\nUpdate the specified proximity between two collision …\nIndicate that the collision object’s collision group …\nGroups of collision used to filter which object interact …\nA collision filter based collision groups.\nA stand-alone object that has a position and a shape.\nType of the collision object stored into this set.\nTrait implemented by a handle indentifying a collision …\nType of the handles identifying collision objects.\nTrait implemented by collision objects.\nTrait implemented by sets of collision objects.\nA set of collision objects that can be indexed by …\nThe unique identifier of a collision object stored in a …\nFlags indicating what changed in a collision object since …\nAn iterator yielding references to collision objects.\nThis objects can respond to both contact point computation …\nThe kind of query a CollisionObject may be involved on.\nIndicate that the collision object’s position changed.\nIndicate that the collision object’s predicted position …\nThis object can respond to proximity tests only.\nIndicate that the collision object’s geometric query …\nIndicate that the collision object’s shape changed.\nadds this entity to this entity blacklist by a mask of …\nadds this entity to the given group by a mask of bits …\nadds this entity to this entity whitelist by a mask of …\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nTests whether interactions with a given group is possible.\nTests whether two collision groups have at least one group …\nTests whether self-interaction is enabled.\nReturn the number of values the slab can store without …\nClears the update flags of this collision object.\nThe collision groups of this collision object.\nThe collision groups of the collision object.\nGets the collision object identified by the given <code>handle</code>.\nReturns the complement of this set of flags.\nComputes the AABB of this collision object, ignoring …\nComputes the AABB of this collision object, ignoring …\nComputes the swept AABB of this collision object, taking …\nComputes the swept AABB of this collision object, taking …\nGiven two contact query types, returns the corresponding …\nReturns <code>true</code> if the specified handle identifies a …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nCopies the blacklist of another collision groups.\nCopies the membership of another collision groups.\nCopies the whitelist of another collision groups.\nReference to the user-defined data associated to this …\nMutable reference to the user-defined data associated to …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nPrevents the object from interacting with itself.\nCreates a new <code>CollisionGroups</code> that disables interactions …\nReturns an empty set of flags.\nAllows the object to interact with itself.\nApplies a closure to every collision object (and their …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nIf it exists, retrieves a reference to the collision …\nIf it exists, retrieves a mutable reference to the …\nIf they exists, retrieves a mutable reference to the two …\nThe interaction graph index of this collision object, if …\nThe collision object non-stable graph index.\nInserts a new collision object into this collection and …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if this is a contacts query type.\nReturns <code>true</code> if no flags are currently stored.\nTests if the given group is blacklisted.\nTests if the given group is whitelisted.\nTests if this entity is part of the given group.\nReturns <code>true</code> if this is a proximity query type.\nRetrieves an iterator yielding references to each …\nRetrieves an iterator yielding references to each …\nThe number of collision objects on this slab.\nThe maximum allowed group identifier.\nAdds or removes this entity from the given group.\nAdds or removes this entity from the given group.\nAdds or removes the given group from this entity whitelist.\nChecks if the collision object has been changed in a way …\nChecks if the collision object has been changed in a way …\nChecks if the collision object has been changed in a way …\nChecks if the collision object has been changed in a way …\nCreates a new collision filter based collision groups.\nCreates a new collision object.\nCreates a new empty collection of collision objects.\nCreates a new <code>CollisionGroups</code> that enables interactions …\nReturns the complement of this set of flags.\nThe position of this collision object.\nThe collision object position.\nThe expected position of this collision object in the next …\nThe predicted collision object position.\nThe broad-phase proxy handle of this collision object, if …\nThe collision object’s broad phase proxy unique …\nThe numerical distance limit of relevance for this query.\nThe type of geometric queries this collision object is …\nThe kind of queries this collision object is expected to .\nRemoves from this collection the collision object …\nRemoves the specified flags in-place.\nremove this entity from this entity blacklist by a mask of …\nremoves this entity from the given group by a mask of bits …\nremove this entity from this entity whitelist by a mask of …\nReserve capacity for at least <code>additional</code> more values to be …\nReserve the minimum capacity required to store exactly …\nInserts or removes the specified flags depending on the …\nBlacklists the given groups only (others will be …\nSets the collision groups of this collision object.\nDeforms the underlying shape if possible.\nSets the collision object unique but non-stable graph …\nMake this object member of the given groups only.\nSets the position of the collision object and resets the …\nSets the position of the collision object and resets the …\nSets the predicted position of the collision object.\nSet collision object’s broad phase proxy unique …\nSets the <code>GeometricQueryType</code> of the collision object. Use …\nSet the collision object shape.\nWhitelists the given groups only (others will be …\nThe shape of this collision object.\nThe collision object shape.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nThe unique identifier corresponding to this handle.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nFlags indicating what changed in this collision object.\nMutable reference to this collision object’s update …\nReturns a copy of this object, updated with a new set of …\nReplaces the blacklist with a mask of bits where each bit …\nConstructs a new empty collection with the specified …\nReturns a copy of this object, updated with a new set of …\nReplaces the membership with a mask of bits where each bit …\nReturns a copy of this object, updated with a new set of …\nReplaces the whitelist with a mask of bits where each bit …\nType of the broad phase trait-object used by the collision …\nA world that handles collision objects.\nAdds a collision object to the world.\nThe broad phase used by this collision world.\nThe broad-phase aabb for the given collision object.\nEmpty the contact and proximity event pools.\nReturns a reference to the collision object identified by …\nReturns a mutable reference to a pair collision object …\nIterates through all collision objects.\nAll the collision object handles of collision objects in …\nAll the collision object handles of collision objects in …\nAll the collision object handles of collision objects …\nThe contact events pool.\nThe potential contact pair between the two specified …\nAll the potential contact pairs.\nAll the contact pairs involving the specified collision …\nComputes the first interference with <code>ray</code> and\nReturns the argument unchanged.\nReturns a mutable reference to the collision object …\nThe potential interaction pair between the two specified …\nAll the potential interactions pairs.\nThe graph of interactions detected so far.\nAll the interaction pairs involving the specified …\nAll the mutable interactions pairs involving the specified …\nComputes the interferences between every rigid bodies of a …\nComputes the interferences between every rigid bodies of a …\nComputes the interferences between every rigid bodies on …\nCalls <code>U::from(self)</code>.\nThe narrow-phase used by this collision world.\nCreates a new collision world.\nThe set of objects on this collision world.\nA user-defined broad-phase pair filter.\nExecutes the broad phase of the collision detection …\nExecutes the narrow phase of the collision detection …\nAll the proximity pairs involving the specified collision …\nThe proximity events pool.\nThe potential proximity pair between the two specified …\nAll the potential proximity pairs.\nRemoved the specified set of collision objects from the …\nSets the user-defined filter that tells if a potential …\nSets the collision groups of the given collision object.\nApply the given deformations to the specified object.\nCustomize the selection of narrowphase collision detection …\nSets the position of the collision object attached to the …\nSets the <code>GeometricQueryType</code> of the collision object.\nSets the shape of the given collision object.\nReturns all objects in the collision world that intersect …\nThe Time of Impact dispatcher used.\nUpdates the collision world.\nDifferent representations of the index buffer.\nThe vertex, normal, and uvs have different indices.\nGeometric description of a mesh.\nThe vertex, normal, and uvs share the same indices.\nGiven a set of control points, generates a (non-rational) …\nGiven a set of control points, generates a (non-rational) …\nGenerates a capsule.\nGenerates a cone with a given height and diameter.\nCoordinates of the mesh vertices.\nGenerates a cuboid shape with a split index buffer.\nGenerates a cylinder with a given height and diameter.\nReturns only the vertex ids from the index buffer.\nFlips all the normals of this mesh.\nFlips the orientation of every triangle of this mesh.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether or not this triangle mesh has normals.\nWhether or not this triangle mesh has texture coordinates.\nIndex buffer of the mesh.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>TriMesh</code>.\nCoordinates of the mesh normals.\nThe number of triangles on this mesh.\nPath generation.\nAdds a double-sided quad to the scene.\nAdds a double-sided quad with the specified grid of …\nRecomputes the mesh normals using its vertex coordinates …\nUnifies the index buffer and ensure duplicate each vertex …\nScales each vertex of this mesh.\nScales each vertex of this mesh.\nGenerates a UV sphere.\nForces the mesh to use a different index for the vertices, …\nTransforms each vertex and rotates each normal of this …\nTranslates each vertex of this mesh.\nForce the mesh to use the same index for vertices, normals …\nGenerates a cone with unit height and diameter.\nGenerates a cuboid shape with a split index buffer.\nGenerates a cylinder with unit height and diameter.\nCreates an hemisphere with a diameter of 1.\nAdds a double-sided quad with unit size to the scene.\nGenerates a UV sphere centered at the origin and with a …\nReturns the split index buffer data or fails.\nReturns the unified index buffer data or fails.\nUtilities useful for various generations tasks.\nTextures coordinates of the mesh.\nA cap that looks like an arrow.\nA curve sampler.\nUsed when the sampler does not have any other points to …\nA point that ends the path currently generated.\nA point that is inside of the path currently generated.\nA cap that renders nothing.\nA sample point and its associated tangent.\nTrait to be implemented by caps compatible with a …\nA path with its sample points given by a polyline.\nA pattern composed of polyline and two caps.\nA point that starts a new path.\nA pattern that is replicated along a path.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates the mesh for the cap at the end of a path.\nGenerates the mesh for the cap at the beginning of a path.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a cap that looks like an arrow.\nCreates a new <code>NoCap</code>.\nCreates a new polyline-based path.\nCreates a new polyline pattern.\nReturns the next sample point.\nGenerates the mesh using this pattern and the curve …\nComputes the normals of a set of vertices.\nPushes a discretized counterclockwise circle to a buffer.\nCreates the faces from a circle and a point that is shared …\nCreates the faces from a circle and a point that is shared …\nPushes indices so that a circle is filled with triangles. …\nCreates the faces from two circles with the same …\nGiven four corner points, pushes to two counterclockwise …\nCreates the faces from two circles with the same …\nPushes a discretized counterclockwise circle to a buffer. …\nReverses the clockwising of a set of faces.\nDuplicates the indices of each triangle on the given index …\nDuplicates the indices of each triangle on the given index …\nThe composition of two dispatchers\nClosest points information.\nGeometric description of a contact.\nA contact identifier which is unique within a contact …\nLocal contact kinematic of a pair of solids around two …\nA contact manifold.\nThe prediction parameters for contact determination.\nPre-process a contact before it is added to a contact …\nThe technique used for contact tracking.\nThe TOI algorithm converged successfully.\nA dispatcher that exposes built-in queries\nThe two objects are non-intersecting and further than a …\nThe two objects are non-intersecting and further than a …\nContact tracking using distances. Two contacts are …\nSomething went wrong during the TOI computation, likely …\nContact tracking using features. Two contacts are …\nThe two objects are intersecting.\nThe two objects are intersecting.\nA line approximation.\nThe approximation of a shape on the neighborhood of a …\nAdditional shape-specific projection information\nA shape geometry type at the neighborhood of a point.\nThe TOI algorithm ran out of iterations before achieving …\nThe two shape already overlap at the time 0.\nA planar approximation.\nA punctual approximation.\nDescription of the projection of a point on a shape.\nTrait of objects that can be tested for point inclusion …\nReturns shape-specific info in addition to generic …\nProximity information.\nA Ray.\nTraits of objects which can be transformed and tested for …\nStructure containing the result of a successful ray cast.\nThe result of a time-of-impact (TOI) computation.\nDispatcher for time-of-impact queries\nThe status of the time-of-impact computation algorithm.\nA contact combined with contact kinematic information as …\nError indicating that a query is not supported between …\nThe two objects are non-intersecting but closer than a …\nThe two objects are non-intersecting but closer than a …\nAlgorithms needed for distance and penetration depth …\nThe angular regularization for the first solid.\nThe angular regularization for the second solid.\nThe local approximation of the first shape.\nThe local approximation of the first shape.\nThe local approximation of the first shape.\nThe local approximation of the second shape.\nConstruct a <code>TOIDispatcher</code> that falls back on <code>other</code> for …\nConstruct a <code>TOIDispatcher</code> that falls back on <code>other</code> for …\nEmpty the manifold as well as its cache.\nComputes the pair of closest points between two shapes.\nProximity between balls.\nClosest points between a composite shape and any other …\nClosest points between two segments.\nClosest points between two lines.\nClosest points between two lines with a custom tolerance …\nClosest points between a plane and a support-mapped shape …\nClosest points between segments.\nClosest points between two segments.\nSegment-segment closest points computation in an arbitrary …\nSegment-segment closest points computation in an arbitrary …\nClosest points between a shape and a composite shape.\nClosest points between a support-mapped shape (Cuboid, …\nClosest points between support-mapped shapes (<code>Cuboid</code>, …\nClosest points between support-mapped shapes (<code>Cuboid</code>, …\nComputes one contact point between two shapes.\nComputes the updated contact points with the new positions …\nThe geometric contact information.\nContact between balls.\nContact between a ball and a convex polyhedron.\nBest contact between a composite shape (<code>Mesh</code>, <code>Compound</code>) …\nContact between a convex polyhedron and a ball.\nContact between a plane and a support-mapped shape …\nBest contact between a shape and a composite (<code>Mesh</code>, …\nContact between a support-mapped shape (Cuboid, …\nContact between support-mapped shapes (<code>Cuboid</code>, <code>ConvexHull</code>, …\nContact between support-mapped shapes (<code>Cuboid</code>, <code>ConvexHull</code>, …\nAll the contact tracked by this manifold.\nMutable reference to all the contact tracked by this …\nTests if the given point is inside of <code>self</code> transformed by <code>m</code>…\nThe cosine of angular regularization for the first solid.\nThe cosine angular regularization for the second solid.\nThe contact of this manifold with the deepest penetration …\nPenetration depth\nThe dilation of the first solid.\nThe dilation of the second solid.\nDirection of the ray.\nComputes the minimum distance separating two shapes.\nDistance between balls.\nSmallest distance between a composite shape and any other …\nDistance between a plane and a support-mapped shape.\nSmallest distance between a shape and a composite shape.\nDistance between a support-mapped shape and a plane.\nDistance between support-mapped shapes.\nDistance between support-mapped shapes.\nComputes the minimal distance between a point and <code>self</code> …\nThe shape feature the point lies on.\nFeature at the intersection point.\nThe shape-dependent identifier of the feature of the first …\nThe shape-dependent identifier of the feature of the …\nSwaps the two points.\nReverts the contact normal and swaps <code>world1</code> and <code>world2</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe approximation geometry.\nThe identifier of this contact.\nTests whether a ray intersects this transformed shape.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransforms this ray by the inverse of the given isometry.\nWhether or not the point to project was inside of the …\nThe local contact kinematic.\nThe number of contacts contained by this manifold.\nComputes the toi of an unbounded line with a plane …\nThe linear prediction.\nThe tracked point in local space of the first solid.\nThe tracked point in local space of the second solid.\nCreates a new contact.\nCreates a new tracked contact.\nInitialize prediction parameters.\nInitializes a new local shape approximation at <code>point</code>.\nInitializes an empty contact kinematic.\nInitializes a contact manifold without any contact.\nInitializes a new <code>PointProjection</code>.\nCreates a new ray starting from <code>origin</code> and with the …\nCreates a new <code>RayIntersection</code>.\nCreates a new <code>RayIntersection</code>.\nCreates a new contact, computing automatically the …\nComputes the smallest time of impact of two shapes under …\nComputes the smallest time of impact of two shapes under …\nNon-linear Time Of Impact of two balls under a rigid …\nTime Of Impact of a composite shape with any other shape, …\nTime Of Impact of any shape with a composite shape, under …\nTime of impacts between two support-mapped shapes under a …\nTime of impacts between two support-mapped shapes under a …\nContact normal\nThe normal at the intersection point.\nThe local-space outward normal on the first shape at the …\nThe local-space outward normal on the second shape at the …\nStarting point of the ray.\nThe point where approximation is computed.\nThe projection result.\nComputes the point at the given parameter on this line.\nProjects a point on a shape using the GJK algorithm.\nProcess a contact before it is stored into a contact …\nProjects a point on <code>self</code> transformed by <code>m</code>.\nProjects a point on the boundary of <code>self</code> transformed by <code>m</code> …\nProjects a point on <code>self</code> transformed by <code>m</code>.\nTests whether two shapes are in intersecting or separated …\nProximity between balls.\nProximity between a composite shape (<code>Mesh</code>, <code>Compound</code>) and …\nProximity between a plane and a support-mapped shape …\nProximity between a shape and a composite (<code>Mesh</code>, <code>Compound</code>) …\nProximity between a support-mapped shape (Cuboid, …\nProximity between support-mapped shapes (<code>Cuboid</code>, <code>ConvexHull</code>…\nProximity between support-mapped shapes (<code>Cuboid</code>, <code>ConvexHull</code>…\nAdd a new contact to the manifold.\nCast a ray on a shape using the GJK algorithm.\nComputes the intersection between a triangle and a ray.\nComputes the time of impact of a ray on a ball.\nComputes the toi of a ray with a plane described by its …\nSave the contacts to a cache and empty the manifold.\nSets the local approximation of the first shape.\nSets the local approximation of the second shape.\nSets the dilation of the first solid.\nSets the dilation of the second solid.\nSets the shape-dependent identifier of the feature of the …\nSets the shape-dependent identifier of the feature of the …\nSets linear prediction.\nSets the technique used for tracking contacts.\nThe sine of angular regularization for the first solid.\nThe sine angular regularization for the second solid.\nThe way the time-of-impact computation algorithm …\nSwaps every data of this TOI result such that the role of …\nComputes the smallest time at with two shapes under …\nComputes the smallest time at with two shapes under …\nTime Of Impact of two balls under translational movement.\nTime Of Impact of a composite shape with any other shape, …\nTime Of Impact of a plane with a support-mapped shape …\nTime Of Impact of any shape with a composite shape, under …\nTime Of Impact of a plane with a support-mapped shape …\nTime of impacts between two support-mapped shapes under …\nThe time of impact of the ray with the object.  The exact …\nThe time at which the objects touch.\nComputes time of impact, normal, and texture coordinates …\nComputes the time of impact, and normal between this …\nComputes the time of impact between this transform shape …\nGets the technique currently used for tracking contacts.\nApplies the given transformation to the first set of …\nApplies the given transformation to the second set of …\nTransforms this ray by the given isometry.\nTranslates this ray by the given vector. Its direction is …\nThe textures coordinates at the intersection point.  This …\nVisitors for performing geometric queries exploiting …\nThe local-space closest point on the first shape at the …\nThe local-space closest point on the second shape at the …\nPosition of the contact on the first object. The position …\nPosition of the contact on the second object. The position …\nA point of a Configuration-Space Obstacle.\nA simplex of dimension up to 3 that uses Voronoï regions …\nAdd a point to this simplex.\nTests if the given point is already a vertex of this …\nThe dimension of the smallest subspace that can contain …\nThree-dimensional penetration depth queries using the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes the support point of the CSO of <code>g1</code> and <code>g2</code> toward …\nComputes the support point of the CSO of <code>g1</code> and <code>g2</code> toward …\nThe Gilbert–Johnson–Keerthi distance algorithm.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum squared length of the vertices of this simplex.\nApply a function to all the vertices of this simplex.\nInitializes a CSO point with <code>orig1 - orig2</code>.\nCreates a new empty simplex.\nInitializes a CSO point with all information provided.\nThe original point on the first shape used to compute …\nThe original point on the second shape used to compute …\nCSO point where all components are set to zero.\nThe i-th point of this simplex.\nThe point on the CSO. This is equal to …\nThe dimension of the simplex before the last call to …\nThe i-th point of the simplex before the last call to …\nRetrieves the barycentric coordinate associated to the <code>i</code>…\nRetrieves the barycentric coordinate associated to the <code>i</code>…\nCompute the projection of the origin on the boundary of …\nProjets the origin on the boundary of this simplex and …\nResets this simplex to a single point.\nInitializes a CSO point where both original points are …\nSpecial support map function like constants and Minkowski …\nSwap two vertices of this simplex.\nTranslate the CSO point.\nTranslate in-place the CSO point.\nThe Expanding Polytope Algorithm in 3D.\nProjects the origin on a shape unsing the EPA algorithm.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new instance of the 3D Expanding Polytope …\nProjects the origin on boundary of the given shape.\nResult of the GJK algorithm when a projection of the …\nResults of the GJK algorithm.\nResult of the GJK algorithm when the origin is inside of …\nResult of the GJK algorithm when the origin is too far …\nResult of the GJK algorithm when the origin is too close …\nCasts a ray on a support map using the GJK algorithm.\nProjects the origin on a shape using the Separating Axis …\nCompute the normal and the distance that can travel <code>g1</code> …\nThe absolute tolerence used by the GJK algorithm.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProjects the origin on the boundary of the given shape.\nA support mapping that is always equal to the origin, …\nThe Minkowski sum of a shape and a ball.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe radius of the ball involved in the Minkoski sum.\nThe shape involved in the Minkowski sum.\nSpatial partitioning data structure visitor collecting …\nSpatial partitioning data structure visitor collecting …\nBest-first traversal visitor for computing the point …\nVisitor for checking if a composite shape contains a …\nSpatial partitioning structure visitor collecting nodes …\nBounding Volume Tree visitor collecting interferences with …\nBounding Volume Tree visitor collecting interferences with …\nThe bounding volume used for interference tests.\nThe data contained by the nodes with bounding volumes …\nThe data contained by the nodes with bounding volumes …\nThe data contained by the nodes which bounding volume …\nThe data contained by the nodes which bounding volume …\nA traversal will set this to <code>true</code> if the point is inside …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe transform from the local-space of the second bounding …\nThe absolute value of the rotation matrix representing …\nThe maximum allowed time of impact.\nCreates a new <code>AABBSetsInterferencesCollector</code>.\nCreates a new <code>BoundingVolumeInterferencesCollector</code>.\nInitializes a visitor that allows the computation of the …\nCreates a new <code>PointInterferencesCollector</code>.\nCreates a new <code>RayInterferencesCollector</code>.\nCreates a new <code>RayIntersectionCostFnVisitor</code>.\nThe point to be tested.\nPoint to be tested.\nRay to be tested.\nThe composite shape on which the point containment test …\nA tolerance applied to the interference tests.\nA Ball shape.\nIf this bit is set, both triangles of the concerned …\nSupportMap description of a capsule shape with its …\nA cache used for polygonal clipping.\nTrait implemented by shapes composed of multiple simpler …\nA compound shape with an aabb bounding volume.\nSupportMap description of a cylinder shape with its …\nA convex polyhedron without degenerate faces.\nRepresents a convex polygonal approximation of a face of a …\nTrait implemented by all convex polyhedron.\nShape of a box.\nSupportMap description of a cylinder shape with its …\nTrait implemented by deformable shapes.\nThe type of elements used to describe a deformation on a …\nShape-dependent identifier of an edge.\nShape-dependent identifier of a face.\nDescription of a face adjascent to an edge.\nAn identifier of a feature of a convex polyhedron.\nAn heightfield implicitly discretized with triangles.\nThe status of the cell of an heightfield.\nDeformations described as isometries.\nIf this bit is set, the leftmost triangle of the concerned …\nThe point lies on the segment interior.\nThe point lies on an edge.\nThe point lies on an edge.\nThe point lies on a triangular face interior.\nThe point lies on the triangle interior.\nThe point lies inside of the tetrahedron.\nThe point lies on the triangle interior (for “solid” …\nThe point lies on a vertex.\nThe point lies on a vertex.\nThe point lies on a vertex.\nSupportMap description of a plane.\nA polygonal line.\nIf this bit is set, the rightmost triangle of the …\nDeformations described as scalars.\nA segment shape.\nLogical description of the location of a point on a …\nTrait implemented by all shapes supported by ncollide.\nA shared handle to an abstract shape.\nTraits of convex shapes representable by a support mapping …\nA tetrahedron with 4 vertices.\nLogical description of the location of a point on a …\nA 3d triangle mesh.\nAn edge of a triangle mesh.\nA face of a triangle mesh.\nA vertex of a triangle mesh.\nA triangle shape.\nDescription of the location of a point on a triangle.\nUnknown identifier.\nDeformations described as vectors.\nShape-dependent identifier of a vertex.\nIf this bit is set, the concerned heightfield cell is …\nThe first point of this segment.\nThe fist point of this tetrahedron.\nThe fist point of this triangle.\nThe segment first point.\nThe tetrahedron first point.\nThe triangle first point.\nThe AABB of <code>self</code> transformed by <code>m</code>.\nThe AABB of this compound in its local-space.\nThe AABB of this heightmap.\nThe polyline’s AABB.\nThe triangle mesh’s AABB.\nGets the AABB of the shape identified by the index <code>i</code>.\nThe AABB of the i-th shape compositing this compound.\nGiven a contact between two polygonal features, adds it to …\nThe adjacent vertices list of this mesh.\nThe faces adjascent to this edge.\nIndirect indices of this vertex adjacent faces.\nThe adjacent vertices list of this mesh.\nIndirect indices of this vertex adjacent vertices.\nReturns the set containing all flags.\nGets a reference the <code>Arc</code> refcounted shape object.\nThe composite shape representation of <code>self</code> if applicable.\nThe convex polyhedron representation of <code>self</code> if applicable.\nThe deformable shape representation of <code>self</code> if applicable.\nThe mutable deformable shape representation of <code>self</code> if …\nThe <code>PointQuery</code> implementation of <code>self</code>.\nThe <code>RayCast</code> implementation of <code>self</code>.\nPerforms the cast.\nThe support mapping of <code>self</code> if applicable.\nThe second point of this segment.\nThe second point of this tetrahedron.\nThe second point of this triangle.\nThe segment second point.\nThe tetrahedron first point.\nThe triangle second point.\nThe barycentric coordinates corresponding to this point …\nComputes the barycentric coordinates of the given point in …\nThe barycentric coordinates corresponding to this point …\nThe barycentric coordinates corresponding to this point …\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nThe bounding sphere of <code>self</code> transformed by <code>m</code>.\nThe shapes bounding volumes.\nGets the acceleration structure of the concave shape.\nThe optimization structure used by this compound shape.\nThe optimization structure used by this polyline.\nThe optimization structure used by this triangle mesh.\nThe third point of this tetrahedron.\nThe third point of this triangle.\nThe tetrahedron first point.\nThe triangle third point.\nThe pair of index of the cell containing the vertical …\nThe height (extent along its local <code>z</code> axis) of each cell of …\nThe status of the <code>(i, j)</code>-th cell.\nThe width (extent along its local <code>x</code> axis) of each cell of …\nThe statuses of all the cells of this heightfield.\nThe mutable statuses of all the cells of this heightfield.\nVerify if this convex polyhedron is actually convex.\nClears the clipping cache.\nRemoves all the vertices, normals, and feature IDs of this …\nGenerate contacts between <code>self</code> and <code>other</code> using polygonal …\nReturns the complement of this set of flags.\nThe contact preprocessor to be used for contact …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nConverts the FeatureID of the left or right triangle at …\nThe fourth point of this tetrahedron.\nThe tetrahedron first point.\nThe type of degrees of freedom this shape has.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nThe unit direction of this segment.\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nGet the specified edge’s vertices (in the shape …\nRetrieves the edge with the given feature id.\nReturns the i-th edge of this tetrahedron.\nFace containing feature.\nIndex of the edge the edge is adjascent to.\nReturns the indices of the vertices of the i-th edge of …\nThe outward normal of the edges if it is a face.\nThe segment of the <code>i</code>-th edge on this polyline.\nThe segment of the <code>i</code>-th edge on this triangle mesh.\nTests that the given <code>dir</code> is on the tangent cone of the <code>i</code>th …\nTests that the given <code>dir</code> is on the tangent cone of the <code>i</code>th …\nTests whether the polar of the tangent cone of the i-th …\nTests that the given <code>dir</code> is on the polar of the tangent …\nTests that the given <code>dir</code> is on the polar of the tangent …\nThe edges of this polyline.\nThe three edges of this triangle: [AB, BC, CA].\nThe edges of this mesh.\nIndices of the edges of this face.\nThe shape-dependent indentifier of each edge of this …\nThe three edges scaled directions of this triangle: [B - …\nReturns an empty set of flags.\nComputes the extents of this triangle on the given …\nFill <code>face</code> with the geometric description of the specified …\nReturns the i-th face of this tetrahedron.\nFace containing feature.\nIndex of the face.\nReturns the i-th face of this tetrahedron.\nTests that the given <code>dir</code> is on the tangent cone of the <code>i</code>th …\nChecks if the polar of the tangent cone of the <code>i</code>-th face …\nThe faces of this mesh.\nThe shape-dependent identifier of this feature.\nReturns any normal from the normal cone of the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a sharable shape handle from a shape trait object.\nCreates the reference to a segment from the reference to …\nCreates the reference to a tetrahedron from the reference …\nCreates the reference to a triangle from the reference to …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nThe half-extents of this box. Half-extents are the box …\nThe half-extents of the cuboid.\nThe capsule half length along its local <code>y</code> axis.\nThe cone half length along the <code>y</code> axis.\nThe cylinder half length along the <code>y</code> axis.\nThe half-height of the capsule’s cylindrical part.\nThe half-height of the cone.\nThe half-height of the cylinder.\nThe capsule height along its local <code>y</code> axis.\nThe heights of this heightfield.\nIndices of the vertices of this face.\nThe indices of this edge.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if the given feature is a FeatureId::Face and …\nReturns <code>true</code> if the given feature is a FeatureId::Face and …\nWhether <code>self</code> uses a composite shape-based representation.\nWhether <code>self</code> uses a convex polyhedron representation.\nWhether <code>self</code> uses a composite shape-based representation.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if the point is located on the relative …\nTests if this shape has a specific type <code>T</code>.\nWhether <code>self</code> uses a support-mapping based representation.\nThe length of this segment.\nThe AABB of <code>self</code>.\nThe bounding sphere of <code>self</code>.\nSame as <code>self.local_support_point</code> except that <code>dir</code> is …\nApplies the function <code>f</code> to all the triangles of this …\nApplies a transformation matrix and a function to each …\nApplies a transformation matrix and a function to each …\nThe number of columns of this heightfield.\nThe number of edges of this convex polygonal face.\nCreates a new ball from its radius and center.\nCreates a new capsule.\nBuilds a new compound shape.\nCreates a new cone.\nInitializes an empty clipping cache.\nCreates a new empty convex polygonal faces.\nCreates a new box from its half-extents. Half-extents are …\nCreates a new cylinder.\nInitializes a new heightfield with the given heights and a …\nBuilds a new plane from its center and its normal.\nBuilds a new polyline.\nCreates a new segment from two points.\nCreates a sharable shape handle from a shape.\nCreates a tetrahedron from three points.\nCreates a triangle from three points.\nBuilds a new mesh.\nThe plane normal.\nReturns <code>None</code>. Exists only for API similarity with the 2D …\nThe normal of this triangle assuming it is oriented ccw.\nThe normal of this feature if it is a face.\nThe plane normal.\nThe normal of this face if it is not degenerate.\nReturns the complement of this set of flags.\nThe number of sub-shape in this composide shape.\nThe number of rows of this heightfield.\nThe number of vertices of this face.\nWhether this polyline is considered is oriented or not.\nWhether this trimesh is considered is oriented or not.\nComputes the point at the given location.\nThe set of vertices of this convex polyhedron.\nThe points of this polyline.\nThe points of this mesh.\nTransforms all the vertices of this feature by the given …\nAdds a vertex to this face.\nAdd the shape-dependent identifier of a edge of this …\nAdds an edge normal to this face.\nAdds a scaled edge normal to this face.\nA polyline shaped like a quad, in the x-y plane.\nThe ball radius.\nThe radius of the capsule’s rounded part.\nThe radius of the cone along all but the <code>y</code> axis.\nThe radius of the cylinder along all but the <code>y</code> axis.\nThe radius of the ball.\nThe radius of the capsule.\nThe base radius of the cone.\nThe radius fo the cylinder.\nAutomatically recomputes the scaled edge normals (3D only).\nRemoves the specified flags in-place.\nReturns <code>true</code> if both <code>self</code> and <code>other</code> correspond to points …\nThe scale factor applied to this heightfield.\nApplies in-place a non-uniform scale to this polyline.\nApplies in-place a non-uniform scale to this triangle mesh.\nApplies a non-uniform scale to this polyline.\nApplies a non-uniform scale to this triangle mesh.\nThe direction of this segment scaled by its length.\nA vector normal of this triangle.\nThe segment that, once dilated by <code>self.radius</code> yields this …\nGets the i-th polyline element.\nConverts a segment FeatureId to a polyline FeatureId.\nInserts or removes the specified flags depending on the …\nSet the status of the <code>(i, j)</code>-th cell.\nUpdates some the degrees of freedom of this shape. Updates …\nUpdates all the degrees of freedom of this shape.\nUpdates all the degrees of freedom of this shape.\nAdd the shape-dependent identifier of this feature.\nSets the outward normal of this convex polygonal face.\nWhether this polyline is considered as oriented or not.\nWhether this trimesh is considered as oriented or not.\nThe shapes of this compound shape.\nOutward edge normals on the face’s plane.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the id of the subshape containing the specified …\nTransforms a FeatureId of this compound into a pair …\nRetrieve the face (in world-space) with a normal that …\nRetrieve the identifier of the feature which normal cone …\nRetrieve the feature (in world-space) which normal cone …\nSame as <code>self.support_point</code> except that <code>dir</code> is normalized.\nSwaps the two vertices of this segment.\nReturns the symmetric difference between the flags in <code>self</code> …\nCheck if if the feature <code>_feature</code> of the <code>i-th</code> subshape of …\nChecks that the given direction in world-space is on the …\nChecks that the given direction in world-space is on the …\nChecks that the given direction in world-space is on the …\nChecks that the given direction in world-space is on the …\n(Not yet implemented) Tests whether the polar of the …\nChecks if the polar of the tangent cone of the specified …\nToggles the specified flags in-place.\nTransforms all the vertices and normals of this feature by …\nApplies in-place a transformation to this polyline.\nApplies in-place a transformation to this triangle mesh.\nApplies a transformation to this polyline.\nApplies the isometry <code>m</code> to the vertices of this segment and …\nReturns a new triangle with vertices transformed by <code>m</code>.\nApplies a transformation to this triangle mesh.\nGets the i-th mesh element.\nAn iterator through all the triangles of this heightfield.\nThe two triangles at the cell (i, j) of this heightfield.\nCreates a new 2D convex polyhedron from an arbitrary set …\nAttempts to create a new solid assumed to be convex from …\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nThe height (extent along its local <code>z</code> axis) of each cell of …\nThe width (extent along its local <code>x</code> axis) of each cell of …\nRevries the value of the identifier if <code>self</code> is an edge.\nRetrieves the value of the identifier if <code>self</code> is a face.\nRevries the value of the identifier if <code>self</code> is a vertex.\nUpdates the given local approximation of this shape.\nThe texture coordinates of this mesh.\nGets the specified vertex in the shape local-space.\nTests that the given <code>dir</code> is on the tangent cone of the <code>i</code>th …\nTests that the given <code>dir</code> is on the tangent cone of the <code>i</code>th …\nTests that the given <code>dir</code> is on the polar of the tangent …\nTests that the given <code>dir</code> is on the polar of the tangent …\nThe vertices of this convex polygonal face.\nReference to an array containing the three vertices of …\nThe vertices of this mesh.\nThe vertices of this face.\nThe shape-dependent indentifier of each vertex of this …\nCreates a new convex polygonal feature with all field …\nThe smallest x coordinate of the <code>j</code>-th column of this …\nThe smallest z coordinate of the start of the <code>i</code>-th row of …\nTrait implemented by shapes that can be approximated by a …\nComputes the convex hull of a set of 3d points.\nApproximate convex decomposition of a triangle mesh.\nBuilds a triangle mesh from this shape.\nTrait that transforms thing to a slice of u8.\nA hasher builder that creates <code>DefaultHasher</code> with default …\nA structure that implements <code>Eq</code> and is hashable even if the …\nExtra operations with isometries.\nA reference packed with a cost value.\nA pair of elements sorted in increasing order.\nTransform a vector by the absolute value of the …\nComputes the normal of a counter-clock-wise triangle.\nComputes the center of a set of point.\nComputes the circumcircle of a triangle.\nThe cost of the object.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransform a unit vector by the inverse of <code>self</code>.\nTests if three 3D points are approximately aligned.\nTests if a point is inside of a triangle.\nInterpolates between two isometries, using LERP for the …\nComputes the median of a set of values.\nCreates a new <code>DeterministicState</code> that builds <code>DefaultHasher</code> …\nCreates a new reference packed with a cost value.\nCreates a new <code>HashablePartialEq</code>. This is unsafe because …\nSorts two elements in increasing order into a new pair.\nThe reference to an object.\nComputes the support point of a cloud of points.\nComputes the index of the support point of a cloud of …\nTests if the given point is inside of a polygon with …\nGiven an index buffer, remove from <code>points</code> every point that …\nSorts two values in increasing order.\nSorts a set of three values in increasing order.\nComputes the center of a tetrahedron.\nComputes the signed volume of a tetrahedron.\nComputes the volume of a tetrahedron.\nComputes the area of a triangle.\nComputes the center of a triangle.\nComputes the perimeter of a triangle.\nGets the wrapped value.")