searchState.loadedDescShard("zbus", 0, "zbus\nInvalid D-Bus address.\nDoes not perform any authentication at all, and should not …\nAsync equivalent of <code>Drop</code>.\nAuthentication mechanisms\nThis mechanism is designed to establish that a client has …\nA trait that needs to be implemented by error types to be …\nDerive macro for implementing <code>zbus::DBusError</code> trait.\nContains the error value\nThe error type for <code>zbus</code>.\nData too large.\nA wrapper around the underlying runtime/executor.\nThis is the recommended authentication mechanism on …\nA <code>fdo::Error</code> transformed into <code>Error</code>.\nGeneric error.\nA D-Bus server GUID.\nInitial handshake error.\nEndian signature invalid or doesn’t match expectation.\nAn I/O error.\nThe given interface already exists at the given path.\nInterface not found\nInvalid message field.\nInvalid D-Bus GUID.\nInvalid match rule string.\nUnexpected or incorrect reply.\nSerial number in the message header is 0 (which is …\nA <code>stream::Stream</code> implementation that yields <code>Message</code> items.\nA D-Bus method error reply.\nA required field is missing in the message headers.\nA required parameter was missing.\nThe requested name was already claimed by another peer.\nA zbus_names error.\nContains the success value\nOwned version of <code>Guid</code>.\nAlias for a <code>Result</code> with the error type <code>zbus::Error</code>.\nUnsupported function, or support currently lacking.\nA zvariant error.\nD-Bus address handling.\nReturns a string slice for the GUID.\nPerform the async cleanup.\nThe blocking API.\nAlias for <code>connection</code> module, for convenience.\nConnection API.\nGenerate an error reply message for the given method call.\nD-Bus standard interfaces.\nCreate a message stream for the given match rule.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSame as <code>try_from</code>, except it takes a <code>&amp;&#39;static str</code>.\nGenerate a D-Bus GUID that can be used with e.g. …\nGet a reference to the inner <code>Guid</code>.\nAttribute macro for implementing a D-Bus interface.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if there are no unfinished tasks.\nBus match rule API.\nThe associated match rule, if any.\nThe maximum number of messages to queue for this stream.\nD-Bus Message.\nThe object server API.\nThe client-side proxy API.\nAttribute macro for defining D-Bus proxies (using …\nSet maximum number of messages to queue for this stream.\nRuns a single task.\nCreate an owned copy of the GUID.\nCreates a GUID from a string with 32 hex digits.\nCreates a GUID from a string with 32 hex digits.\nA bus address\nReturns the argument unchanged.\nParse the transport part of a D-Bus address into a …\nThe GUID for this address, if known.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Address</code> from a <code>Transport</code>.\nGet the address for session socket respecting the …\nSet the GUID for this address.\nGet the address for system bus respecting the …\nD-Bus transport Information module.\nThe transport details for this address.\nA abstract unix domain socket name.\nA listenable address using the specified path, in which a …\nA path to a unix domain socket on the filesystem.\nA TCP transport in a D-Bus address.\nTCP address details\nA <code>tcp:</code> address family.\nThe same as UnixDir, except that on platforms with …\nThe transport properties of a D-Bus address.\nA Unix domain socket transport in a D-Bus address.\nA Unix Domain Socket address.\nA Unix domain socket path in a D-Bus address.\nReturns the <code>tcp:</code> address <code>bind</code> value.\nReturns the <code>tcp:</code> address <code>family</code> value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>tcp:</code> address <code>host</code> value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new Unix transport with the given path.\nCreate a new TCP transport with the given host and port.\nThe nonce file path, if any.\nThe path.\nReturns the <code>tcp:</code> address <code>port</code> value.\nSet the <code>tcp:</code> address <code>bind</code> value.\nSet the <code>tcp:</code> address <code>family</code> value.\nSet the <code>tcp:</code> address <code>noncefile</code> value.\nTake ownership of the nonce file path, if any.\nTake the path, consuming <code>self</code>.\nA blocking wrapper of <code>crate::MessageStream</code>.\nBlocking connection API.\nD-Bus standard interfaces.\nCreate a message iterator for the given match rule.\nReturns the argument unchanged.\nGet a reference to the underlying async message stream.\nCalls <code>U::from(self)</code>.\nGet the underlying async message stream, consuming <code>self</code>.\nThe associated match rule, if any.\nThe object server API.\nThe client-side proxy API.\nA builder for <code>zbus::blocking::Connection</code>.\nA blocking wrapper of <code>zbus::Connection</code>.\nCreate a builder for connection that will use the given …\nSpecify the mechanism to use during authentication.\nSpecify the mechanisms to use during authentication.\nCreate a builder for a connection that will use the given …\nBuild the connection, consuming the builder.\nSend a method call.\nClose the connection.\nThe cookie context to use during authentication.\nThe ID of the cookie to use during authentication.\nEmit a signal.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the underlying async Connection.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the underlying async Connection, consuming <code>self</code>.\nChecks if <code>self</code> is a connection to a message bus.\nSet the capacity of the main (unfiltered) queue.\nThe capacity of the main (unfiltered) queue.\nReturns a listener, notified on various connection …\nRegister a well-known name for this connection on the bus.\nGet a reference to the associated <code>ObjectServer</code>.\nReturns the peer credentials.\nDeregister a previously registered well-known name for …\nReply to a message.\nReply to a method call with an error.\nReply an error to a message.\nRegister a well-known name for this service on the bus.\nRegister a well-known name for this service on the bus.\nSend <code>msg</code> to the peer.\nRegister a D-Bus <code>Interface</code> to be served at a given path.\nThe server’s GUID.\nCreate a builder for the session/user message bus …\nCreate a <code>Connection</code> to the session/user message bus.\nSet the capacity of the main (unfiltered) queue.\nCreate a builder for connection that will use the given …\nCreate a builder for the system-wide message bus …\nCreate a <code>Connection</code> to the system-wide message bus.\nCreate a builder for connection that will use the given …\nThe unique name as assigned by the message bus or <code>None</code> if …\nCreate a builder for connection that will use the given …\nProxy for the <code>org.freedesktop.DBus</code> interface.\nA <code>InterfacesAdded</code> signal.\n<code>InterfacesAdded</code> signal arguments.\nA <code>Iterator</code> implementation that yields <code>InterfacesAdded</code> …\nA <code>InterfacesRemoved</code> signal.\n<code>InterfacesRemoved</code> signal arguments.\nA <code>Iterator</code> implementation that yields <code>InterfacesRemoved</code> …\nProxy for the <code>org.freedesktop.DBus.Introspectable</code> …\nProxy for the <code>org.freedesktop.DBus.Monitoring</code> interface.\nA <code>NameAcquired</code> signal.\n<code>NameAcquired</code> signal arguments.\nA <code>Iterator</code> implementation that yields <code>NameAcquired</code> signals.\nA <code>NameLost</code> signal.\n<code>NameLost</code> signal arguments.\nA <code>Iterator</code> implementation that yields <code>NameLost</code> signals.\nA <code>NameOwnerChanged</code> signal.\n<code>NameOwnerChanged</code> signal arguments.\nA <code>Iterator</code> implementation that yields <code>NameOwnerChanged</code> …\nProxy for the <code>org.freedesktop.DBus.ObjectManager</code> interface.\nProxy for the <code>org.freedesktop.DBus.Peer</code> interface.\nA <code>PropertiesChanged</code> signal.\n<code>PropertiesChanged</code> signal arguments.\nA <code>Iterator</code> implementation that yields <code>PropertiesChanged</code> …\nProxy for the <code>org.freedesktop.DBus.Properties</code> interface.\nProxy for the <code>org.freedesktop.DBus.Debug.Stats</code> interface.\nAdds a match rule to match messages going through the …\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nConverts the connection into a monitor connection which …\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nGet the cached value of the <code>Features</code> property, or <code>None</code> if …\nGet the cached value of the <code>Interfaces</code> property, or <code>None</code> …\nThis property lists abstract “features” provided by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to construct a PropertiesChanged from a <code>zbus::Message</code>.\nTry to construct a InterfacesAdded from a <code>zbus::Message</code>.\nTry to construct a InterfacesRemoved from a <code>zbus::Message</code>.\nTry to construct a NameOwnerChanged from a <code>zbus::Message</code>.\nTry to construct a NameLost from a <code>zbus::Message</code>.\nTry to construct a NameAcquired from a <code>zbus::Message</code>.\nGet a property value.\nReturns auditing data used by Solaris ADT, in an …\nGet all properties.\nGetAllMatchRules (undocumented)\nReturns as many credentials as possible for the process …\nReturns the security context used by SELinux, in an …\nGetConnectionStats (undocumented)\nReturns the Unix process ID of the process connected to …\nReturns the Unix user ID of the process connected to the …\nGets the unique ID of the bus.\nAn application should reply the containing a hex-encoded …\nThe return value of this method is a dict whose keys are …\nReturns the unique connection name of the primary owner of …\nGetStats (undocumented)\nReturns the unique name assigned to the connection.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe mutable reference to the underlying <code>zbus::Proxy</code>.\nThe mutable reference to the underlying <code>zbus::Proxy</code>.\nThe mutable reference to the underlying <code>zbus::Proxy</code>.\nThe mutable reference to the underlying <code>zbus::Proxy</code>.\nThe mutable reference to the underlying <code>zbus::Proxy</code>.\nThe mutable reference to the underlying <code>zbus::Proxy</code>.\nThe mutable reference to the underlying <code>zbus::Proxy</code>.\nThis property lists interfaces provided by the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nReturns an XML description of the object, including its …\nReturns a list of all names that can be activated on the …\nReturns a list of all currently-owned names on the bus.\nList the connections currently queued for a bus name.\nThe reference to the underlying <code>zbus::Message</code>.\nThe reference to the underlying <code>zbus::Message</code>.\nThe reference to the underlying <code>zbus::Message</code>.\nThe reference to the underlying <code>zbus::Message</code>.\nThe reference to the underlying <code>zbus::Message</code>.\nThe reference to the underlying <code>zbus::Message</code>.\nChecks if the specified name exists (currently has an …\nCreates a new proxy with the given destination, and the …\nCreates a new proxy with the given service destination and …\nCreates a new proxy with the given service destination and …\nCreates a new proxy with the given service destination and …\nCreates a new proxy with the default service and path.\nCreates a new proxy with the default service and path.\nCreates a new proxy with the default service and path.\nOn receipt, an application should do nothing other than …\nCreate a stream for the <code>Features</code> property changes. This is …\nCreate a stream that receives <code>InterfacesAdded</code> signals.\nCreate a stream that receives <code>InterfacesAdded</code> signals.\nCreate a stream for the <code>Interfaces</code> property changes. This …\nCreate a stream that receives <code>InterfacesRemoved</code> signals.\nCreate a stream that receives <code>InterfacesRemoved</code> signals.\nCreate a stream that receives <code>NameAcquired</code> signals.\nCreate a stream that receives <code>NameAcquired</code> signals.\nCreate a stream that receives <code>NameLost</code> signals.\nCreate a stream that receives <code>NameLost</code> signals.\nCreate a stream that receives <code>NameOwnerChanged</code> signals.\nCreate a stream that receives <code>NameOwnerChanged</code> signals.\nCreate a stream that receives <code>PropertiesChanged</code> signals.\nCreate a stream that receives <code>PropertiesChanged</code> signals.\nAsk the message bus to release the method caller’s claim …\nReload server configuration.\nRemoves the first rule that matches.\nAsk the message bus to assign the given name to the method …\nSet a property value.\nTries to launch the executable associated with a name …\nThis method adds to or modifies that environment when …\nWrapper over an interface, along with its corresponding …\nA blocking wrapper of <code>crate::ObjectServer</code>.\nRegister a D-Bus <code>Interface</code> at a given path. (see the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the underlying interface.\nGet a reference to the underlying interface.\nGet a reference to the underlying async ObjectServer.\nGet the interface at the given path.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the underlying async ObjectServer, consuming <code>self</code>.\nUnregister a D-Bus <code>Interface</code> at a given path.\nBuilder for proxies.\nAn <code>std::iter::Iterator</code> implementation that yields owner …\nA property changed event.\nAn <code>std::iter::Iterator</code> implementation that yields property …\nA blocking wrapper of <code>crate::Proxy</code>.\nThis trait is implemented by all blocking proxies, which …\nAn <code>std::iter::Iterator</code> implementation that yields signal …\nBuild a proxy from the builder.\nReturns a customizable builder for this proxy.\nSet whether to cache properties.\nGet the cached value of the property <code>property_name</code>.\nGet the cached value of the property <code>property_name</code>.\nCall a method and return the reply body.\nCall a method and return the reply.\nCall a method without expecting a reply\nCall a method and return the reply body, optionally …\nGet a reference to the associated connection.\nSet the proxy destination address.\nGet a reference to the destination service name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the property <code>property_name</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nGet a reference to the underlying async Proxy.\nSet the proxy interface.\nGet a reference to the interface.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nGet the underlying async Proxy, consuming <code>self</code>.\nIntrospect the associated object, and return the XML …\nGet the name of the property that changed.\nThe bus name being tracked.\nThe signal name.\nCreate a new <code>Builder</code> for the given connection.\nCreate a new <code>Proxy</code> for the given …\nCreate a new <code>Builder</code> for the given connection.\nCreate a new <code>Proxy</code> for the given …\nSet the proxy path.\nGet a reference to the object path.\nCreate a stream for all signals emitted by this service.\nGet an iterator to receive property changed events.\nGet an iterator to receive owner changed events.\nCreate a stream for signal named <code>signal_name</code>.\nSame as <code>Proxy::receive_signal</code> but with a filter.\nSet the property <code>property_name</code>.\nSpecify a set of properties (by name) which should be …\nA builder for <code>zbus::Connection</code>.\nA D-Bus connection.\nCreate a builder for connection that will use the given …\nSpecify the mechanism to use during authentication.\nSpecify the mechanisms to use during authentication.\nCreate a builder for a connection that will use the given …\nBuild the connection, consuming the builder.\nSend a method call.\nClose the connection.\nThe cookie context to use during authentication.\nThe ID of the cookie to use during authentication.\nEmit a signal.\nThe underlying executor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEnable or disable the internal executor thread.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if <code>self</code> is a connection to a message bus.\nSet the capacity of the main (unfiltered) queue.\nThe capacity of the main (unfiltered) queue.\nReturns a listener, notified on various connection …\nRegister a well-known name for this connection on the bus.\nGet a reference to the associated <code>ObjectServer</code>.\nReturns the peer credentials.\nDeregister a previously registered well-known name for …\nReply to a message.\nReply an error to a message.\nReply an error to a message.\nRegister a well-known name for this connection.\nRegister a well-known name for this connection.\nSend <code>msg</code> to the peer.\nRegister a D-Bus <code>Interface</code> to be served at a given path.\nThe server’s GUID.\nCreate a builder for the session/user message bus …\nCreate a <code>Connection</code> to the session/user message bus.\nSet the capacity of the main (unfiltered) queue.\nCreate a builder for connection that will use the given …\nCreate a builder for the system-wide message bus …\nCreate a <code>Connection</code> to the system-wide message bus.\nCreate a builder for connection that will use the given …\nThe unique name of the connection, if set/applicable.\nCreate a builder for connection that will use the given …\nA boxed <code>Split</code>.\nThe read half of a socket.\nTrait representing some transport layer over which the …\nA pair of socket read and write halves.\nThe write half of a socket.\nSupports passing file descriptors.\nSupports passing file descriptors.\nClose the socket.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn the peer credentials.\nReturn the peer credentials.\nReference to the read half.\nMutable reference to the read half.\nReceive a message on the socket.\nAttempt to receive bytes from the socket.\nSend a message on the socket.\nAttempt to send a message on the socket\nSplit the socket into a read half and a write half.\nTake the read and write halves.\nReference to the write half.\nMutable reference to the write half.\nSecurity restrictions don’t allow doing what you’re …\nCan’t bind a socket since its address is in use (i.e. …\nAsked for ADT audit data and it wasn’t available.\nIf an application A specifies this flag and succeeds in …\nThe application trying to request ownership of a name is …\nAuthentication didn’t work.\nA D-Bus bus address was malformed.\nCredentials of a process connected to a bus server.\nProxy for the <code>org.freedesktop.DBus</code> interface.\nThe connection is disconnected and you’re trying to use …\nWithout this flag, if an application requests a name that …\nContains the error value\nErrors from …\nThe name already has an owner, <code>DoNotQueue</code> was specified, …\nA generic error; “something went wrong” - see the …\nExisting file and the operation you’re using does not …\nMissing file.\nSomething went wrong reading or writing to a socket, for …\nThe name already had an owner, <code>DoNotQueue</code> was not …\nThe message meta data does not match the payload. e.g. …\nThe message is not allowed without performing interactive …\nA <code>InterfacesAdded</code> signal.\n<code>InterfacesAdded</code> signal arguments.\nA <code>Stream</code> implementation that yields <code>InterfacesAdded</code> …\nA <code>InterfacesRemoved</code> signal.\n<code>InterfacesRemoved</code> signal arguments.\nA <code>Stream</code> implementation that yields <code>InterfacesRemoved</code> …\nProxy for the <code>org.freedesktop.DBus.Introspectable</code> …\nInvalid arguments passed to a method call.\nA file contains invalid syntax or is otherwise broken.\nA type signature is not valid.\nSome limited resource is exhausted.\nThe type returned by the …\nThe match rule isn’t syntactically valid.\nTried to remove or modify a match rule that didn’t exist.\nProxy for the <code>org.freedesktop.DBus.Monitoring</code> interface.\nA <code>NameAcquired</code> signal.\n<code>NameAcquired</code> signal arguments.\nA <code>Stream</code> implementation that yields <code>NameAcquired</code> signals.\nThe bus name you referenced doesn’t exist (i.e. no …\nA <code>NameLost</code> signal.\n<code>NameLost</code> signal arguments.\nA <code>Stream</code> implementation that yields <code>NameLost</code> signals.\nA <code>NameOwnerChanged</code> signal.\n<code>NameOwnerChanged</code> signal arguments.\nA <code>Stream</code> implementation that yields <code>NameOwnerChanged</code> …\nThere was not enough memory to complete an operation.\nNo network access (probably ENETUNREACH on a socket).\nNo reply to a message expecting one, usually means a …\nUnable to connect to server (probably caused by …\nThe given name does not exist on this bus.\nThe connection is not from a container, or the specified …\nThe caller was not the primary owner of this name, and was …\nRequested operation isn’t supported (like ENOSYS on …\nService-side Object Manager interface implementation.\nProxy for the <code>org.freedesktop.DBus.ObjectManager</code> interface.\nThere’s already an object with the requested object path.\nContains the success value\nProxy for the <code>org.freedesktop.DBus.Peer</code> interface.\nThe caller is now the primary owner of the name, replacing …\nServer-side implementation for the …\nA <code>PropertiesChanged</code> signal.\n<code>PropertiesChanged</code> signal arguments.\nA <code>Stream</code> implementation that yields <code>PropertiesChanged</code> …\nProxy for the <code>org.freedesktop.DBus.Properties</code> interface.\nProperty you tried to set is read-only.\nThe return code of the <code>release_name</code> method.\nThe caller has released their claim on the given name. …\nTry to replace the current owner if there is one. If this …\nThe flags used by the bus <code>request_name</code> method.\nThe return code of the <code>request_name</code> method.\nAlias for a <code>Result</code> with the error type <code>zbus::fdo::Error</code>.\nAsked for SELinux security context and it wasn’t …\nThe bus doesn’t know how to launch a service to supply …\nWhile starting a new process, the child exited with a …\nWhile starting a new process, the child exited on a signal.\nWe failed to setup the config parser correctly.\nWhile starting a new process, the exec() call failed.\nWhile starting a new process, something went wrong.\nWe failed to setup the environment correctly.\nService file invalid (Name, User or Exec missing).\nWhile starting a new process, the fork() call failed.\nThere was not enough memory to complete the operation.\nPermissions are incorrect on the setuid helper.\nService file not found in system-services directory.\nBus name was not valid.\nProxy for the <code>org.freedesktop.DBus.Debug.Stats</code> interface.\nCertain timeout errors, e.g. while starting a service.\nCertain timeout errors, possibly ETIMEDOUT on a socket. …\nTried to get a UNIX process ID and it wasn’t available.\nInterface you invoked a method on isn’t known by the …\nMethod name you invoked isn’t known by the object you …\nObject you invoked a method on isn’t known.\nProperty you tried to access isn’t known by the object.\nUnknown or fall-through zbus error.\nAdds a match rule to match messages going through the …\nAdd a numeric Unix group ID.\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nConverts the connection into a monitor connection which …\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nGet the cached value of the <code>Features</code> property, or <code>None</code> if …\nGet the cached value of the <code>Interfaces</code> property, or <code>None</code> …\nThis property lists abstract “features” provided by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to construct a PropertiesChanged from a <code>zbus::Message</code>.\nTry to construct a InterfacesAdded from a <code>zbus::Message</code>.\nTry to construct a InterfacesRemoved from a <code>zbus::Message</code>.\nTry to construct a NameOwnerChanged from a <code>zbus::Message</code>.\nTry to construct a NameLost from a <code>zbus::Message</code>.\nTry to construct a NameAcquired from a <code>zbus::Message</code>.\nGet a property value.\nReturns auditing data used by Solaris ADT, in an …\nGet all properties.\nGetAllMatchRules (undocumented)\nReturns as many credentials as possible for the process …\nReturns the security context used by SELinux, in an …\nGetConnectionStats (undocumented)\nReturns the Unix process ID of the process connected to …\nReturns the Unix user ID of the process connected to the …\nGets the unique ID of the bus.\nAn application should reply the containing a hex-encoded …\nThe return value of this method is a dict whose keys are …\nReturns the unique connection name of the primary owner of …\nGetStats (undocumented)\nReturns the unique name assigned to the connection.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe mutable reference to the underlying <code>zbus::Proxy</code>.\nThe mutable reference to the underlying <code>zbus::Proxy</code>.\nThe mutable reference to the underlying <code>zbus::Proxy</code>.\nThe mutable reference to the underlying <code>zbus::Proxy</code>.\nThe mutable reference to the underlying <code>zbus::Proxy</code>.\nThe mutable reference to the underlying <code>zbus::Proxy</code>.\nThe mutable reference to the underlying <code>zbus::Proxy</code>.\nThis property lists interfaces provided by the …\nThis signal is emitted when either a new object is added …\nThis signal is emitted whenever an object is removed or it …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nSame as <code>ConnectionCredentials::linux_security_label</code>, but …\nSame as <code>ConnectionCredentials::unix_group_ids</code>, but …\nSame as <code>ConnectionCredentials::windows_sid</code>, but consumes …\nReturns an XML description of the object, including its …\nOn Linux systems, the security label that would result …\nReturns a list of all names that can be activated on the …\nReturns a list of all currently-owned names on the bus.\nList the connections currently queued for a bus name.\nThe reference to the underlying <code>zbus::Message</code>.\nThe reference to the underlying <code>zbus::Message</code>.\nThe reference to the underlying <code>zbus::Message</code>.\nThe reference to the underlying <code>zbus::Message</code>.\nThe reference to the underlying <code>zbus::Message</code>.\nThe reference to the underlying <code>zbus::Message</code>.\nChecks if the specified name exists (currently has an …\nCreates a new proxy with the given destination, and the …\nCreates a new proxy with the given service destination and …\nCreates a new proxy with the given service destination and …\nCreates a new proxy with the given service destination and …\nCreates a new proxy with the default service and path.\nCreates a new proxy with the default service and path.\nCreates a new proxy with the default service and path.\nOn receipt, an application should do nothing other than …\nThe numeric process ID, on platforms that have this …\nEmits the <code>org.freedesktop.DBus.Properties.PropertiesChanged</code>…\nCreate a stream for the <code>Features</code> property changes. This is …\nCreate a stream that receives <code>InterfacesAdded</code> signals.\nCreate a stream that receives <code>InterfacesAdded</code> signals.\nCreate a stream for the <code>Interfaces</code> property changes. This …\nCreate a stream that receives <code>InterfacesRemoved</code> signals.\nCreate a stream that receives <code>InterfacesRemoved</code> signals.\nCreate a stream that receives <code>NameAcquired</code> signals.\nCreate a stream that receives <code>NameAcquired</code> signals.\nCreate a stream that receives <code>NameLost</code> signals.\nCreate a stream that receives <code>NameLost</code> signals.\nCreate a stream that receives <code>NameOwnerChanged</code> signals.\nCreate a stream that receives <code>NameOwnerChanged</code> signals.\nCreate a stream that receives <code>PropertiesChanged</code> signals.\nCreate a stream that receives <code>PropertiesChanged</code> signals.\nAsk the message bus to release the method caller’s claim …\nReload server configuration.\nRemoves the first rule that matches.\nAsk the message bus to assign the given name to the method …\nSet a property value.\nSet the Linux security label.\nSet the numeric process ID, on platforms that have this …\nSet the numeric Unix user ID, as defined by POSIX.\nSet the Windows security identifier in its string form.\nTries to launch the executable associated with a name …\nThe numeric Unix group IDs (including both the primary …\nThe numeric Unix user ID, as defined by POSIX.\nThis method adds to or modifies that environment when …\nThe Windows security identifier in its string form, e.g. …\nBuilder for <code>MatchRule</code>.\nA bus match rule for subscribing to specific messages.\nOwned sibling of <code>MatchRule</code>.\nThe path or path namespace.\nAppend an arguments.\nAppend a path argument.\nAdd an argument of a specified index.\nSet 0th argument’s namespace.\nMatch messages whose first argument is within the …\nAdd a path argument of a specified index.\nThe argument paths.\nThe arguments.\nBuild the <code>MatchRule</code>.\nCreate a builder for <code>MatchRule</code>.\nSet the destination.\nThe destination, if set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the inner <code>MatchRule</code>.\nSet the interface.\nThe interfac, if set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to the inner <code>MatchRule</code>, consuming <code>self</code>.\nCreates an owned clone of <code>self</code>.\nCreates an owned clone of <code>self</code>.\nMatch the given message against this rule.\nSet the member.\nThe member name if set.\nSet the message type.\nThe message type, if set.\nSet the path.\nSet the path namespace.\nThe path or path namespace, if set.\nSet the sender.\nThe sender, if set.\nCreates an owned clone of <code>self</code>.\nThis flag may be set on a method call message to inform …\nThe D-Bus message is in big-endian (network) byte order.\nThe body of a message.\nA builder for <code>Message</code>\nD-Bus code for endianness.\nAn error in response to a method call.\nPre-defined flags that can be passed in Message header.\nThe message header, containing all the metadata about the …\nThe D-Bus message is in little-endian byte order.\nA D-Bus Message.\nMethod call. This message type may prompt a reply (and …\nA reply to a method call.\nSignature of the target’s native endian.\nThe bus must not launch an owner for the destination name …\nThis message does not expect method return replies or …\nThe primary message header, which is present in all D-Bus …\nA position in the stream of <code>Message</code> objects received by a …\nSignal emission.\nMessage header representing the D-Bus type of the message.\nThe body that you can deserialize using <code>Body::deserialize</code>.\nThe byte length of the message body.\nBuild the <code>Message</code> with the given body.\nCreate a new message from a raw slice of bytes to populate …\nGet a reference to the underlying byte encoding of the …\nGet a reference to the underlying byte encoding of the …\nDeserialize the body using the contained signature.\nDeserialize the body (without checking signature matching).\nSet the name of the connection this message is intended …\nThe name of the connection this message is intended for.\nSet the endianness of the message.\nD-Bus code for endian encoding of the message.\nCreate a message of type <code>Type::Error</code>.\nThe name of the error that occurred, for errors.\nThe message flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a message from bytes.\nThe message header.\nSet the interface to invoke a method call on, or that a …\nThe interface to invoke a method call on, or that a signal …\nThe interface to invoke a method call on, or that a signal …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the primary header, consuming <code>self</code>.\nWhether the body is empty.\nThe length of the body in bytes.\nSet the member, either the method name or signal name.\nThe member, either the method name or signal name.\nThe member, either the method name or signal name.\nReference to the message this body belongs to.\nThe message type\nThe message type.\nCreate a builder for message of type <code>Type::MethodCall</code>.\nCreate a message of type <code>Type::MethodCall</code>.\nCreate a builder for message of type <code>Type::Error</code>.\nCreate a builder for message of type <code>Type::MethodReturn</code>.\nCreate a message of type <code>Type::MethodReturn</code>.\nThe message type.\nCreate a new <code>PrimaryHeader</code> instance.\nSet the object to send a call to, or the object a signal …\nThe object to send a call to, or the object a signal is …\nThe object to send a call to, or the object a signal is …\nGet a reference to the primary header.\nGet a mutable reference to the primary header.\nThe major version of the protocol the message is compliant …\nGet the receive ordering of a message.\nThe serial number of the message this message is a reply …\nThe serial number of the message this message is a reply …\nSet the unique name of the sending connection.\nUnique name of the sending connection.\nThe serial number of the message.\nSet the byte length of the message body.\nSet the D-Bus code for endian encoding of the message.\nSet the message flags.\nSet the message type.\nSet the major version of the protocol the message is …\nSet the serial number of the message.\nCreate a message of type <code>Type::Signal</code>.\nCreate a builder for message of type <code>Type::Signal</code>.\nThe signature of the body.\nThe signature of the message body.\nThe number of Unix file descriptors that accompany the …\nAdd flags to the message.\nThe method was found and will be completed by running this …\nA helper type returned by <code>Interface</code> callbacks.\nThe trait is used to dispatch messages to an interface …\nOpaque structure that derefs to an <code>Interface</code> type.\nOpaque structure that mutably derefs to an <code>Interface</code> type.\nWrapper over an interface, along with its corresponding …\nThis interface does not support the given method\nAn object server, holding server-side D-Bus objects &amp; …\nRetry with Interface::call_mut.\nA response wrapper that notifies after response has been …\nA signal emission context.\nRegister a D-Bus <code>Interface</code> at a given path. (see the …\nCall a method.\nCall a <code>&amp;mut self</code> method.\nGet a reference to the associated connection.\nGet a reference to the associated destination (if any).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new signal context for the given connection and …\nGet a property value. Returns <code>None</code> if the property doesn’…\nGet a reference to the underlying interface.\nReturn all the properties.\nGet a reference to the underlying interface.\nGet the interface at the given path.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an owned clone of <code>self</code>.\nWrite introspection XML to the writer, with the given …\nReturn the name of the interface. Ex: “…\nCreate a new signal context for the given connection and …\nCreate a new <code>NotifyResponse</code>.\nHelper for creating the Async variant\nGet a reference to the associated object path.\nUnregister a D-Bus <code>Interface</code> at a given path.\nGet the response.\nSet a property value.\nSet a property value.\nSet the destination for the signal emission.\nSet a property value.\nWhether each method call will be handled from a different …\nWhether each method call will be handled from a different …\nCreates an owned clone of <code>self</code>.\nIndicates to the receiver that this client is prepared to …\nBuilder for proxies.\nThe properties caching mode.\nCache properties but only populate the cache on the first …\nFlags to use with <code>Proxy::call_with_flags</code>.\nDon’t cache properties.\nWhen set on a call whose destination is a message bus, …\nNo response is expected from this method call, regardless …\nA <code>stream::Stream</code> implementation that yields <code>UniqueName</code> …\nA property changed event.\nA <code>stream::Stream</code> implementation that yields property …\nA client-side interface proxy.\nTrait for the default associated values of a proxy.\nThis trait is implemented by all async proxies, which are …\nA <code>stream::Stream</code> implementation that yields signal messages…\nCache properties. The properties will be cached upfront as …\nBuild a proxy from the builder.\nReturns a customizable builder for this proxy.\nSet the properties caching mode.\nGet the cached value of the property <code>property_name</code>.\nGet the cached value of the property <code>property_name</code>.\nCall a method and return the reply body.\nCall a method and return the reply.\nCall a method without expecting a reply\nCall a method and return the reply body, optionally …\nGet a reference to the associated connection.\nSet the proxy destination address.\nGet a reference to the destination service name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the property <code>property_name</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nSet the proxy interface.\nGet a reference to the interface.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nIntrospect the associated object, and return the XML …\nThe bus name being tracked.\nThe signal name.\nCreate a new <code>Builder</code> for the given connection.\nCreate a new <code>Proxy</code> for the given …\nCreate a new <code>Builder</code> for the given connection.\nCreate a new <code>Proxy</code> for the given …\nSet the proxy path.\nGet a reference to the object path.\nCreate a stream for all signals emitted by this service.\nGet a stream to receive destination owner changed events.\nGet a stream to receive property changed events.\nCreate a stream for signal named <code>signal_name</code>.\nSame as <code>Proxy::receive_signal</code> but with a filter.\nSet the property <code>property_name</code>.\nSpecify a set of properties (by name) which should be …")