searchState.loadedDescShard("image", 0, "Overview\nPixel is 8-bit alpha\n<code>AnimationDecoder</code> trait\nAn Image in AVIF Format\nPixel contains 8-bit B, G and R channels\nPixel is 8-bit BGR with an alpha channel\nAn Image in BMP Format\nThe number of channels of this pixel type.\nA string that can help to interpret the meaning each …\nThis pixel has the format of one of the predefined …\nPixel is 8-bit CMYK\nAn enumeration over supported color types and bit depths\nInputs to <code>ImageBuffer::copy_from_color_space</code>.\nThe maximum value for this type of primitive within the …\nThe minimum value for this type of primitive within the …\nAn Image in DDS Format\nThe delay of a frame relative to the previous one.\nA Dynamic Image\nTypes which are safe to treat as an immutable byte slice …\nAn enumeration of color types encountered in image formats.\nAn Image in farbfeld Format\nA flat buffer over a (multi channel) image.\nA single animation frame\nAn implementation dependent iterator, reading the frames …\nA trait for manipulating images.\nTrait to inspect an image.\nAn Image in GIF Format\nSendable grayscale + alpha channel image buffer\nSendable grayscale image buffer\nReturns true if the alpha channel is contained.\nReturns true if the alpha channel is contained.\nAn Image in Radiance HDR Format\nAn Image in ICO Format\nGeneric image buffer\nThe trait that all decoders implement\nSpecialized image decoding not be supported by all formats\nThe trait all encoders implement\nAn enumeration of supported image formats. Not all formats …\nEach pixel in this image is 16-bit Luma\nEach pixel in this image is 8-bit Luma\nEach pixel in this image is 16-bit Luma with alpha\nEach pixel in this image is 8-bit Luma with alpha\nA multi-format image reader.\nEach pixel in this image is 16-bit Rgb\nEach pixel in this image is 32-bit float Rgb\nEach pixel in this image is 8-bit Rgb\nEach pixel in this image is 16-bit Rgb with alpha\nEach pixel in this image is 32-bit float Rgb with alpha\nEach pixel in this image is 8-bit Rgb with alpha\nAn Image in JPEG Format\nPixel is 1-bit luminance\nPixel is 16-bit luminance\nPixel is 16-bit luminance\nPixel is 2-bit luminance\nPixel is 4-bit luminance\nPixel is 8-bit luminance\nPixel is 8-bit luminance\nPixel is 1-bit luminance with an alpha channel\nPixel is 16-bit luminance with an alpha channel\nPixel is 16-bit luminance with an alpha channel\nPixel is 2-bit luminance with an alpha channel\nPixel is 4-bit luminance with an alpha channel\nPixel is 8-bit luminance with an alpha channel\nPixel is 8-bit luminance with an alpha channel\nSet of supported strict limits for a decoder.\nResource limits for decoding.\nGrayscale colors.\nGrayscale colors + alpha channel\nAn Image in OpenEXR Format\nA generalized pixel.\nThe type of pixel.\nThe pixel with an associated <code>ColorType</code>. Not all possible …\nImmutable pixel iterator\nAn Image in PNG Format\nAn Image in general PNM Format\nThe type of each channel in a pixel. For example, this can …\nAn Image in QOI Format\nRGB colors.\nPixel contains 1-bit R, G and B channels\nPixel is 16-bit RGB\nPixel contains 16-bit R, G and B channels\nPixel contains 2-bit R, G and B channels\nPixel is 32-bit float RGB\nPixel is 32-bit float RGB\nAn image buffer for 32-bit float RGB pixels, where the …\nPixel contains 4-bit R, G and B channels\nPixel contains 8-bit R, G and B channels\nPixel contains 8-bit R, G and B channels\nSendable Rgb image buffer\nRGB colors + alpha channel\nPixel is 1-bit RGB with an alpha channel\nPixel is 16-bit RGBA\nPixel is 16-bit RGB with an alpha channel\nPixel is 2-bit RGB with an alpha channel\nPixel is 32-bit float RGBA\nPixel is 32-bit float RGBA\nAn image buffer for 32-bit float RGBA pixels, where the …\nPixel is 4-bit RGB with an alpha channel\nPixel is 8-bit RGB with an alpha channel\nPixel is 8-bit RGB with an alpha channel\nSendable Rgb + alpha channel image buffer\nA View into another image\nThe scalar type that is used to store each channel in this …\nAn Image in TGA Format\nAn Image in TIFF Format\nPixel is of unknown color type with the specified bits per …\nAn Image in WEBP Format\nAdjust the contrast of this image. <code>contrast</code> is the amount …\nReturn all <code>ImageFormat</code>s\nApply the function <code>f</code> to each channel of this pixel.\nApply the function <code>f</code> to each channel of this pixel and …\nApply a color space to an image, transforming the pixel …\nChange the color space, modifying pixel values to refer to …\nRotates and/or flips the image as indicated by Orientation.\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nGet the bytes of this value.\nReturn this image’s pixels as a native endian byte slice.\nReturn a view on the raw sample buffer.\nReturn a view on the raw sample buffer for 32bit per …\nReturn a mutable view on the raw sample buffer.\nReturn a view on the raw sample buffer for 16 bit per …\nReturn a view on the raw sample buffer for 8 bit per …\nReturn a reference to an 16bit Grayscale image\nReturn a reference to an 8bit Grayscale image\nReturn a reference to an 16bit Grayscale image with an …\nReturn a reference to an 8bit Grayscale image with an …\nReturn a mutable reference to an 16bit Grayscale image\nReturn a mutable reference to an 8bit Grayscale image\nReturn a mutable reference to an 16bit Grayscale image …\nReturn a mutable reference to an 8bit Grayscale image with …\nReturn a mutable reference to an 16bit RGB image\nReturn a mutable reference to an 32bit RGB image\nReturn a mutable reference to an 8bit RGB image\nReturn a mutable reference to an 16bit RGBA image\nReturn a mutable reference to an 32bit RGBA image\nReturn a mutable reference to an 8bit RGBA image\nReturns the underlying raw buffer\nReturn a reference to an 16bit RGB image\nReturn a reference to an 32bit RGB image\nReturn a reference to an 8bit RGB image\nReturn a reference to an 16bit RGBA image\nReturn a reference to an 32bit RGBA image\nReturn a reference to an 8bit RGBA image\nReturns the number of bits contained in a pixel of …\nReturns the number of bits per pixel for this color type.\nBlend the color of a given pixel into ourself, taking into …\nPut a pixel at location (x, y), taking into account alpha …\nPut a pixel at location (x, y), taking into account alpha …\nPerforms a Gaussian blur on this image.\nPerforms a Gaussian blur on this image.\nBrighten the pixels of this image. <code>value</code> is the amount to …\nIterators and other auxiliary structure for the <code>ImageBuffer</code>…\nReturns the image buffer\nCreate an empty <code>ImageBuffer</code> with the same pixel type as …\nCreate an empty <code>ImageBuffer</code> with the same pixel type as …\nReturns a mutable image buffer\nCreate an empty <code>ImageBuffer</code> with different dimensions.\nCreate an empty <code>ImageBuffer</code> with different dimensions.\nReturns the number of bytes contained in a pixel of …\nReturn if the <code>ImageFormat</code> can be decoded by the lib.\nReturn if the <code>ImageFormat</code> can be encoded by the lib.\nChange the coordinates of this subimage.\nReturns the number of color channels that make up this …\nGet the number of channels for colors of this type.\nReturns the components as a slice.\nReturns the channels of this pixel as a 4 tuple. If the …\nReturns the components as a mutable slice\nThis function checks the <code>max_image_width</code> and …\nThis function checks that all currently set strict limits …\nRemove the current information on the image format.\nEncoding and decoding for various image file formats.\nSteps through the iterator from the current frame until …\nReturn this image’s color type.\nSupplementary color information.\nGet the Cicp encoding of this buffer’s color data.\nGet the Cicp encoding of this buffer’s color data.\nReturns the color type of the image data produced by this …\nReturns the ColorType that is equivalent to this …\nExamples\nChange the color space and pixel type of this image.\nCopies all of the pixels from another image into this …\nCopies all of the pixels from another image into this …\nCopy pixel data from one buffer to another, calculating …\nCopy pixel data from one buffer to another.\nCopies all of the pixels from one part of this image to …\nCopies all of the pixels from one part of this image to …\nReturn a cut-out of this image delimited by the bounding …\nReturn a cut-out of this image delimited by the bounding …\nRead the image (replaces <code>load</code>).\nDelay of this frame\nThe width and height of this image.\nReturns a tuple containing the width and height of the …\nThe width and height of this image.\nEnumerates over the pixels of the image. The iterator …\nEnumerates over the pixels of the image. The iterator …\nEnumerates over the rows of the image. The iterator yields …\nEnumerates over the rows of the image. The iterator yields …\nContains detailed error representation.\nReturns the raw Exif chunk, if it is present. A …\nReturns the raw Exif chunk, if it is present. A …\nExpands a color palette by re-using the existing buffer. …\nExpands a color palette by re-using the existing buffer. …\nReturn a list of applicable extensions for this format.\nPerforms a fast blur on this image.\nFilters this image with the specified 3x3 kernel.\nImage representations for ffi.\nFlip this image horizontally\nFlip this image vertically\nGet the currently determined format.\nThis function increases the <code>max_alloc</code> limit with amount. …\nThis function acts identically to <code>free</code>, but takes a <code>usize</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a pixel from the 4 channels a, b, c and d. If …\nDecodes an encoded image into a dynamic image.\nReturn the image format specified by a path’s file …\nConstructs a new <code>ImageBuffer</code> by repeated application of …\nReturn the image format specified by a MIME type.\nCreate a delay from a ratio of milliseconds.\nConstructs a new frame\nReturn the image format specified by the path’s file …\nConstructs a new <code>ImageBuffer</code> by copying a pixel\nConstructs a buffer from a generic container (for example …\nConvert from a duration, clamped between 0 and an …\nReturns a view into a slice.\nReturns mutable view into a mutable slice.\nCreates an image buffer out of an existing buffer. Returns …\nReturns the pixel located at (x, y). Indexed from top left.\nGets a reference to the pixel at location <code>(x, y)</code>\nGets a reference to the pixel at location <code>(x, y)</code> or …\nGets a reference to the mutable pixel at location <code>(x, y)</code>. …\nGets a reference to the mutable pixel at location <code>(x, y)</code>\nDo not use is function: It is unimplemented!\nGets a reference to the mutable pixel at location <code>(x, y)</code> …\nReturn a grayscale version of this image. Returns <code>Luma</code> …\nGuess image format from memory block\nReturns if there is an alpha channel.\nWhether the image contains an alpha channel\nReturns false if the color scheme is grayscale, true …\nThe height of this image.\nThe height of this image.\nThe height of this image.\nReturns the height of the underlying image\nThis module provides a way to register decoding hooks for …\nHue rotate the supplied image. <code>value</code> is the degrees to …\nReturns the ICC color profile embedded in the image, or …\nReturns the ICC color profile embedded in the image, or …\nRead a tuple containing the (width, height) of the image …\nImage Processing Functions\nReturns true if this x, y coordinate is contained inside …\nReturns true if this x, y coordinate is contained inside …\nReturn a reference to a single sample at specified …\nReturn a mutable reference to a single sample at specified …\nGet a reference to the underlying image.\nGet a mutable reference to the underlying image.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the image buffer\nReturn this image’s pixels as a byte vector. If the …\nConvert the reader into a decoder.\nRead the image dimensions.\nReturn the raw sample buffer with its stride an dimension …\nConsume the decoder producing a series of frames.\nUnwrap the reader.\nConsume the image and returns a Luma image.\nConsume the image and returns a Luma image.\nConsume the image and returns a <code>LumaA</code> image.\nConsume the image and returns a <code>LumaA</code> image.\nReturns the underlying raw buffer\nConsume the image and returns a RGB image.\nConsume the image and returns a RGB image.\nConsume the image and returns a RGB image.\nConsume the image and returns a RGBA image.\nConsume the image and returns a RGBA image.\nConsume the image and returns a RGBA image.\nConsumes the image buffer and returns the underlying data …\nInvert this pixel\nInvert the colors of this image. This method operates …\nDeprecated io module the original io module has been …\nA <code>repr(C)</code> description of the layout of buffer samples.\nReturns the x offset\nSet a custom set of decoding limits.\nCreate a new image from a Reader.\nCreate a new image from a byte slice\nCreate a new image from a byte slice\nApply the function <code>f</code> to each channel of this pixel.\nApply the function <code>f</code> to each channel of this pixel and …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nMathematical helper functions and types.\nThe maximum allowed sum of allocations allocated by the …\nThe maximum allowed image height. This limit is strict. …\nThe maximum allowed image width. This limit is strict. The …\nTypes describing image metadata\nCreates a new <code>Frames</code> from an implementation specific …\nConstructs a new frame without any delay.\nCreate a new image reader without a preset format.\nCreates a new image buffer based on a <code>Vec&lt;P::Subpixel&gt;</code>.\nCreates a dynamic image backed by a buffer depending on …\nConstruct a new subimage The coordinates set the position …\nCreates a dynamic image backed by a buffer of gray pixels.\nCreates a dynamic image backed by a buffer of gray pixels.\nCreates a dynamic image backed by a buffer of gray pixels …\nCreates a dynamic image backed by a buffer of gray pixels …\nCreates a dynamic image backed by a buffer of RGB pixels.\nCreates a dynamic image backed by a buffer of RGB pixels.\nCreates a dynamic image backed by a buffer of RGB pixels.\nCreates a dynamic image backed by a buffer of RGBA pixels.\nCreates a dynamic image backed by a buffer of RGBA pixels.\nCreates a dynamic image backed by a buffer of RGBA pixels.\nDisable all decoding limits.\nDisable all limits.\nThe numerator and denominator of the delay in milliseconds.\nThe offsets of this subimage relative to the underlying …\nOpen the image located at the path specified. The image’…\nOpen a file to read, format will be guessed from path.\nReturns the orientation of the image.\nReturns the orientation of the image.\nReturns the color type of the image file before decoding\nReturns the color type of the image file before decoding\nReturns an Iterator over the pixels of this image. The …\nReturns an Iterator over the pixels of this image. The …\nReturns an iterator over the pixels of this image. The …\nReturns an iterator over the mutable pixels of this image.\nPut a pixel at location (x, y). Indexed from top left.\nPuts a pixel at location <code>(x, y)</code>\nReturns all the bytes in the image.\nUse <code>read_image</code> instead; this method is an implementation …\nDecode a rectangular section of the image.\nReturn the <code>ImageFormat</code>s which are enabled for reading.\nThis function checks that the current limit allows for …\nThis function acts identically to <code>reserve</code>, but accepts the …\nThis function acts identically to <code>reserve</code>, but takes a …\nResize this image using the specified filter algorithm. …\nResize this image using the specified filter algorithm. …\nResize this image using the specified filter algorithm. …\nRotate this image 180 degrees.\nRotate this image 270 degrees clockwise.\nRotate this image 90 degrees clockwise.\nReturns an iterator over the rows of this image.\nReturns an iterator over the mutable rows of this image.\nGet the format of the buffer when viewed as a matrix of …\nUnderlying linear container holding sample values.\nSaves the buffer to a file at the path specified.\nSaves the buffer to a file with the format derived from …\nSaves the supplied buffer to a file at the path specified.\nSaves the supplied buffer to a file given the path and …\nSaves the buffer to a file at the specified path in the …\nSaves the buffer to a file with the specified format.\nSet primaries and transfer characteristics from a Cicp …\nSet primaries and transfer characteristics from a Cicp …\nSet the EXIF metadata to use for the image.\nSet the EXIF metadata to use for the image.\nSupply the format as which to interpret the read image.\nSet the ICC profile to use for the image.\nSet the ICC profile to use for the image.\nSet the decoder to have the specified limits. See <code>Limits</code> …\nSet the decoder to have the specified limits. See <code>Limits</code> …\nDefine the color space for the image.\nDefine the color space for the image.\nDefine the transfer function for the image.\nDefine the transfer function for the image.\nReturns a mutable subimage that is a view into this image. …\nReturns a mutable subimage that is a view into this image. …\nCreate a mutable sub-view of the image.\nScale this image down to fit within a specific size. …\nScale this image down to a specific size. Returns a new …\nEncodes a dynamic image into a buffer.\nConvert this buffer into a newly allocated buffer, …\nConvert this subimage to an <code>ImageBuffer</code>\nConvert this pixel to luma\nReturns a copy of this image as a Luma image.\nReturns a copy of this image as a Luma image.\nReturns a copy of this image as a Luma image.\nConvert this pixel to luma with an alpha channel\nReturns a copy of this image as a <code>LumaA</code> image.\nReturns a copy of this image as a <code>LumaA</code> image.\nReturns a copy of this image as a <code>LumaA</code> image.\nReturn the MIME type for this image format or “…\nConvert this pixel to RGB\nReturns a copy of this image as an RGB image.\nReturns a copy of this image as an RGB image.\nReturns a copy of this image as an RGB image.\nConvert this pixel to RGB with an alpha channel\nReturns a copy of this image as an RGBA image.\nReturns a copy of this image as an RGBA image.\nReturns a copy of this image as an RGBA image.\nReturns the y offset\nReturns the total number of bytes in the decoded image.\nReturns the total number of bytes in the decoded image.\nReturns a subimage that is an immutable view into this …\nReturns a subimage that is an immutable view into this …\nReturns the pixel located at (x, y). Indexed from top left.\nReturns the pixel located at (x, y). Indexed from top left.\nReturns the pixel located at (x, y), ignoring bounds …\nPuts a pixel at location (x, y). Indexed from top left.\nPuts a pixel at location (x, y). Indexed from top left.\nPuts a pixel at location (x, y), ignoring bounds checking.\nPerforms an unsharpen mask on this image.\nReturns a subimage that is an immutable view into this …\nReturns a subimage that is an immutable view into this …\nCreate a sub-view of the image.\nThe width of this image.\nThe width of this image.\nThe width of this image.\nReturns the width of the underlying image\nConstruct a reader with specified format.\nMake a format guess based on the content, replacing it on …\nWrites the supplied buffer to a writer in the specified …\nWrites all the bytes in an image to the encoder.\nWrites the buffer to a writer in the specified format.\nEncode this image and write it to <code>w</code>.\nWrites the buffer with the given encoder.\nEncode this image with the provided encoder.\nReturn the <code>ImageFormat</code>s which are enabled for writing.\nProvides color conversions for whole image buffers.\nEnumerate the pixels of an image.\nEnumerate the pixels of an image.\nEnumerate the rows of an image.\nEnumerate the rows of an image.\nIterate over pixel refs.\nIterate over mutable pixel refs.\nIterate over rows of an image\nIterate over mutable rows of an image\nConverts <code>self</code> to a buffer of type T\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecoding and Encoding of PNG Images\nUses a heuristic to select one of the preceding filters …\nAn <code>AnimationDecoder</code> adapter of <code>PngDecoder</code>.\nFilters based on the average of left and right neighbor …\nHigh compression level\nCompression level of a PNG encoder. The default setting is …\nDefault compression level\nFast, minimal compression\nFilter algorithms used to process image data to improve …\nNo processing done, best used for low bit depth grayscale …\nAlgorithm that takes into account the left, upper left, …\nPNG decoder\nPNG encoder\nFilters based on previous pixel in the same scanline\nFilters based on the scanline above\nTurn this into an iterator over the animation frames.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the gamma value of the image or None if no gamma …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the image contains an animation.\nCreates a new decoder that decodes from the stream <code>r</code>\nCreate a new encoder that writes its output to <code>w</code>\nCreate a new encoder that writes its output to <code>w</code> with …\nCreates a new decoder that decodes from the stream <code>r</code> with …\nWrite a PNG image with the specified width, height, and …\nAn operation expected a concrete color space but another …\nThe required color type can not be handled.\nDealing with an intricate layout is not implemented for an …\nThe colors or transfer function of the CICP are not …\nAn error was encountered while decoding.\nAn error was encountered while decoding an image.\nThe resulting image exceed dimension limits in either …\nThe dimensions passed are wrong.\nAn error was encountered while encoding.\nAn error was encountered while encoding an image.\nContains the error value\nThe format is known exactly.\nRepeated an operation for which error that could not be …\nAn image format is not supported.\nA string describing the parameter. This is discouraged and …\nSome feature specified by string. This is discouraged and …\nThe generic error type for image operations.\nA best effort representation for image formats.\nResult of an image decoding/encoding process\nThe operation would have performed an allocation larger …\nAn error occurred while interacting with the environment.\nCompleting the operation would have required more …\nIndicates the limit that prevented an operation from …\nCompleting the operation would have required more …\nThe format can be identified by a name.\nThe end of the image has been reached.\nContains the success value\nAn error was encountered in input arguments.\nAn error was encountered in inputs arguments.\nDetails how a parameter is malformed.\nA common path extension for the format is known.\nThe cicp is required to be RGB-like but had other matrix …\nConverting <code>ExtendedColorType</code> to <code>ColorType</code> failed.\nThe format is not known or could not be determined.\nAn operation can not be completed by the chosen …\nThe specified strict limits are not supported for this …\nThe implementation for an operation was not provided.\nDetails what feature is not supported.\nReturns the image format associated with this error.\nReturn the image format associated with this error.\nReturns the image format associated with this error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>UnsupportedError</code> for an image with details on …\nCreate an <code>EncodingError</code> for an image format.\nCreate a <code>DecodingError</code> for an image format.\nConstruct a <code>ParameterError</code> directly from a corresponding …\nConstruct a generic <code>LimitError</code> directly from a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the corresponding <code>UnsupportedErrorKind</code> of the …\nReturns the corresponding <code>ParameterErrorKind</code> of the error.\nReturns the corresponding <code>LimitErrorKind</code> of the error.\nCreate an <code>EncodingError</code> that stems from an arbitrary error …\nCreate a <code>DecodingError</code> that stems from an arbitrary error …\nThe given limits\nThe supported strict limits\nThe cicp that was expected.\nThe cicp that was found.\nThe color format did not match the channel count.\nThe samples are in column-major form and all samples are …\nDenotes invalid flat sample buffers when trying to convert …\nA flat buffer over a (multi channel) image.\nAll samples are packed.\nDifferent normal forms of buffers.\nThe represented image can not use this representation.\nAt least pixels are packed.\nThe samples are in row-major form and all samples are …\nA ffi compatible description of a sample buffer.\nThe represented image was too large.\nNo pixel aliases another.\nA flat buffer that can be used as an image view.\nA mutable owning version of a flat buffer.\nDeprecated - <code>ChannelCountMismatch</code> is used instead\nGet a mutable reference based version.\nView the samples as a slice.\nGet a reference based version.\nView the samples as a slice.\nView this buffer as an image over some type of pixel.\nInterpret this buffer as a mutable image.\nView this buffer but keep mutability at a sample level.\nTuple of bounds in the order of coordinate inputs.\nTuple of bounds in the order of coordinate inputs.\nAdd this to an index to get to the sample in the next …\nThe number of channels in the color representation of the …\nSupplementary color information.\nDescribe a column-major image packed in all directions.\nGet the dimensions <code>(channels, width, height)</code>.\nGet the dimensions <code>(channels, width, height)</code>.\nCheck if a buffer of length <code>len</code> is large enough.\nCheck if a buffer of length <code>len</code> is large enough.\nGet a reference on the inner sample descriptor.\nGet a reference on the sample buffer descriptor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to a single sample.\nGet a mutable reference to a selected subpixel if it is …\nGet a mutable reference to a selected sample.\nGet a reference to a single sample.\nGet a reference to a selected subpixel if it is in-bounds.\nGet a reference to a selected subpixel.\nIf there are any samples aliasing each other.\nIf there are any samples aliasing each other.\nThe height of the represented image.\nAdd this to an index to get to the next sample in …\nMutable portion of the buffer that holds sample values.\nReturn the mutable portion of the buffer that holds sample …\nReturn the mutable buffer that holds sample values.\nReturn the portion of the buffer that holds sample values.\nReturn the portion of the buffer that holds sample values.\nReturn the portion of the buffer that holds sample values.\nCheck that the pixel and the channel index are in bounds.\nCheck that the pixel and the channel index are in bounds.\nGet an index provided it is inbouds.\nGet an index provided it is inbouds.\nResolve the index of a particular sample.\nResolve the index of a particular sample.\nGet the theoretical position of sample (x, y, channel).\nGet the theoretical position of sample (channel, x, y).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake out the sample buffer.\nTake out the sample buffer.\nCheck if a buffer fulfills the requirements of a normal …\nCheck if a buffer fulfills the requirements of a normal …\nA <code>repr(C)</code> description of the layout of buffer samples.\nGet the minimum length of a buffer such that all in-bounds …\nGet the minimum length of a buffer such that all in-bounds …\nGet the minimum length of a buffer such that all in-bounds …\nGet the minimum length of a buffer such that all in-bounds …\nCompares the logical preconditions.\nDescribe a row-major image packed in all directions.\nGet a reference on the inner buffer.\nGet a reference on the inner buffer.\nUnderlying linear container holding sample values.\nShrink the image to the minimum of current and given …\nShrink the image to the minimum of current and given …\nShrink the inner image.\nShrink the inner image.\nGet the strides for indexing matrix-like <code>[(c, w, h)]</code>.\nGet the strides for indexing matrix-like <code>[(c, w, h)]</code>.\nCopy the data into an owned vector.\nMove the data into an image buffer.\nTry to convert this into an image with mutable pixels.\nThe width of the represented image.\nAdd this to an index to get to the next sample in …\nCreate a monocolor image from a single pixel.\nA function to produce an <code>ImageDecoder</code> for a given image …\nA wrapper around a type-erased trait object that …\nReturns whether a decoding hook has been registered for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegister a new decoding hook or returns false if one …\nRegisters a format detection hook.\nColor operations\nCubic Filter\nColor operations\nAvailable Sampling Filters.\nGaussian Filter\nHolds analytical gaussian blur representation\nLanczos with window 3\nNearest Neighbor\nBuilt-in smoothing kernel with size 3.\nBuilt-in smoothing kernel with size 5.\nBuilt-in smoothing kernel with size 7.\nLinear Filter\nPerforms a Gaussian blur on the supplied image.\nPerforms a Gaussian blur on the supplied image.\nColor operations\nFunctions for altering and converting the color of …\nColor operations\nReturn a mutable view into an image The coordinates set …\nReturn an immutable view into an image The coordinates set …\nColor operations\nApproximation of Gaussian blur.\nPerform a 3x3 box filter on the supplied image.\nAffine transformations Flip an image horizontally\nAffine transformations Flip an image horizontally and put …\nAffine transformations Flip an image horizontally in place.\nAffine transformations Flip an image vertically\nAffine transformations Flip an image vertically and put …\nAffine transformations Flip an image vertically in place.\nReturns the argument unchanged.\nReturns the argument unchanged.\nColor operations\nColor operations\nColor operations\nColor operations\nFill the image with a linear horizontal gradient\nColor operations\nColor operations\nLinearly sample from an image using coordinates in [0, w-1]…\nSample from an image using coordinates in [0, w-1] and [0, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nColor operations\nCreates a new anisotropic parameter set from kernel sizes\nCreates a new parameters set from kernel size only.\nCreates a new parameters set from radius only.\nCreates a new parameters set from sigma only\nOverlay an image at a given coordinate (x, y)\nCalculate the region that can be copied from top to bottom.\nReplace the contents of an image at a given coordinate (x, …\nResize the supplied image to the specified dimensions.\nAffine transformations Rotate an image 180 degrees …\nAffine transformations Rotate an image 180 degrees …\nAffine transformations Rotate an image 180 degrees …\nAffine transformations Rotate an image 270 degrees …\nAffine transformations Rotate an image 270 degrees …\nAffine transformations Rotate an image 90 degrees …\nAffine transformations Rotate an image 90 degrees …\nLinearly sample from an image using coordinates in [0, 1].\nSample from an image using coordinates in [0, 1], taking …\nResize the supplied image to the specific dimensions.\nTile an image by repeating it multiple times\nPerforms an unsharpen mask on the supplied image.\nFill the image with a linear vertical gradient\nA bi-level color map\nThe color type on which the map operates on\nA color map\nBrighten the supplied image. <code>value</code> is the amount to …\nBrighten the supplied image in place. <code>value</code> is the amount …\nAdjust the contrast of the supplied image. <code>contrast</code> is the …\nAdjust the contrast of the supplied image in place. …\nReduces the colors of the image using the supplied …\nReturns the argument unchanged.\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to a grayscale image with the …\nConvert the supplied image to a grayscale image with the …\nDetermine if this implementation of <code>ColorMap</code> overrides the …\nIndicate <code>NeuQuant</code> implements <code>lookup</code>.\nHue rotate the supplied image. <code>value</code> is the degrees to …\nHue rotate the supplied image in place.\nReduces the colors using the supplied <code>color_map</code> and …\nReturns the index of the closest match of <code>color</code> in the …\nCalls <code>U::from(self)</code>.\nInvert each pixel within the supplied image. This function …\nLooks up color by index in the color map.  If <code>idx</code> is out …\nMaps <code>color</code> to the closest color in the color map.\nDeprecated re-export of <code>LimitSupport</code>\nDeprecated re-export of <code>Limits</code>\nDeprecated re-export of <code>ImageReader</code> as <code>Reader</code>\nThe maximum allowed sum of allocations allocated by the …\nThe maximum allowed image height. This limit is strict. …\nThe maximum allowed image width. This limit is strict. The …\nA Rectangle defined by its top left corner, width and …\nReturns the argument unchanged.\nThe rectangle’s height.\nCalls <code>U::from(self)</code>.\nThe rectangle’s width.\nThe x coordinate of the top left corner.\nThe y coordinate of the top left corner.\nRec. ITU-R BT.1361-0 extended colour gamut system …\nRec. ITU-R BT.2020-2 (constant luminance)\nRec. ITU-R BT.2020-2 (non-constant luminance) Rec. ITU-R …\nRec. ITU-R BT.2020-2 (10-bit system) (functionally the …\nRec. ITU-R BT.2020-2 (12-bit system) (functionally the …\nRec. ITU-R BT.2100-2 ICTCp\nARIB STD-B67 Rec. ITU-R BT.2100-2 hybrid log- gamma (HLG) …\nRec. ITU-R BT.470-6 System B, G (historical)\nRec. ITU-R BT.470-6 System B, G (historical) Rec. ITU-R …\nRec. ITU-R BT.470-6 System M (historical) United States …\nSMPTE 170M functionally equivalent to 7\nRec. ITU-R BT.601-7 525 or 625 Rec. ITU-R BT.1358-1 525 or …\nRec. ITU-R BT.709-6 Rec. ITU-R BT.1361-0 conventional …\nRec. ITU-R BT.709-6 Rec. ITU-R BT.1361-0 conventional …\nChromaticity-derived constant luminance system\nChromaticity-derived non-constant luminance system\nReference: https://www.itu.int/rec/T-REC-H.273-202407-I/en …\nDefines the exact color of red, green, blue primary colors.\nRefer to Rec H.273 Table 4.\nThe transfer characteristics, expressing relation between …\nApply to colors of the input color space to get output …\nThe used encoded value range.\nThe  Display-P3 color space, a wide-gamut choice with …\nFlip horizontally. Can be performed in-place.\nFlip vertically. Can be performed in-place.\nThe color components are encoded in the full range, e.g., …\nGeneric film (colour filters using Illuminant C)\nThe identity matrix. Typically used for GBR (often …\nIEC 61966-2-4\nCorresponds to value 22 but\nColour representation developed in SMPTE as IPT-PQ-C2.\nLinear transfer characteristics\nLogarithmic transfer characteristic (100:1 range)\nLogarithmic transfer characteristic (100 * Sqrt( 10 ) : 1 …\nThe color components are encoded in a limited range, e.g., …\nDo not perform any transformations.\nDescribes the transformations to be applied to the image. …\nRec. ITU-R BT.2020-2 Rec. ITU-R BT.2100-2\nSMPTE 240M functionally equivalent to 6\nITU-R BT.470-6 System B, G\nITU-R BT.470-6 System M\nRotate by 180 degrees. Can be performed in-place.\nRotate by 270 degrees clockwise. Equivalent to rotating by …\nRotate by 270 degrees clockwise and flip horizontally.\nRotate by 90 degrees clockwise.\nRotate by 90 degrees clockwise and flip horizontally.\nThe sRGB color space, BT.709 transfer function and D65 …\nSRGB primaries and whitepoint with linear samples.\nITU-R BT.709-6\nIEC 61966-2-1 sRGB (with MatrixCoefficients equal to 0) …\n(functionally the same as the value 5)\nSMPTE ST 2084 for 10-, 12-, 14- and 16-bit systems Rec. …\nSMPTE ST 2085\nSMPTE ST 240\nSMPTE ST 240\nSMPTE ST 428-1\nSMPTE RP 431-2 (aka. DCI P3)\nSMPTE EG 432-1, DCI P3 variant with the D65 whitepoint …\nExplicitly, the color space is not determined.\nExplicitly, the transfer characteristics are not …\nExplicitly, the matrix coefficients are not determined.\nUnited States Federal Communications Commission (2003) …\nSMPTE ST 428-1\nYCgCo\nYCgCo with added bit-depth (2-bit).\nYCgCo with added bit-depth (1-bit).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from Exif orientation\nExtracts the image orientation from a raw Exif chunk.\nWhether the color components use all bits of the encoded …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA matrix between linear values and primary color …\nConstruct a transform between two color spaces.\nDefines the exact color of red, green, blue primary colors.\nExtracts the image orientation from a raw Exif chunk and …\nConverts into Exif orientation\nThe electro-optical transfer function (EOTF) that maps …")