searchState.loadedDescShard("serde_xml_rs", 0, "Serde XML\nA wrapper around an <code>std::io::Read</code> instance which provides …\nParser configuration structure. <strong>There are more config </strong>…\nAdds a new entity mapping and returns an updated config …\nAllows invalid documents. There should be only a single …\nSee <code>ParserConfig</code> fields docs for details\nWhether or not should CDATA be converted to characters. …\nSee <code>ParserConfig</code> fields docs for details\nWhether or not should sequential <code>Characters</code> events be …\nSet encoding from the MIME type. Important for HTTP …\nCreates an XML reader with this configuration. The reader …\nReturns the DOCTYPE of the document if it has already been …\nA map of extra entities recognized by the parser. Default …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA convenience method to create an <code>XmlReader</code> from a string …\nSee <code>ParserConfig</code> fields docs for details\nWhether or not should comments be omitted. Default is true.\nSee <code>ParserConfig</code> fields docs for details\nWhether or not the parser should ignore the end of stream. …\nAllow <code>&lt;?xml encoding=&quot;bogus&quot;?&gt;</code>\nSee <code>ParserConfig</code> fields docs for details\nWhether or not whitespace at the root level of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps this <code>EventReader</code>, returning the underlying reader.\nMax number of bytes in each attribute\nMax number of attributes per element\nMaximum length of strings reprsenting characters, …\nEntities can expand into other entities this many times …\nAbort if custom entities create a string longer than this\nMaximum length of tag name or attribute name\nCreates a new reader, consuming the given stream. The …\nReturns a new config with default values.\nCreates a new reader with the provded configuration, …\nPulls and returns next XML event from the stream.\nSet if you got one in the HTTP header (see <code>content_type</code>)\nReturns the position of the last event produced by the …\nSee <code>ParserConfig</code> fields docs for details\nWhether or not non-unicode entity references get replaced …\nSkips all XML events until the next end tag at the current …\nAccess underlying reader\nAccess underlying reader\nSee <code>ParserConfig</code> fields docs for details\nWhether or not should whitespace in textual events be …\nSee <code>ParserConfig</code> fields docs for details\nWhether or not should whitespace be converted to …\nReturns the argument unchanged.\nA convenience method for deserialize some object from a …\nA convenience method for deserialize some object from a …\nCalls <code>U::from(self)</code>.\nConfigures whether the deserializer should search all …\nAn XML <code>Serializer</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA convenience method for serializing some object to a …\nA convenience method for serializing some object to a …")