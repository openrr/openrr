searchState.loadedDescShard("strict_num", 0, "A collection of bounded numeric types.\nAn immutable, finite <code>f32</code>.\nAn immutable, finite <code>f64</code>.\nAn immutable, finite <code>f32</code> that is known to be &gt; 0.\nAn immutable, finite <code>f64</code> that is known to be &gt; 0.\nAn immutable, finite <code>f32</code> in a 0..=1 range.\nAn immutable, finite <code>f64</code> in a 0..=1 range.\nA <code>NormalizedF32</code> value initialized with one.\nA <code>NormalizedF64</code> value initialized with one.\nAn immutable, finite <code>f32</code> that is known to be &gt;= 0.\nAn immutable, finite <code>f64</code> that is known to be &gt;= 0.\nA <code>PositiveF32</code> value initialized with zero.\nA <code>PositiveF64</code> value initialized with zero.\nA <code>NormalizedF32</code> value initialized with zero.\nA <code>NormalizedF64</code> value initialized with zero.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a <code>FiniteF32</code>.\nReturns the value as a <code>FiniteF64</code>.\nReturns the value as a <code>FiniteF32</code>.\nReturns the value as a <code>FiniteF64</code>.\nReturns the value as a <code>FiniteF32</code>.\nReturns the value as a <code>FiniteF64</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a finite <code>f32</code>.\nCreates a finite <code>f64</code>.\nCreates a new <code>PositiveF32</code> if the given value is &gt;= 0.\nCreates a new <code>PositiveF64</code> if the given value is &gt;= 0.\nCreates a new <code>NonZeroPositiveF32</code> if the given value is &gt; 0.\nCreates a new <code>NonZeroPositiveF64</code> if the given value is &gt; 0.\nCreates a <code>NormalizedF32</code> if the given value is in a 0..=1 …\nCreates a <code>NormalizedF64</code> if the given value is in a 0..=1 …\nCreates a <code>NormalizedF32</code> clamping the given value to a …\nCreates a <code>NormalizedF64</code> clamping the given value to a …\nCreates a <code>NormalizedF64</code> by dividing the given value by …\nCreates a <code>NormalizedF64</code> by dividing the given value by …\nCreates a <code>NormalizedF32</code> by dividing the given value by 255.\nCreates a <code>NormalizedF64</code> by dividing the given value by 255.\nCreates a finite <code>f32</code> without checking the value.\nCreates a finite <code>f64</code> without checking the value.\nCreates a new <code>PositiveF32</code> without checking the value.\nCreates a new <code>PositiveF64</code> without checking the value.\nCreates a new <code>NonZeroPositiveF32</code> without checking the …\nCreates a new <code>NonZeroPositiveF64</code> without checking the …\nCreates a new <code>NormalizedF32</code> without checking the value.\nCreates a new <code>NormalizedF64</code> without checking the value.\nReturns the value as a <code>u16</code>.\nReturns the value as a <code>u16</code>.\nReturns the value as a <code>u8</code>.\nReturns the value as a <code>u8</code>.")