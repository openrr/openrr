searchState.loadedDescShard("assimp", 0, "assimp - Open Asset Import Library\nThe <code>export</code> module implements functionality for exporting …\nThe <code>import</code> module contains functionality for importing …\nThe <code>math</code> module contains definitions of primitive math …\nThe <code>scene</code> module contains definitions of imported scene …\nThe <code>Importer</code> type.\nConfigures whether the AC importer evaluates subdivision …\nConfigures the AC importer to collect all surfaces which …\nApply post-processing to an already-imported scene.\nConfigures the ASE importer to always reconstruct normal …\nCalculates the tangents and bitangents for the imported …\nTells the Collada importer to ignore the up direction …\nThis step removes bones losslessly or according to some …\nA hint to Assimp to favour speed against import quality.\nSpecifies whether the FBX importer will drop empty …\nSet whether the FBX importer will preserve pivot points …\nSet whether the FBX importer will merge all geometry …\nSet whether the FBX importer will read all materials …\nSet whether the FBX importer will read animations.\nSet whether the FBX importer will read cameras.\nSet whether the FBX importer will read light sources.\nSet whether the FBX importer will read materials.\nSet whether the FBX importer will read embedded textures.\nSet whether the FBX importer will act in strict mode in …\nThis step searches all meshes for degenerate primitives …\nThis step searches for duplicate meshes and replaces them …\nThis step searches all meshes for invalid data, such as …\nThis step tries to determine which meshes have normal …\nThis step flips all UV coordinates along the y-axis and …\nThis step adjusts the output face winding order to be CW.\nReturns the argument unchanged.\nThis step converts non-UV mappings (such as spherical or …\nGenerates normals for imported meshes.\nGet a list of all file extensions supported by Assimp.\nSet the vertex animation keyframe to be imported\nSpecifies whether the IFC loader will use its own, custom …\nSpecifies whether the IFC loader skips over shape …\nSpecifies whether the IFC loader skips over IfcSpace …\nSets the colormap to be used to decode embedded textures …\nGlobal setting to disable generation of skeleton dummy …\nReorders triangles for better vertex cache locality.\nCalls <code>U::from(self)</code>.\nDefines the output frame rate of the IRR loader.\nIdentifies and joins identical vertex data sets within all …\nLimits the number of bones simultaneously affecting a …\nConfigures the LWO importer to load just one layer from …\nConfigures the LWO importer to load just one layer from …\nDefines the end of the time range for which the LWS loader …\nDefines the begin of the time range for which the LWS …\nConverts all the imported data to a left-handed coordinate …\nOverride <code>global_keyframe</code> property for the MD2 importer.\nConfigures the MD3 importer to detect and process …\nOverride <code>global_keyframe</code> property for the MD3 importer.\nSpecify the Quake 3 shader file to be used for a …\nTells the MD3 importer which skin files to load.\nConfigures the MD5 loader to not load the MD5ANIM file for …\nOverride <code>global_keyframe</code> property for the MDC importer.\nOverride <code>global_keyframe</code> property for the MDL importer.\nEnables time measurements.\nCreate a new Importer.\nOgre Importer will try to find referenced materials from …\nOgre Importer detect the texture usage from its filename.\nA postprocessing step to optimize the scene hierarchy.\nA postprocessing step to reduce the number of meshes.\nRemoves the node graph and pre-transforms all vertices …\nLoad a scene from the specified file.\nLoad a scene from a string.\nRemoves some parts of the data structure (animations, …\nSearches for redundant/unreferenced materials and removes …\nOverride <code>global_keyframe</code> property for the SMD importer.\nThis step splits meshes with more than one primitive type …\nThis step splits meshes with many bones into sub-meshes so …\nSplits large meshes into smaller sub-meshes.\nArgument structs for <code>Importer</code> post-processing …\nConfigures the terragen importer to compute UVs for …\nThis step applies per-texture UV transformations and bakes …\nTriangulates all faces of all meshes.\nConfigures the Unreal importer to separate faces with …\nOverride <code>global_keyframe</code> property for the Unreal importer.\nValidates the imported scene data structure.\nArguments for <code>calc_tangent_space</code> post-process step.\nEnumerates components of the Scene and Mesh data …\nArguments for <code>debone</code> post-process step.\nArguments for <code>find_degenerates</code> post-process step.\nArguments for <code>find_invalid_data</code> post-process step.\nArguments for <code>generate_normals</code> post-process step.\nArguments for <code>improve_cache_locality</code> post-process step.\nArguments for <code>limit_bone_weights</code> post-process step.\nArguments for <code>optimize_graph</code> post-process step.\nArguments for <code>pre_transform_vertices</code> post-process step.\nArguments for <code>remove_component</code> post-process step.\nArguments for <code>remove_redundant_materials</code> post-process step.\nArguments for <code>sort_by_primitive_type</code> post-process step.\nArguments for <code>split_by_bone_count</code> post-process step.\nArguments for <code>split_large_meshes</code> post-process step.\nArguments for <code>transform_uv_coords</code> post-process step.\nSpecify the accuracy for considering animation values as …\nWhether to pre-transform all vertices using the matrix …\nWhether to require all bones to meet the threshold before …\nSet the size of the post-transform vertex cache. Default: …\nSpecify which components to remove. Default: none\nWhether to enable the step. Default: false\nWhether to enable the step. Default: false\nWhether to enable the step. Default: false\nWhether to enable the step. Default: false\nWhether to enable the step. Default: false\nWhether to enable the step. Default: false\nWhether to enable the step. Default: false\nWhether to enable the step. Default: false\nWhether to enable the step. Default: false\nWhether to enable the step. Default: false\nWhether to enable the step. Default: false\nWhether to enable the step. Default: false\nWhether to enable the step. Default: false\nWhether to enable the step. Default: false\nWhether to enable the step. Default: false\nSpace-delimited list of materials to keep. Identifiers …\nSpace-delimited list of nodes to keep. Identifiers …\nSpecify which UV transforms to evaluate. Default: all\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether to keep the existing scene hierarchy. Default: …\nMaximum number of bones per mesh. Default: 60\nMaximum angle between two vertex tangents used for …\nMaximum angle between two vertex normals used for …\nMaximum number of bones that affect a single vertex. …\nWhether to normalize all vertices into the [-1, 1] range. …\nList of primitive types to remove. Default: none\nWhether to remove any found degenerates. Default: true\nTransformation matrix to use.\nWhether the generated normals are smoothed or not. …\nSource UV channel for tangent space computation. Default: 0\nThreshold for considering bone necessary. Default: 1.0\nMaximum number of triangles per mesh. Default: 1000000\nMaximum number of vertices per mesh. Default: 1000000\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nColor3D docs\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nColor4D docs\nColor4DIter docs\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMatrix3x3 docs\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMatrix4x4 docs\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuaternion docs\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVector2D docs\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVector3D docs\nVector3DIter docs\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAnimation type (not yet implemented)\nAnimation iterator type.\nBone type\nBone iterator type.\nCamera type (not yet implemented)\nCamera iterator type.\nFace type (not yet implemented)\nFace iterator type.\nLight type (not yet implemented)\nLight iterator type.\nMaterial type (not yet implemented)\nMaterial iterator type.\nMesh type (incomplete)\nMesh iterator type.\nThe <code>Node</code> type represents a node in the imported scene …\nNodeAnim type (not yet implemented)\nNodeAnim iterator type.\nNode iterator type.\nQuatKey type (not yet implemented)\nQuatKey iterator type.\nThe <code>Scene</code> type is the root container for all imported …\nTexture type.\nTexture iterator type.\nVectorKey type (not yet implemented)\nVectorKey iterator type.\nVertex weight type\nVertex weight iterator type.\nReturn an individual animation from the scene.\nReturns an iterator over all the animations in the scene.\nReturns an iterator over all the cameras in the scene.\nReturns a vector containing all of the child nodes under …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if any warnings were generated by the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the imported scene is not complete.\nReturns true if the <code>join_identical_vertices</code> post-process …\nReturns true if the imported mesh contained height-map …\nReturns true if the imported scene was successfully …\nReturns an iterator over all the lights in the scene.\nReturns an iterator over all the materials in the scene.\nReturn an individual mesh from the scene.\nReturns an iterator over all the meshes in the scene.\nReturns a vector containing all of the meshes under this …\nReturns the name of the bone.\nReturns the name of the node.\nReturns the number of animations in the scene.\nReturns the number of cameras in the scene.\nReturns the number of child nodes.\nReturns the number of lights in the scene.\nReturns the number of materials in the scene.\nReturns the number of meshes under this node.\nReturns the number of meshes in the scene.\nReturns the number of animations in the scene.\nReturns the bones’s offset transformation matrix.\nReturn the parent of this node. Returns <code>None</code> if this node …\nReturns the root node of the scene hierarchy\nReturns an iterator over all the textures in the scene.\nReturns the node’s transformation matrix.")