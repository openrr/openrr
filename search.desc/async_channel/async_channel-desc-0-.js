searchState.loadedDescShard("async_channel", 0, "An async multi-producer multi-consumer channel, where each …\nA future returned by <code>Sender::closed()</code>.\nThe channel is closed.\nThe channel is empty and closed.\nThe channel is empty but not closed.\nThe channel is full but not closed.\nThe receiving side of a channel.\nA future returned by <code>Receiver::recv()</code>.\nAn error returned from <code>Receiver::recv()</code>.\nA future returned by <code>Sender::send()</code>.\nAn error returned from <code>Sender::send()</code>.\nThe sending side of a channel.\nAn error returned from <code>Receiver::try_recv()</code>.\nAn error returned from <code>Sender::try_send()</code>.\nA <code>Receiver</code> that does not prevent the channel from being …\nA <code>Sender</code> that does not prevent the channel from being …\nCreates a bounded channel.\nReturns the channel capacity if it’s bounded.\nReturns the channel capacity if it’s bounded.\nCloses the channel.\nCloses the channel.\nCompletes when all receivers have dropped.\nDowngrade the sender to a weak reference.\nDowngrade the receiver to a weak reference.\nForcefully push a message into this channel.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the message that couldn’t be sent.\nUnwraps the message that couldn’t be sent.\nReturns <code>true</code> if the channel is closed.\nReturns <code>true</code> if the channel is closed.\nReturns <code>true</code> if the channel is closed.\nReturns <code>true</code> if the channel is empty and closed.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is empty but not closed.\nReturns <code>true</code> if the channel is full.\nReturns <code>true</code> if the channel is full.\nReturns <code>true</code> if the channel is full but not closed.\nReturns the number of messages in the channel.\nReturns the number of messages in the channel.\nReturns the number of receivers for the channel.\nReturns the number of receivers for the channel.\nReceives a message from the channel.\nReceives a message from the channel using the blocking …\nReturns whether the senders belong to the same channel.\nReturns whether the receivers belong to the same channel.\nSends a message into the channel.\nSends a message into this channel using the blocking …\nReturns the number of senders for the channel.\nReturns the number of senders for the channel.\nAttempts to receive a message from the channel.\nAttempts to send a message into the channel.\nCreates an unbounded channel.\nUpgrade the <code>WeakSender</code> into a <code>Sender</code>.\nUpgrade the <code>WeakReceiver</code> into a <code>Receiver</code>.")