searchState.loadedDescShard("fdeflate", 0, "A fast deflate implementation.\nThe stream doesn’t specify a valid huffman tree.\nThe stream doesn’t specify a valid huffman tree.\nThe stream doesn’t specify a valid huffman tree.\nThe zlib header is corrupt.\nAn error encountered while decompressing a deflate stream …\nCompressor that produces fdeflate compressed streams.\nAn error encountered while decompressing a deflate stream.\nThe input is not a valid deflate stream.\nDecompressor for arbitrary zlib streams.\nThe stream contains a back-reference that is too far back.\nExtra input data.\nThe stream contains contains back-reference as the first …\nAll input was consumed, but the end of the stream hasn’t …\nA block header specifies an invalid block type.\nAttempted to repeat a previous code before reading any …\nThe stream contains a distance code that was not allowed …\nToo many distance codes were specified.\nToo many literals were specified.\nThe stream contains a literal/length code that was not …\nAn uncompressed block’s NLEN value is invalid.\nThe output is too large.\nCompressor that only writes the stored blocks.\nThe deflate stream checksum is incorrect.\nCompresses the given data.\nReturn the number of bytes that will be written to the …\nDecompress the given data.\nDecompress the given data, returning an error if the …\nWrite the remainder of the stream and return the inner …\nFinish writing the final block and return the underlying …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIgnore the checksum at the end of the stream.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the decompressor has finished …\nCreate a new Compressor.\nCreates a new <code>StoredOnlyCompressor</code> that writes to the …\nCreate a new decompressor.\nDecompresses a chunk of data.\nWrite data to the compressor.\nWrites the given data to the underlying writer.\nThe underlying error.\nThe output decoded so far.")