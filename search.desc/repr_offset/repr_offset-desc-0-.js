searchState.loadedDescShard("repr_offset", 0, "<code>repr_offset</code> allows computing and safely using field …\nRepresents the offset of a (potentially nested) field …\nGets the <code>FieldOffset</code> for the passed in type and (possibly …\nGets the <code>FieldOffset</code> for the passed in type and (possibly …\nCombines this <code>FieldOffset</code> with another one, to access a …\nCombines this <code>FieldOffset</code> with another one, to access a …\nType-level encoding of …\nChanges the <code>F</code> type parameter.\nChanges the <code>S</code> type parameter, most useful for …\nCopies the field in <code>source</code> into <code>destination</code>.\nCopies the field in <code>source</code> into <code>destination</code>.\nCopies the field in <code>source</code> into <code>destination</code>, <code>source</code> and …\nCopies the field in <code>source</code> into <code>destination</code>, <code>source</code> and …\nExtension traits that use <code>FieldOffset</code> parameters to …\nTypes used for examples,\nReturns the argument unchanged.\nGets a reference to the field that this is an offset for.\nCopies the aligned field that this is an offset for.\nCopies the unaligned field that this is an offset for.\nTrait for getting the <code>FieldOffset</code> of a field, and related …\nGets a mutable reference to the field that this is an …\nGets a mutable raw pointer to a field from a mutable …\nGets a raw pointer to a field from a reference to the <code>S</code> …\nConstructs a <code>FieldOffset</code> where <code>T</code> is the struct and the …\nCalls <code>U::from(self)</code>.\nConstructs this <code>FieldOffset</code> from the offset of the field.\nConstructs a <code>FieldOffset</code> by calculating the offset of the …\nGets the <code>FieldOffset</code> for a (possibly nested) field, and an …\nThe offset (in bytes) of the <code>F</code> field in the <code>S</code> struct.\nFunctions for calculating field offsets.\nType-level encoding of <code>enum Privacy { IsPublic, IsPrivate }</code>\nGets the <code>FieldOffset</code> for a (possibly nested) public field, …\nGets a raw pointer to a field from a pointer to the <code>S</code> …\nGets a mutable raw pointer to a field from a pointer to …\nReads the value from the field in <code>source</code> without moving it.\nReads the value from the field in <code>source</code> without moving it.\nCopies the aligned field that this is an offset for.\nCopies the unaligned field that this is an offset for.\nReplaces the value of a field in <code>dest</code> with <code>value</code>, …\nReplaces the value of a field in <code>destination</code> with <code>value</code>, …\nReplaces the value of a field in <code>dest</code> with <code>value</code>, …\nReplaces the value of a field in <code>destination</code> with <code>value</code>, …\nSwaps the values of a field between the <code>left</code> and <code>right</code> …\nSwaps the values of a field between the <code>left</code> and <code>right</code> …\nSwaps the values of a field between <code>left</code> and <code>right</code>.\nSwaps the values of a field between <code>left</code> and <code>right</code>.\nSwaps the values of a field between the non-overlapping …\nSwaps the values of a field between the <code>left</code> and <code>right</code> …\nChanges this <code>FieldOffset</code> to be for an aligned field.\nChanges this <code>FieldOffset</code> to be for a (potentially) …\nDeclares a sequence of associated constants with the …\nMiscelaneous functions.\nConverts this FieldOffset into a <code>FieldOffsetWithVis</code>.\nGets a raw pointer to a field from a pointer to the <code>S</code> …\nGets a mutable raw pointer to a field from a pointer to …\nWrites <code>value</code> ìnto the field in <code>destination</code> without …\nWrites <code>value</code> ìnto the field in <code>source</code> without dropping …\nA marker type representing that a <code>FieldOffset</code> is for an …\nMarker trait for types that represents the alignment of a …\nTrait that combines two <code>Alignment</code> types, determines the …\nCombines two <code>Alignment</code> types, determines the return type …\nThis is <code>Aligned</code> if both <code>Self</code> and the <code>Rhs</code> parameter are …\nA marker type representing that a <code>FieldOffset</code> is for a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtension trait for (mutable) references to access fields …\nExtension trait for (mutable) references to do generic …\nExtension trait for raw pointers to access fields …\nExtension trait for mutable raw pointers to access fields …\nExtension trait for mutable raw pointers to do generic …\nExtension trait for raw pointers to do generic field …\nCopies a field (determined by <code>offset</code>) from <code>source</code> to <code>self</code>.\nCopies a field (determined by <code>offset</code>) from <code>source</code> to <code>self</code>.\nGets a reference to a field, determined by <code>offset</code>.\nGets a copy of a field (determined by <code>offset</code>). The field …\nGets a muatble reference to a field, determined by <code>offset</code>.\nGets a mutable pointer to a field, determined by <code>offset</code>.\nGets a const pointer to a field, the field is determined …\nGets a raw pointer to a field (determined by <code>offset</code>) from …\nGets a muatble pointer to a field (determined by <code>offset</code>) …\nReads a copy of a field (determined by <code>offset</code>) from <code>self</code>, …\nCopies a field (determined by <code>offset</code>) from <code>self</code>.\nReplaces a field (determined by <code>offset</code>) with <code>value</code>, …\nReplaces a field (determined by <code>offset</code>) with <code>value</code>, …\nSwaps a field (determined by <code>offset</code>) with the same field …\nSwaps a field (determined by <code>offset</code>) from <code>self</code> with the …\nSwaps a field (determined by <code>offset</code>) from <code>self</code> with the …\nOverwrites the value of a field (determined by <code>offset</code>) …\nThe offset of the <code>a</code> field\nThe offset of the <code>a</code> field\nThe offset of the <code>a</code> field\nThe offset of the <code>a</code> field\nThe offset of the <code>a</code> field\nThe offset of the <code>b</code> field\nThe offset of the <code>b</code> field\nThe offset of the <code>b</code> field\nThe offset of the <code>b</code> field\nThe offset of the <code>b</code> field\nThe offset of the <code>c</code> field\nThe offset of the <code>c</code> field\nThe offset of the <code>c</code> field\nThe offset of the <code>c</code> field\nThe offset of the <code>c</code> field\nThe offset of the <code>d</code> field\nThe offset of the <code>d</code> field\nThe offset of the <code>d</code> field\nThe offset of the <code>d</code> field\nThe offset of the <code>d</code> field\nAn example <code>#[repr(C, align(4))]</code> type\nAn example <code>#[repr(C)]</code> type\nAn example <code>#[repr(C)]</code> type which doesn’t implement …\nAn example <code>#[repr(C, packed)]</code> type\nAn example <code>#[repr(C, packed(2))]</code> type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the field is:\nGets the alignment of a public field in the …\nA wrapper around a <code>FieldOffset</code>, with a visibility type …\nGets the privacy of a field in the <code>GetFieldOffset&lt;FN&gt;</code> impl …\nGets the type of a public field in the …\nFor getting the offset of a field given its name.\nAn alias of the <code>GetFieldOffset</code> trait for public fields.\nHack use by <code>repr_offset</code> to implement …\nMarker trait for types that implement <code>GetFieldOffset</code>.\nThe offset of the field.\nThe offset of the field.\nGets the alignment of a (potentially) private field in the …\nGets the type of a (potentially) private field in the …\nWhether the field is private or not, either:\nThe type of the field.\nCasts this <code>FieldOffsetWithVis</code> to be for a different struct.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs this <code>FieldOffsetWithVis</code> from <code>offset</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs this <code>FieldOffsetWithVis</code> from the <code>offset</code> (in …\nUnwraps this into a <code>FieldOffset</code> for a possibly private …\nUnwraps this into a <code>FieldOffset</code> for a public field.\nCalculates the offset (in bytes) of a field, with the <code>call</code> …\nCalculates the offset (in bytes) of a field.\nThe alignment of the type that contains the field.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe alignment of the field that this calculates the offset …\nCalculates the offset of a field in bytes,given the …\nThe offset in bytes of the previous field.\nThe size of the previous field.\nTrait that combines two <code>Privacy</code> types.\nCombines two <code>Privacy</code> types.\nA marker type representing that a <code>FieldOffsetWithVis</code> is …\nA marker type representing that a <code>FieldOffsetWithVis</code> is …\nThis is <code>IsPublic</code> if both <code>Self</code> and the <code>Rhs</code> parameter are …\nMarker trait for types that represents the privacy of a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a <code>PhantomData&lt;fn()-&gt;T&gt;</code>, this is a workaround …\nHelper type to construct certain PhantomData in const fns.\nGets the type pointed-to by a pointer.\nThe pointed-to type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA helper function to force a variable to move (copy if it…")