searchState.loadedDescShard("serde_derive_internals", 0, "A type to collect errors together and format them.\nA Serde ast, parsed from the Syn ast and ready to generate …\nConsume this object, producing a formatted error string if …\nAdd an error to the context object with a tokenenizable …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new context object.\nAdd one of Syn’s parse errors.\nA source data structure annotated with <code>#[derive(Serialize)]</code>…\nThe fields of a struct or enum.\nA field of a struct.\nOne unnamed field.\nNamed fields.\nMany unnamed fields.\nNo fields.\nA variant of an enum.\nAttributes on the structure, parsed for Serde.\nThe contents of the struct or enum.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert the raw Syn ast into a parsed container object, …\nAny generics on the struct or enum.\nThe struct or enum name (without generics).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOriginal input.\n<code>#[serde(tag = &quot;t&quot;, content = &quot;c&quot;)]</code>\nRename direct children to “camelCase” style.\nRepresents struct or enum attribute information.\nRepresents the default to use for a field when …\nThe default is given by <code>std::default::Default::default()</code>.\nThe default.\nRepresents field attribute information\nThis enum represents the fields of a struct. All of the …\nWhether this enum represents the fields of a struct or the …\n<code>#[serde(tag = &quot;type&quot;)]</code>\nRename direct children to “kebab-case” style.\nRename direct children to “lowercase” style.\nIt does not.\n<code>#[serde(untagged)]</code>\nField must always be specified because it does not have a …\nDon’t apply a default rename rule.\nRename direct children to “PascalCase” style, as …\nThe default is given by this function.\nThe different possible ways to change case of fields in a …\nRename direct children to “SCREAMING-KEBAB-CASE” style.\nRename direct children to “SCREAMING_SNAKE_CASE” …\nRename direct children to “snake_case” style, as …\nStyles of representing an enum.\nRename direct children to “UPPERCASE” style.\nRepresents variant attribute information\nThis enum represents the variants of an enum. All of the …\nApply a renaming rule to a struct field, returning the …\nApply a renaming rule to an enum variant, returning the …\nReturn the container name for the container when …\nError message generated when type can’t be deserialized. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtract out the <code>#[serde(...)]</code> attributes from an item.\nExtract out the <code>#[serde(...)]</code> attributes from a struct …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new <code>RenameAllRules</code> with the individual rules of …\nReturns the <code>RenameRule</code> if it is not <code>None</code>, <code>rule_b</code> otherwise.\nReturn the container name for the container when …")