searchState.loadedDescShard("endi", 0, "endi\nAlias for <code>Endian::Big</code>.\nBig endian.\nThe endian of the data.\nAlias for <code>Endian::Little</code>.\nLittle endian.\nSame as the return value of <code>Endian::native</code>.\nAlias for <code>Endian::Big</code>.\nA trait for reading bytes.\nA trait for writing bytes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe native endian.\nRead a <code>f32</code>.\nRead a <code>f32</code> from a byte slice.\nRead a <code>f64</code>.\nRead a <code>f64</code> from a byte slice.\nRead a <code>i128</code>.\nRead a <code>i128</code> from a byte slice.\nRead a <code>i16</code>.\nRead a <code>i16</code> from a byte slice.\nRead a <code>i32</code>.\nRead a <code>i32</code> from a byte slice.\nRead a <code>i64</code>.\nRead a <code>i64</code> from a byte slice.\nRead a <code>i8</code>.\nRead a <code>i8</code> from a byte slice.\nRead a <code>u128</code>.\nRead a <code>u128</code> from a byte slice.\nRead a <code>u16</code>.\nRead a <code>u16</code> from a byte slice.\nRead a <code>u32</code>.\nRead a <code>u32</code> from a byte slice.\nRead a <code>u64</code>.\nRead a <code>u64</code> from a byte slice.\nRead a <code>u8</code>.\nRead a <code>u8</code> from a byte slice.\nWrite a <code>f32</code>.\nWrite a <code>f32</code> into a mutable byte slice.\nWrite a <code>f64</code>.\nWrite a <code>f64</code> into a mutable byte slice.\nWrite a <code>i128</code>.\nWrite a <code>i128</code> into a mutable byte slice.\nWrite a <code>i16</code>.\nWrite a <code>i16</code> into a mutable byte slice.\nWrite a <code>i32</code>.\nWrite a <code>i32</code> into a mutable byte slice.\nWrite a <code>i64</code>.\nWrite a <code>i64</code> into a mutable byte slice.\nWrite a <code>i8</code>.\nWrite a <code>i8</code> into a mutable byte slice.\nWrite a <code>u128</code>.\nWrite a <code>u128</code> into a mutable byte slice.\nWrite a <code>u16</code>.\nWrite a <code>u16</code> into a mutable byte slice.\nWrite a <code>u32</code>.\nWrite a <code>u32</code> into a mutable byte slice.\nWrite a <code>u64</code>.\nWrite a <code>u64</code> into a mutable byte slice.\nWrite a <code>u8</code>.\nWrite a <code>u8</code> into a mutable byte slice.")