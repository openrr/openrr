searchState.loadedDescShard("dasp_sample", 0, "Use the <strong>Sample</strong> trait to remain generic over sample types, …\nThe equilibrium value for the wave that this <code>Sample</code> type …\nWhen multiplying two samples of a signal together, it is …\nSample format types represented as floating point numbers.\nThe multiplicative identity of the signal.\nRepresents the multiplicative identity of the floating …\nA trait for working generically across different <strong>Sample</strong> …\nWhen summing two samples of a signal together, it is …\nIntegral and floating-point <strong>Sample</strong> format types whose …\nAdds (or “offsets”) the amplitude of the <code>Sample</code> by the …\nPure functions and traits for converting between i8, i16, …\nCreate a <code>Self</code> from any type that implements <code>ToSample&lt;Self&gt;</code>.\nMultiplies (or “scales”) the amplitude of the <code>Sample</code> …\nCalculate the square root of <code>Self</code>.\nConverts <code>self</code> to the equivalent <code>Sample</code> in the associated …\nConvert <code>self</code> to any type that implements <code>FromSample&lt;Self&gt;</code>.\nConverts <code>self</code> to the equivalent <code>Sample</code> in the associated …\nA collection of custom, non-std <strong>Sample</strong> types.\nSample types which may be converted to and from some type <code>S</code>…\nSimilar to the std <code>From</code> trait, but specifically for …\nSimilar to the std <code>Into</code> trait, but specifically for …\nReturns the argument unchanged.\nReturn the internal value used to represent the sample …\nCalls <code>U::from(self)</code>.\nConstruct a new sample if the given value is within range.\nConstructs a new sample without checking for overflowing.\nReturns the argument unchanged.\nReturn the internal value used to represent the sample …\nCalls <code>U::from(self)</code>.\nConstruct a new sample if the given value is within range.\nConstructs a new sample without checking for overflowing.\nReturns the argument unchanged.\nReturn the internal value used to represent the sample …\nCalls <code>U::from(self)</code>.\nConstruct a new sample if the given value is within range.\nConstructs a new sample without checking for overflowing.\nReturns the argument unchanged.\nReturn the internal value used to represent the sample …\nCalls <code>U::from(self)</code>.\nConstruct a new sample if the given value is within range.\nConstructs a new sample without checking for overflowing.\nReturns the argument unchanged.\nReturn the internal value used to represent the sample …\nCalls <code>U::from(self)</code>.\nConstruct a new sample if the given value is within range.\nConstructs a new sample without checking for overflowing.\nReturns the argument unchanged.\nReturn the internal value used to represent the sample …\nCalls <code>U::from(self)</code>.\nConstruct a new sample if the given value is within range.\nConstructs a new sample without checking for overflowing.\nReturns the argument unchanged.\nReturn the internal value used to represent the sample …\nCalls <code>U::from(self)</code>.\nConstruct a new sample if the given value is within range.\nConstructs a new sample without checking for overflowing.\nReturns the argument unchanged.\nReturn the internal value used to represent the sample …\nCalls <code>U::from(self)</code>.\nConstruct a new sample if the given value is within range.\nConstructs a new sample without checking for overflowing.")