searchState.loadedDescShard("tiny_skia_path", 0, "A tiny-skia Bezier path implementation.\nJust a random, valid number.\nConnects outside edges.\nNo stroke extension.\nAn immutable, finite <code>f32</code>.\nA predefined 0.5 value.\nAn integer rectangle.\nAn integer size.\nDraws at the beginning and end of an open path contour.\nSpecifies how corners are drawn when a shape is stroked.\nExtends to miter limit, then switches to bevel.\nExtends to miter limit, then clips the corner.\nAn immutable, finite <code>f32</code> that is known to be &gt; 0.\nA rectangle defined by left, top, right and bottom edges.\nAn immutable, finite <code>f32</code> in a 0..=1 range.\nAn immutable <code>f32</code> that is larger than 0 but less then 1.\nA <code>NormalizedF32</code> value initialized with one.\nA Bezier path.\nA path builder.\nA path segment.\nA path segments iterator.\nA path stroker.\nA path verb.\nA point.\nA rectangle defined by left, top, right and bottom edges.\nAdds circle.\nAdds circle.\nCustom float to integer conversion routines.\nCustom float to integer rounding routines.\nFloat number extension methods.\nA size.\nAdds square.\nStroke properties.\nA stroke dashing properties.\nAn affine transformation matrix.\nA <code>NormalizedF32</code> value initialized with zero.\nReturns an absolute value.\nApplies a bounding box transform.\nApplies a bounding box transform.\nReturns rect’s bottom edge.\nReturns the bottom edge.\nReturns the bottom edge.\nReturns the bounds of the path’s points.\nClears the path and returns a <code>PathBuilder</code> that will reuse …\nReset the builder.\nCloses the current contour.\nComputes a resolution scale.\nCalculates path’s tight bounds.\nChecks that the rect is completely includes <code>other</code> Rect.\nReturns the cross product of vector and vec.\nAdds a cubic curve from the last point to <code>x</code>, <code>y</code>.\nReturns the current verb.\nConverts the current path into a dashed one.\nA stroke dashing properties.\nReturns width and height as a tuple.\nReturns the Euclidean distance from origin.\nReturns the dot product of two points.\nExpands current size to specified size.\nA pair of f32 numbers.\nFinishes the builder and returns a <code>Path</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts <code>Rect</code> into a bounding box <code>Transform</code>.\nCreates a new <code>Path</code> from a circle.\nCreates a new <code>Point</code> from <code>f32x2</code>.\nCreates a new <code>IntRect</code>.\nCreates new <code>Rect</code>.\nCreates new <code>NonZeroRect</code>.\nCreates a new <code>Path</code> from an oval.\nCreates a Rect from Point array.\nCreates a new <code>Path</code> from <code>Rect</code>.\nCreates a new rotating <code>Transform</code>.\nCreates a new rotating <code>Transform</code> at the specified position.\nCreates a new <code>Transform</code>.\nCreates a new scaling <code>Transform</code>.\nCreates a new skewing <code>Transform</code>.\nCreates a new translating <code>Transform</code>.\nCreates a new <code>IntSize</code> from width and height.\nCreates a new <code>Size</code> from width and height.\nCreates a new <code>Point</code>.\nCreates a new <code>IntRect</code>.\nCreates new <code>Rect</code>.\nCreates new <code>NonZeroRect</code>.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a <code>FiniteF32</code>.\nReturns the value as a <code>FiniteF32</code>.\nReturns transform’s scale part.\nChecks that transform contains a scale part.\nChecks that transform contains a skew part.\nChecks that transform contains a translate part.\nReturns rect’s height.\nReturns rect’s height.\nReturns rect’s height.\nReturns height.\nReturns height.\nCreates an identity transform.\nInsets the rectangle.\nInsets the rectangle by the specified offset.\nReturns an intersection of two rectangles.\nReturns an intersection of two rectangles.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an inverted transform.\nReturn if the path is empty.\nChecks if the builder has any segments added.\nChecks that transform is finite.\nReturns true if both x and y are measurable values.\nChecks that transform is identity.\nChecks that transform is scale-only.\nChecks that transform contains only scale and translate.\nChecks that transform is skew-only.\nChecks that transform is translate-only.\nChecks that transform is finite and has non-zero scale.\nReturns true if x and y are both zero.\nReturns the last point if any.\nReturns rect’s left edge.\nReturns the left edge.\nReturns the left edge.\nReturns the number of segments in the path.\nReturns the current number of segments in the builder.\nReturns the Euclidean distance from origin.\nA stroke line cap.\nA stroke line join.\nAdds a line from the last point.\nOutsets the rectangle.\nTransforms a points using the current transform.\nTransforms a slice of points using the current transform.\nReturns a maximum value.\nReturns a maximum of both values.\nReturns a minimum value.\nThe limit at which a sharp corner is drawn beveled.\nAdds beginning of a contour.\nCreates a finite <code>f32</code>.\nCreates a new <code>NonZeroPositiveF32</code> if the given value is &gt; 0.\nCreates a <code>NormalizedF32</code> if the given value is in a 0..=1 …\nCreates a new stroke dashing object.\nCreates a new pair.\nCreates a <code>NormalizedF32Exclusive</code>.\nCreates a new builder.\nCreates a new PathStroker.\nCreates a <code>NormalizedF32Exclusive</code> clamping the given value.\nCreates a <code>NormalizedF32</code> clamping the given value to a …\nCreates a <code>NormalizedF64</code> by dividing the given value by …\nCreates a <code>NormalizedF32</code> by dividing the given value by 255.\nCreates a finite <code>f32</code> without checking the value.\nCreates a new <code>NonZeroPositiveF32</code> without checking the …\nCreates a new <code>NormalizedF32</code> without checking the value.\nReturns the next verb.\nScales (fX, fY) so that length() returns one, while …\nOutsets the rectangle by the specified offset.\nA collection of functions to work with Bezier paths.\nReturns an internal vector of points.\nPost-concats the current transform.\nPost-rotates the current transform.\nPost-rotates the current transform by the specified …\nPost-scales the current transform.\nPost-translates the current transform.\nPre-concats the current transform.\nPre-rotates the current transform.\nPre-rotates the current transform by the specified …\nPre-scales the current transform.\nPre-translates the current transform.\nAdds a circle contour.\nAdds an oval contour bounded by the provided rectangle.\nAdds a path.\nAdds a rectangle contour.\nAdds a quad curve from the last point to <code>x</code>, <code>y</code>.\nReturns rect’s right edge.\nReturns the right edge.\nReturns the right edge.\nConverts into an <code>IntRect</code> by adding 0.5 and discarding the …\nConverts into an <code>IntRect</code> rounding outwards.\nReturn the closest integer for the given float.\nScales Point in-place by scale.\nScales current size by the specified factor.\nScales current size to the specified size.\nScales current size to specified size.\nScales current size to the specified height.\nScales current size to the specified width.\nReturns an iterator over path’s segments.\nSets the auto closing mode. Off by default.\nScales vector so that distanceToOrigin() returns length, …\nSets vector to (x, y) scaled to length, if possible.\nSets vector to (x, y) scaled so length() returns one, and …\nReturns rect’s size.\nReturns rect’s size.\nCreates a new pair from a single value.\nReturns a stoked path.\nStokes the path.\nConverts a <code>Point</code> into a <code>f32x2</code>.\nConverts into <code>IntRect</code>.\nConverts into <code>IntRect</code> at the provided position.\nConverts into <code>IntSize</code>.\nConverts into <code>NonZeroRect</code>.\nConverts the current size to <code>NonZeroRect</code> at provided …\nReturns the value as a <code>FiniteF32</code>.\nConverts into <code>Rect</code>.\nConverts into <code>Rect</code>.\nConverts the current size to <code>Rect</code> at provided position.\nConverts into <code>Size</code>.\nReturns the value as a <code>u16</code>.\nReturns the value as a <code>u8</code>.\nReturns rect’s top edge.\nReturns the top edge.\nReturns the top edge.\nReturns a transformed in-place path.\nTransforms the rect using the provided <code>Transform</code>.\nTransforms the rect using the provided <code>Transform</code>.\nTranslates the rect by the specified offset.\nTranslates the rect to the specified position.\nTranslates the rect to the specified position.\nReturns an internal vector of verbs.\nReturns rect’s width.\nReturns rect’s width.\nReturns rect’s width.\nReturns width.\nReturns width.\nA stroke thickness.\nCreates a new builder with a specified capacity.\nReturns the first value.\nReturns rect’s X position.\nReturns rect’s X position.\nReturns rect’s X position.\nReturns the second value.\nReturns rect’s Y position.\nReturns rect’s Y position.\nReturns rect’s Y position.\nCreates a point at 0x0 position.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")