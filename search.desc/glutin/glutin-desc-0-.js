searchState.loadedDescShard("glutin", 0, "The purpose of this library is to provide an OpenGL <code>context</code>…\nThe underlying OpenGL platform Api.\nApi config picking and creating utils.\nOpenGL context creation and initialization.\nThe OpenGL platform display selection and creation.\nGlutin error handling.\nPlatform-specific API helpers.\nThe glutin prelude.\nA cross platform OpenGL surface representation.\nEGL platform Api.\nGLX platform Api.\nEGL interface.\nEverything related to finding and manipulating the …\nEverything related to <code>EGLContext</code> management.\nEverything related to <code>EGLDevice</code>.\nEverything related to <code>EGLDisplay</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEverything related to <code>EGLSurface</code>.\nA simple wrapper around <code>EGLConfig</code> that could be used with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe native visual identifier.\nA wrapper around <code>EGLContext</code> that is known to be not …\nA wrapper around <code>EGLContext</code> that could be current for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a <code>Self::PossiblyCurrentContext</code> indicating that the …\nMake this context current on the calling thread.\nWrapper for <code>EGLDevice</code>.\nGet the DRM primary or render device node path for this …\nGet the DRM render device node path for this <code>EGLDeviceEXT</code>.\nGet the device extensions supported by this device.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the name of the device.\nQuery the available devices.\nGet a raw handle to the <code>EGLDevice</code>.\nGet the vendor of the device.\nA wrapper for the <code>EGLDisplay</code> and its supported extensions.\nGet the <code>Device</code> the display is using.\nGet a reference to the initialized EGL API.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate EGL display with the native display.\nTerminate the EGL display.\nCreate an EGL display using the specified device.\nA wrapper around <code>EGLSurface</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSwaps the underlying back buffers when the surface is not …\nGLX interface.\nWhen using Xlib we need to get errors from it somehow, …\nEverything related to finding and manipulating the …\nEverything related to <code>GLXContext</code>.\nGLX object creation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEverything related to the GLXWindow.\nA wrapper around <code>GLXFBConfig</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA wrapper around <code>GLXContext</code> that is known to be not …\nA wrapper around <code>GLXContext</code> that could be current for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a <code>Self::PossiblyCurrentContext</code> indicating that the …\nMake this context current on the calling thread.\nA wrapper for the <code>GLXDisplay</code>, which is basically an …\nReturns the argument unchanged.\nGet a reference to the initialized GLX API.\nCalls <code>U::from(self)</code>.\nCreate GLX display.\nA wrapper around the <code>GLXWindow</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Api supported by the config.\nGet the raw config.\nThe buffer type baked by the config.\nThe GL configuration used to create <code>Surface</code> and <code>Context</code> in …\nThe types of the surface supported by the config.\nThe context configuration template that is used to find …\nBuilder for the <code>ConfigTemplate</code>.\nThe EGL config.\nRaw EGL config.\nContext supports OpenGL ES 1 API.\nContext supports OpenGL ES 2 API.\nContext supports OpenGL ES 3 API.\nThe trait to\nThe trait to group all common config option.\nThe GLX config.\nRaw GLX config.\nThe backing buffer is using Luminance.\nContext supports OpenGL API.\nContext must support pbuffers.\nContext must support pixmaps.\nRaw config.\nThe backing buffer is using RGB format.\nThe config type.\nContext must support windows.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe size of the alpha.\nThe <code>crate::config::Api</code> supported by the configuration.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBuild the template to match the configs against.\nThe type of the underlying color buffer.\nRequest config that can render to a particular native …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nGet the GL config used to create a particular GL object.\nThe type of the surfaces that can be created with this …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe size of the depth buffer.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nWhether the config uses floating pixels.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nWhether the config is hardware accelerated.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nCreate a new configuration template builder.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe number of samples in multisample buffer.\nWhether the configuration should prefer hardware …\nObtain the <code>RawConfig</code> of the underlying Api.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nWhether the config supports creating srgb capable <code>Surface</code>.\nThe size of the stencil buffer.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nWhether the config supports creating transparent surfaces.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nNumber of alpha bits in the color buffer.\nThe set of apis that are supported by this configuration.\nThe type of the color buffer.\nNumber of bits in the depth buffer.\nWhether the floating pixel formats should be used.\nWhether multisampling configurations should be picked. The …\nWith the maximum sizes of pbuffer.\nWhether the single buffer should be used.\nNumber of bits in the stencil buffer.\nWhether the stereo pairs should be present.\nThe types of the surfaces that must be supported by the …\nWith supported swap intervals.\nWhether the configuration should support transparency.\nSize of the blue component in bits.\nSize of the green component in bits.\nSize of the red component in bits.\nA trait that provides raw context.\nInclude all the immediate more functions and definitions.\nThe rendering Api context should support.\nThe attributes that are used to create a graphics context.\nThe builder to help customizing context\nInclude all the future-compatible functions and …\nThe EGL context.\nThe EGL context.\nRaw EGL context.\nFlushes the context that was previously current as if …\nA trait to group common context operations.\nDescribes the requested OpenGL context profiles.\nOpenGL Api version that should be used by the context.\nThe GLX context.\nThe GLX context.\nRaw GLX context.\nHigh priority is usually required for VR applications.\nLowest priority, contexts using this priority give way for …\nDefault priority.\nThe driver doesn’t check anything. This option is very …\nDoesn’t do anything. Most notably doesn’t flush. Not …\nA context that is known to be not current on the current …\nThe not current context type.\nA trait to group common not current operations.\nNot everything is checked. Your application can crash if …\nOpenGL Api version that should be used by the context.\nA context that is possibly current on the current thread.\nThe type of possibly current context.\nA trait to group common context operations.\nPriority hint\nRaw context.\nRealtime priority contexts are executed immediately and …\nThe behavior of the driver when you change the current …\nEverything is checked to avoid any crash. If a problem …\nEverything is checked to avoid any crash. The driver will …\nSpecifies the tolerance of the OpenGL context to faults. …\nThe surface supported by the context.\nThe surface supported by the context.\nThe version used to index the Api.\nBuild the context attributes.\nGet the <code>ContextApi</code> used by the context.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this context is the current one in this …\nMajor version of the Api.\nMake <code>Self::Surface</code> on the calling thread producing the …\nMake <code>Self::Surface</code> current on the calling thread.\nThe same as <code>Self::make_current</code>, but provides a way to set …\nThe same as <code>Self::make_current</code> but provides a way to set …\nMake the context not current to the current thread and …\nMake the context not current to the current thread. If you …\nMinor version of the Api.\nCreate new builder.\nCreate new version with the given <code>major</code> and <code>minor</code> values.\nGet the <code>Priority</code> used by the context.\nGet the raw context handle.\nTreat the not current context as possibly current. The …\nSet the desired OpenGL context api. See the docs of …\nSets the <em>debug</em> flag for the OpenGL context.\nSet the priority hint, which might not be honored if the …\nSet the desired OpenGL context profile. See the docs of …\nThe behavior when changing the current context. See the …\nSets the robustness of the OpenGL context. See the docs of …\nShare the display lists with the given context.\nGet the raw handle to the <code>Display</code>.\nThe display supports creating <code>no error</code> context.\nThe display supports creating context with explicit …\nThe display supports creating <code>robust</code> context.\nThe display supports creating OpenGL ES <code>context</code>.\nA config that is used by the display.\nThe graphics display to handle underlying graphics …\nPreference of the display that should be used.\nThe features and extensions supported by the <code>Display</code>.\nUse only EGL.\nThe EGL display.\nRaw EGL display.\nPrefer EGL and fallback to GLX.\nThe display supports <code>floating</code> pixel formats.\nObtain the underlying api extensions.\nGet the <code>Display</code>.\nA trait to group common display operations.\nUse only GLX.\nThe GLX display.\nRaw GLX display.\nPrefer GLX and fallback to EGL.\nThe display supports pixel formats with <code>multisampling</code>.\nA context that is being used by the display.\nA pbuffer surface created by the display.\nA pixmap surface created by the display.\nRaw GL platform display.\nThe display supports creating surfaces backed by <code>SRGB</code> …\nThe display supports changing the <code>swap interval</code> on …\nThe display used by the object.\nA window surface created by the display.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nCreate the graphics platform context.\nCreate the surface that can be used to render into pbuffer.\nCreate the surface that can be used to render into pixmap.\nCreate the surface that can be used to render into native …\nThe intersection of a source flags value with the …\nObtain the GL display used to create a particular GL …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nSupported extensions by the display.\nFind configurations matching the given <code>template</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturn the address of an OpenGL function.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCreate a graphics platform display from the given raw …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nA raw handle to the underlying Api display.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet the features supported by the display.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nHelper to obtain the information about the underlying …\nCan’t access a requested resource.\nAn recognized attribute value was passed.\nInvalid config was passed.\nThe context is no longer valid.\nThe context is in bad state.\nThe current surface of the calling thread is no longer …\nThe display is no longer valid.\nArguments are inconsistent. For example when shared …\nBad native pixmap was provided.\nBad native window was provided.\nOne or more argument values are invalid.\nThe pbuffer is invalid.\nThe pixmap is invalid.\nThe surface is invalid.\nThe context was lost.\nContains the error value\nThe error type for all the graphics platform operations.\nA list specifying general categoires of native platform …\nFailed to perform resource initialization.\nThe misc error that can’t be classified occurred.\nThe requested display wasn’t found or some required …\nThe operation is not supported by the platform.\nContains the success value\nAn operation could not be completed, because it failed to …\nA specialized <code>Result</code> type for graphics operations.\nThe underlying error kind.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper to check that error is <code>ErrorKind::NotSupported</code>.\nThe underlying raw code in case it’s present.\nUtilities to access X11 specific config properties.\nThe GlConfig extension trait to get X11 specific …\nThe X11 visual info.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert the visual to the raw pointer.\nReturns <code>true</code> if the visual has non-zero alpha mask.\nGet XID of for this visual.\nThe <code>X11VisualInfo</code> that must be used to initialize the Xlib …\nTrait for accessing the raw GL surface.\nThe context to access surface data.\nWhen this variant is used calling …\nThe EGL surface.\nA pointer to EGLSurface.\nA trait to group common operations on the surface.\nThe GLX surface.\nGLXDrawable.\nA platform native pixmap.\nPbuffer surface.\nMarker that used to type-gate methods for pbuffer.\nPixmap surface.\nMarker that used to type-gate methods for pixmap.\nHandle to the raw OpenGL surface.\nThe rect that is being used in various surface operations.\nMarker indicating that the surface could be resized.\nThe GL surface that is used for rendering.\nAttributes which are used for creating a particular …\nBuilder to get the required set of attributes initialized …\nThe underlying type of the surface.\nThe type of the surface.\nThe marker trait to indicate the type of the surface.\nA swap interval.\nThe swap is synchronized to the <code>n</code>’th video frame. This …\nThe window surface.\nMarker that used to type-gate methods for window.\nHBITMAP handle for windows bitmap.\nXID of X11 pixmap from xcb.\nXID of X11 pixmap.\nThe age of the back buffer of that surface. The <code>0</code> …\nBuild the surface attributes suitable to create a window …\nBuild the surface attributes suitable to create a pbuffer …\nBuild the surface attributes suitable to create a pixmap …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe <strong>physical</strong> height of the underlying surface.\nRect height.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the surface is current on to the current …\nCheck whether the surface is the current draw surface to …\nCheck whether the surface is the current read surface to …\nCheck whether the surface is single buffered.\nGet new surface attributes.\nHelper to simplify rectangle creation.\nGet the raw handle to the surface.\nResize the surface to a new size.\nSet swap interval for the surface.\nGet the type of the surface.\nSwaps the underlying back buffers when the surface is not …\nThe <strong>physical</strong> width of the underlying surface.\nRect width.\nRequest the largest pbuffer.\nThe same as in …\nSpecify whether the single buffer should be used instead …\nSpecify whether the surface should support srgb or not. …\n<code>X</code> of the origin.\n<code>Y</code> of the origin.")