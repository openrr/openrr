searchState.loadedDescShard("cpal", 0, "How to use cpal\nSee the <code>BackendSpecificError</code> docs for more information …\nSee the <code>BackendSpecificError</code> docs for more information …\nSee the <code>BackendSpecificError</code> docs for more information …\nSee the <code>BackendSpecificError</code> docs for more information …\nSee the <code>BackendSpecificError</code> docs for more information …\nSee the <code>BackendSpecificError</code> docs for more information …\nSee the <code>BackendSpecificError</code> docs for more information …\nSee the <code>BackendSpecificError</code> docs for more information …\nSome error has occurred that is specific to the backend …\nThe buffer size used by the device.\nError that can happen when creating a <code>Stream</code>.\nNumber of channels.\nA buffer of dynamically typed audio data, passed to raw …\nMay occur when attempting to request the default input or …\nAn error that may occur while attempting to retrieve a …\nThe device no longer exists. This can happen if the device …\nThe device no longer exists. This can happen if the device …\nThe device no longer exists. This can happen if the device …\nThe device associated with the stream is no longer …\nThe device associated with the stream is no longer …\nThe device no longer exists. This can happen if the device …\nAn error that might occur while attempting to enumerate …\nThe equilibrium value for the wave that this <code>Sample</code> type …\n<code>f32</code> with a valid range of <code>-1.0..1.0</code> with <code>0.0</code> being the …\n<code>f64</code> with a valid range of -1.0..1.0 with 0.0 being the …\nWhen multiplying two samples of a signal together, it is …\nThe desired number of frames for the hardware buffer.\nSimilar to the std <code>From</code> trait, but specifically for …\nThe requested host, although supported on this platform, …\n<code>i16</code> with a valid range of ‘u16::MIN..=u16::MAX’ with <code>0</code> …\n<code>i32</code> with a valid range of ‘u32::MIN..=u32::MAX’ with <code>0</code> …\n<code>i64</code> with a valid range of ‘u64::MIN..=u64::MAX’ with <code>0</code> …\n<code>i8</code> with a valid range of ‘u8::MIN..=u8::MAX’ with <code>0</code> …\nThe multiplicative identity of the signal.\nThe multiplicative identity of the signal.\nInformation relevant to a single call to the user’s …\nA host’s device iterator yielding only <em>input</em> devices.\nA timestamp associated with a call to an input stream’s …\nWe called something the C-Layer did not understand\nWe called something the C-Layer did not understand\nInformation relevant to a single call to the user’s …\nA host’s device iterator yielding only <em>output</em> devices.\nA timestamp associated with a call to an output stream’s …\nErrors that might occur when calling <code>Stream::pause()</code>.\nErrors that might occur when calling <code>Stream::play()</code>.\nA trait for working generically across different <strong>Sample</strong> …\nFormat that each sample has.\nThe number of samples processed per second for a single …\nWhen summing two samples of a signal together, it is …\nThe set of parameters used to describe how to open a …\nThe specified stream configuration is not supported.\nErrors that might occur while a stream is running.\nOccurs if adding a new Stream ID would cause an integer …\nA monotonic time instance associated with a stream, …\nReturned if e.g. the default input format was requested on …\nDescribes the minimum and maximum supported buffer size …\nDescribes a single supported stream configuration, …\nDescribes a range of supported stream configurations, …\nError that can happen when enumerating the list of …\n<code>u16</code> with a valid range of ‘u16::MIN..=u16::MAX’ with …\n<code>u32</code> with a valid range of ‘u32::MIN..=u32::MAX’ with …\n<code>u64</code> with a valid range of ‘u64::MIN..=u64::MAX’ with …\n<code>u8</code> with a valid range of ‘u8::MIN..=u8::MAX’ with …\nIn the case that the platform provides no way of getting …\nReturns the instant in time after the given duration has …\nAdds (or “offsets”) the amplitude of the <code>Sample</code> by the …\nAdds (or “offsets”) the amplitude of the <code>Sample</code> by the …\nAccess the data as a slice of sample type <code>T</code>.\nAccess the data as a slice of sample type <code>T</code>.\nThe raw slice of memory representing the underlying audio …\nThe raw slice of memory representing the underlying audio …\nThe instant the stream’s data callback was invoked.\nThe instant the stream’s data callback was invoked.\nThe instant that data was captured from the device.\nA comparison function which compares two …\nThe amount of time elapsed from another instant to this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Self</code> from any type that implements <code>ToSample&lt;Self&gt;</code>.\nCreate a <code>Self</code> from any type that implements <code>ToSample&lt;Self&gt;</code>.\nReturn the internal value used to represent the sample …\nReturn the internal value used to represent the sample …\nReturn the internal value used to represent the sample …\nReturn the internal value used to represent the sample …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe full length of the buffer in samples.\nMultiplies (or “scales”) the amplitude of the <code>Sample</code> …\nMultiplies (or “scales”) the amplitude of the <code>Sample</code> …\nConstruct a new sample if the given value is within range.\nConstruct a new sample if the given value is within range.\nConstruct a new sample if the given value is within range.\nConstruct a new sample if the given value is within range.\nConstructs a new sample without checking for overflowing.\nConstructs a new sample without checking for overflowing.\nConstructs a new sample without checking for overflowing.\nConstructs a new sample without checking for overflowing.\nPlatform-specific items.\nThe predicted instant that data written will be delivered …\nThe sample format of the internal audio data.\nReturns the size in bytes of a sample of this format.\nReturns the instant in time one <code>duration</code> ago.\nThe timestamp associated with the call to an input stream…\nThe timestamp associated with the call to an output stream…\nConverts <code>self</code> to the equivalent <code>Sample</code> in the associated …\nConverts <code>self</code> to the equivalent <code>Sample</code> in the associated …\nConvert <code>self</code> to any type that implements <code>FromSample&lt;Self&gt;</code>.\nConvert <code>self</code> to any type that implements <code>FromSample&lt;Self&gt;</code>.\nConverts <code>self</code> to the equivalent <code>Sample</code> in the associated …\nConverts <code>self</code> to the equivalent <code>Sample</code> in the associated …\nThe suite of traits allowing CPAL to abstract over hosts, …\nRetrieve a <code>SupportedStreamConfig</code> with the given sample …\nTurns this <code>SupportedStreamConfigRange</code> into a …\nRetrieve a <code>SupportedStreamConfig</code> with the given sample …\nAll hosts supported by CPAL on this platform.\nALSA’s implementation for <code>Devices</code>.\nThe default linux, dragonfly, freebsd and netbsd host type.\nThe <code>Device</code> implementation associated with the platform’s …\nContains a platform specific <code>Device</code> implementation.\nThe <code>Devices</code> iterator associated with the platform’s …\nContains a platform specific <code>Devices</code> implementation.\nThe platform’s dynamically dispatched <code>Host</code> type.\nUnique identifier for available hosts on the platform.\nContains a platform specific <code>Host</code> implementation.\nThe <code>Stream</code> implementation associated with the platform’s …\nContains a platform specific <code>Stream</code> implementation.\nThe <code>SupportedInputConfigs</code> iterator associated with the …\nThe <code>SupportedOutputConfigs</code> iterator associated with the …\nReturns a reference to the underlying platform specific …\nReturns a reference to the underlying platform specific …\nReturns a reference to the underlying platform specific …\nReturns a reference to the underlying platform specific …\nReturns a mutable reference to the underlying platform …\nReturns a mutable reference to the underlying platform …\nReturns a mutable reference to the underlying platform …\nReturns a mutable reference to the underlying platform …\nProduces a list of hosts that are currently available on …\nThe default host for the current compilation target …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven a unique host identifier, initialise and produce the …\nThe unique identifier associated with this <code>Host</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying platform specific implementation of …\nReturns the underlying platform specific implementation of …\nReturns the underlying platform specific implementation of …\nReturns the underlying platform specific implementation of …\nThe <code>Device</code> type yielded by the host.\nA device that is capable of audio input and/or output.\nThe type used for enumerating available devices by the …\nA <code>Host</code> provides access to the available audio devices on …\nThe stream type created by <code>build_input_stream_raw</code> and …\nA stream created from <code>Device</code>, with methods to control …\nThe iterator type yielding supported input stream formats.\nThe iterator type yielding supported output stream formats.\nCreate an input stream.\nCreate a dynamically typed input stream.\nCreate an output stream.\nCreate a dynamically typed output stream.\nThe default input stream format for the device.\nThe default input audio device on the system.\nThe default output stream format for the device.\nThe default output audio device on the system.\nAn iterator yielding all <code>Device</code>s currently available to …\nAn iterator yielding all <code>Device</code>s currently available to …\nWhether or not the host is available on the system.\nThe human-readable name of the device.\nAn iterator yielding all <code>Device</code>s currently available to …\nSome devices support pausing the audio stream. This can be …\nRun the stream.\nAn iterator yielding formats that are supported by the …\nAn iterator yielding output stream formats that are …")