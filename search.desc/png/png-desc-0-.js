searchState.loadedDescShard("png", 0, "PNG encoder and decoder\nExpand paletted images to include an alpha channel. …\nFor images requiring preservation of absolute colorimetry, …\nThe <code>Adam7</code> algorithm derives its name from doing 7 passes …\nDescribes which stage of the Adam7 algorithm applies to a …\nThe algorithm to use when progressively filling pixel data …\nAnimation control information\nClear buffer with the background color.\nAn ancillary chunk has been read but it was in the wrong …\nBalances encoding speed and compression ratio\nBit depth of the PNG file. Specifies the number of bits …\nHow pixels are written into the buffer.\nA chunk header (length and type fields) has been read.\nChunk has been read successfully.\nCoding-independent code points (cICP) specify the color …\nDescribes how a pixel is encoded.\nThe type and strength of applied compression.\nContent light level information of HDR content.\nDecoder configuration options\nResult of the decoding process\nPNG Decoder\nAny kind of error during PNG decoding.\nAdvanced compression settings with more customization …\nHow to reset buffer of an animated png (APNG) at the end …\nExpand paletted images to RGB; expand grayscale images of …\nPNG Encoder.\nExtremely fast compression with a decent compression ratio.\nExtremely fast but light compression.\nExcellent for creating lightly compressed PNG images very …\nThe byte level filter applied to scanlines to prepare them …\nThe input image was not a valid PNG.\nFrame control information\n1 grayscale sample.\n1 grayscale sample, then 1 alpha sample.\nSpend much more time to produce a slightly smaller file …\nNo transformation\nDecoded raw image data.\nThe last of a consecutive chunk of IDAT was done. This is …\n1 sample for the palette index.\nPNG info struct\nDescribes which interlacing algorithm applies to a decoded …\nA row of data with interlace information attached.\nAn error in IO of the underlying reader.\nCompression level between 1 and 9, where higher values …\nLimits on the resources the <code>Decoder</code> is allowed too use\nThe image would have required exceeding the limits …\nMastering Display Color Volume (mDCV) used at the point of …\nNo compression whatsoever. Fastest, but results in large …\nDo not compress the data at all.\nLeave the buffer unchanged.\nNothing decoded yet\nThe <code>null</code> method means no interlacing.\nOutput info.\nThe new pixels are blended into the current state based on …\nAn interface was used incorrectly.\nFor images preferring good adaptation to the output device …\nPixel dimensions information\nReset the buffer to the state before the current frame.\nPNG reader (mostly high-level interface)\nFor images requiring colour appearance matching (relative …\n1 red sample, 1 green sample, 1 blue sample.\n1 red sample, 1 green sample, 1 blue sample, and finally, …\nStrip 16-bit samples to 8 bits\nFor images preferring preservation of saturation at the …\nAn unsigned integer scaled version of a floating point …\nSkipped an ancillary chunk because it was unrecognized or …\nPixels overwrite the value at their position.\nChromaticities of the color space primaries\nThis is the adam7 de-interlace we do by default. Only …\nA variant of the Adam7 de-interlace that ensures that all …\nThe rendering intent for an sRGB image.\nStreaming PNG writer\nPNG StreamingDecoder (low-level interface)\nOutput transformations\nAn inplace buffer for decompression and filtering of PNG …\nA region into a buffer utilized as a <code>UnfilterBuf</code>.\nPhysical unit of the pixel dimensions\nPNG writer\nConvenience function to add iTXt chunks to <code>Info</code> struct\nConvenience function to add tEXt chunks to <code>Info</code> struct\nConvenience function to add zTXt chunks to <code>Info</code> struct\nGet a flags value with all known bits set.\nReturns the frame control information of the image.\nUse this region to decompress new filtered rowline data.\nThe past-the-end index of byte that are allowed to be …\nThe chosen output bit depth.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nReturns the number of bits per pixel.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe contents of the image’s <code>bKGD</code> chunk, if present.\nType of frame area rendering for this frame\nReturns the size needed to hold a decoded frame If the …\nmaximum number of bytes the decoder is allowed to …\nReturns the number of bytes per pixel.\nThe contents of the image’s <code>cHRM</code> chunk, if present. …\nChromaticities dependent on sRGB chunk\nMastering display chromaticities.\nChunk types and functions\nThe coding-independent code points for video signal type …\nId number of the color primaries defined in ITU-T-H.273 in …\nHow colors are stored in the image.\nThe chosen output color type.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nzTXt field\nWhether all set bits in a source flags value are also set …\nThe content light information for the image.\nFrame delay fraction denominator\nFrame delay fraction numerator\nThe intersection of a source flags value with the …\nType of frame area disposal to be done after rendering …\nGet a flags value with all bits unset.\nGets whether the value can be exactly converted in …\nThe EXIF metadata for the image.\nCopies pixels from <code>interlaced_row</code> into the right location …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe past-the-end of bytes that have been written to.\nRead the rest of the image and chunks and finish up, …\nConsume the stream writer with validation.\nConsume the stream writer with validation.\nReturns the frame control information of the current frame\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nFully accurate construction from a value scaled as per …\nu8 -&gt; Self. Temporary solution until Rust provides a …\nu8 -&gt; Self. Temporary solution until Rust provides a …\nu8 -&gt; Self. Temporary solution until Rust provides a …\nu8 -&gt; Self. Using enum_primitive or transmute is probably …\nu8 -&gt; Self. Using enum_primitive or transmute is probably …\nThe contents of the image’s gAMA chunk, if present. …\nGamma dependent on sRGB chunk\nHeight of the following frame\nThe pixel height of this frame.\nThe ICC profile for the image.\nReturn whether the decoder is set to ignore the Adler-32 …\nSet the decoder to ignore and not verify the Adler-32 …\nGets whether the value is within the clamped range of this …\nProvides access to the inner <code>info</code> field\nGet information on the image.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the accurate encoded value.\nTurn this into a stream writer for image data.\nTurn this into a stream writer with custom buffer size.\nGet the unscaled value as a floating point.\nWhether all known bits in this flags value are set.\nReturns true if the image is an APNG image.\nWhether all bits in this flags value are unset.\nWhether the image is a full range image or a narrow range …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe byte count of each scan line in the image.\nThe mastering display color volume for the image.\nId number of the matrix coefficients defined in ITU-T-H.273…\nMaximum Content Light Level indicates the maximum light …\nMaximum Frame Average Light Level indicates the maximum …\nMastering display maximum luminance.\nMastering display minimum luminance.\nCreates a new StreamingDecoder\nCreate a new decoder configuration with default limits.\nCreates a new <code>Adam7Info</code>.  May panic if the arguments are …\nSlightly inaccurate scaling and quantization. Clamps the …\nCreate a new decoder configuration with custom limits.\nCreate a new decoder configuration with custom …\nDecodes the next frame into <code>buf</code>.\nAdvances to the start of the next animation frame and …\nReturns the next processed row of the image.\nReturns the next processed row of the image (discarding …\nTransform every input to 8bit grayscale or color.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nNumber of frames\nNumber of times to loop this APNG.  0 indicates infinite …\nReturn the number of bytes required to hold a deinterlaced …\nReturns the color type and the number of bits per sample …\nReturns the number of bytes required to hold a …\nThe image’s <code>PLTE</code> chunk, if present; contains the RGB …\nReturns the number of bytes needed for one deinterlaced …\nReturns the number of bytes needed for one deinterlaced …\nReturns the number of bytes needed for one deinterlaced …\nRead the PNG header and return the information contained …\nReads all meta data until the first IDAT chunk\nReads the next row of the image into the provided …\nThe intersection of a source flags value with the …\nResets the StreamingDecoder\nSet the frame dimension to occupy all the image, starting …\nSet the frame dimension to occupy all the image, starting …\nSet the frame position to (0, 0).\nSet the frame position to (0, 0).\nReturns the number of samples used per pixel encoded in …\nThe image’s <code>sBIT</code> chunk, if present; contains significant …\nSequence number of the animation chunk, starting from 0\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSpecify that the image is animated.\nSet the blend operation for every frame.\nSet the blend operation for the following frames.\nSet the blend operation for the following frames.\nSet the color of the encoded image.\nSet compression parameters, see Compression for the …\nProvides in-depth customization of DEFLATE compression …\nSet the indicated depth of the image data.\nSet the dispose operation for every frame.\nSet the dispose operation for the following frames.\nSet the dispose operation for the following frames.\nSet the used filter type.\nSet the used filter type.\nSet the used filter type.\nSet the fraction of time every frame is going to be …\nSet the fraction of time the following frames are going to …\nSet the fraction of time the following frames are going to …\nSet the dimension of the following frames.\nSet the dimension of the following frames.\nSet the position of the following frames.\nSet the position of the following frames.\nSet whether to compute and verify the Adler-32 checksum …\nWhen set, the decoder will not compute and verify the …\nFlag to ignore computing and verifying the Adler-32 …\nSet whether to compute and verify the Adler-32 checksum …\nWhen set, the decoder will not compute and verify the CRC …\nSet the decoder to ignore iccp chunks while parsing.\nIgnore ICCP chunks while decoding.\nSet the decoder to ignore all text chunks while parsing.\nIgnore text chunks while decoding.\nLimit resource usage.\nSets the raw byte contents of the PLTE chunk. This method …\nMark the first animated frame as a ‘separate default …\nIgnore ancillary chunks if CRC fails\nIgnore ancillary chunks if CRC fails\nSet the chromaticities for the source system’s display …\nSet the display gamma of the source system on which the …\nMark the image data as conforming to the SRGB color space …\nSet the allowed and performed transformations.\nSets the raw byte contents of the tRNS chunk. This method …\nSize of the image, width then height.\nChromaticities of the source system. Set by both <code>cHRM</code> as …\nGamma of the source system. Set by both <code>gAMA</code> as well as to …\nExpand pass, but also ensure that after each pass the …\nThe rendering intent of an SRGB image.\nCreate a stream writer.\nCreate a stream writer with custom buffer size.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nText chunks (tEXt/zTXt/iTXt) structs and functions\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nId number of the transfer characteristics defined in …\nThe image’s <code>tRNS</code> chunk, if present; contains the alpha …\ntEXt field\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nEither <em>Meter</em> or <em>Unspecified</em>\nLow level StreamingDecoder interface.\niTXt field\nValidate the written image sequence.\nWidth of the following frame\nThe pixel width of this frame.\nA utility constructor for a default info with width and …\nWrite a raw chunk of PNG data.\nStart encoding by writing the header data.\nWrites the next image data.\nX position at which to render the following frame\nPixels per unit, X axis\nY position at which to render the following frame\nPixels per unit, Y axis\nImage data\nImage trailer\nImage header\nPalette\nAnimation control\nBackground colour\nSource system’s pixel chromaticities\nCoding-independent code points for video signal type …\nContent Light Level Information chunk\nEXIF metadata chunk\nFrame control\nFrame data\nReturns the argument unchanged.\nSource system’s gamma value\nICC profile chunk\nUTF-8 textual data\nCalls <code>U::from(self)</code>.\nReturns true if the chunk is critical.\nReturns true if the chunk is private.\nMastering Display Color Volume chunk\nPhysical pixel dimensions\nChecks whether the reserved bit of the chunk name is set. …\nsRGB color space chunk\nReturns true if the chunk is safe to copy if unknown.\nLatin-1 uncompressed textual data\nImage last-modification time\nTransparency\nLatin-1 compressed textual data\nDefault decompression limit for compressed text chunks.\nA generalized text chunk trait\nStruct encoding an iTXt chunk\nStruct representing a tEXt chunk\nStruct representing a zTXt chunk\nCompresses the inner text, mutating its own state.\nCompresses the inner text, mutating its own state.\nIndicates whether the text will be (or was) compressed in …\nDecompresses the inner text, mutating its own state. Can …\nDecompresses the inner text, mutating its own state. Can …\nDecompresses the inner text, mutating its own state. Can …\nDecompresses the inner text, mutating its own state. Can …\nEncode text chunk as <code>Vec&lt;u8&gt;</code> to a <code>Write</code>\nEncodes TEXtChunk to a Writer. The keyword and text are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecompresses the inner text, and returns it as a <code>String</code>. …\nDecompresses the inner text, and returns it as a <code>String</code>. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeyword field of the tEXt chunk. Needs to be between 1-79 …\nKeyword field of the tEXt chunk. Needs to be between 1-79 …\nThe keyword field. This needs to be between 1-79 bytes …\nA hyphen separated list of languages that the keyword is …\nConstructs a new TEXtChunk. Not sure whether it should …\nCreates a new ZTXt chunk.\nConstructs a new iTXt chunk. Leaves all but keyword and …\nText field of tEXt chunk. Can be at most 2GB.\nTranslated keyword. This is UTF-8 encoded.")