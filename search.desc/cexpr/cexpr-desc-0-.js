searchState.loadedDescShard("cexpr", 0, "A C expression parser and evaluator.\nParsing errors specific to C parsing.\nParsing errors specific to C parsing\nExpected the specified token\nExpected one of the specified tokens\nAn invalid literal was encountered.\nAn error occurred in an underlying nom parser.\nA full parse was requested, but data was left over after …\nExpected a token of the specified kind\nAn unknown identifier was encountered\nIf the input result indicates a succesful parse, but there …\nThe error that occurred.\nEvaluating C expressions from tokens.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe remainder of the input stream at the time of the error.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParsing C literals from byte slices.\nnom’s result types, re-exported.\nRepresentation of a C token\nA shorthand for the type of cexpr expression evaluation …\nContains the error value\nThe result of parsing a literal or evaluating an …\nExpression parser/evaluator that supports identifiers.\nContains the success value\nParse and evaluate an expression of a list of tokens.\nParse and evaluate an expression of a list of tokens.\nParse a functional macro declaration from a list of tokens.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse and evaluate a macro definition from a list of …\nParse and evaluate a macro definition from a list of …\nCreate a new <code>IdentifierParser</code> with a set of known …\nRepresentation of a C character\nA character that can be represented as a <code>char</code>\nAny other character (8-bit characters, unicode surrogates, …\nReturns the argument unchanged.\nensures the child parser consumes the whole input\nCalls <code>U::from(self)</code>.\nParse a C literal.\nThe <code>Err</code> enum indicates the parser was not successful\nContains the error value\ndefault error type, only contains the error’ location …\nThe parser had an error (recoverable)\nIndicates which parser returned an error\nThe parser had an unrecoverable error: we got to the right …\nHolds the result of parsing functions\nThere was not enough data\nContains information on needed data if a parser returned …\nContains the success value\nContains the required data size in bytes\nNeeds more data, but we do not know how much\nnom error code\nAutomatically converts between errors if the underlying …\nConverts an ErrorKind to a text description\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new error from an input position and an external …\nposition of the error in the input data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTests if the result is Incomplete\nIndicates if we know how many bytes we need\nMaps a <code>Needed</code> to <code>Needed</code> by applying a function to a …\nApplies the given function to the inner error\nMaps <code>Err&lt;(T, ErrorKind)&gt;</code> to <code>Err&lt;(U, ErrorKind)&gt;</code> with the …\nMaps <code>Err&lt;error::Error&lt;T&gt;&gt;</code> to <code>Err&lt;error::Error&lt;U&gt;&gt;</code> with the …\ncreates a new basic error\nCreates <code>Needed</code> instance, returns <code>Needed::Unknown</code> if the …\nObtaining ownership\nObtaining ownership\nObtaining ownership\nObtaining ownership\nA single token in a C expression.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe type of this token.\nThe bytes that make up the token.\nRemove all comment tokens from a vector of tokens")