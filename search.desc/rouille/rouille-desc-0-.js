searchState.loadedDescShard("rouille", 0, "The rouille library is very easy to get started with.\nIterator to the list of headers in a request.\nDummy trait that regroups the <code>Read</code> and <code>Write</code> traits.\nRepresents a request that your handler must answer to.\nGives access to the body of a request.\nContains a prototype of a response.\nAn opaque type that represents the body of a response.\nA listening server.\nTrait for objects that can take ownership of a raw …\nDispatches between blocks depending on the value of the …\nThis macro assumes that the current function returns a …\nBuilds a <code>Response</code> that returns a <code>401 Not Authorized</code> status …\nInitializes the object with the given socket.\nAllows you to let an external process handle the request …\nApply content encodings (such as gzip compression) to the …\nReturns the body of the request.\nAn opaque type that contains the body of the response.\nReturns the state of the <code>DNT</code> (Do Not Track) header.\nBuilds a <code>ResponseBody</code> that doesn’t return any data.\nBuilds an empty <code>Response</code> with a 204 status code.\nBuilds an empty <code>Response</code> with a 400 status code.\nBuilds an empty <code>Response</code> with a 404 status code.\nBuilds an empty <code>Response</code> with a 406 status code.\nReturns the mime type of a file based on its extension, or …\nBuilds a fake HTTP request to be used during tests.\nBuilds a fake HTTP request to be used during tests.\nBuilds a fake HTTPS request to be used during tests.\nBuilds a fake HTTPS request to be used during tests.\nEvaluates each parameter until one of them evaluates to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuilds a 200 <code>Response</code> with data.\nBuilds a new <code>ResponseBody</code> that returns the given data.\nBuilds a 200 <code>Response</code> with the content of a file.\nBuilds a new <code>ResponseBody</code> that returns the content of the …\nBuilds a new <code>ResponseBody</code> that will read the data from a …\nBuilds a new <code>ResponseBody</code> that will read the data from a …\nBuilds a new <code>ResponseBody</code> that returns an UTF-8 string.\nReturns the value of a GET parameter or None if it doesn’…\nReturns the value of a header of the request.\nReturns a list of all the headers of the request.\nList of headers to be returned in the response.\nBuilds a <code>Response</code> that outputs HTML.\nAnalyze the request’s headers and body.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the content of the response.\nShortcut for <code>!response.is_success()</code>.\nReturns <code>true</code> if the request uses HTTPS, and <code>false</code> if it …\nReturns true if the status code of this <code>Response</code> indicates …\nWaits for all in-flight requests to be processed. This is …\nBuilds a <code>Response</code> that outputs JSON.\nAdds a log entry to the given writer for each request.\nCalls custom logging functions after processing a request.\nSearches inside <code>path</code> for a file that matches the given …\nReturns the method of the request (<code>GET</code>, <code>POST</code>, etc.).\nBuilds a new <code>Server</code> object.\nProcesses all the client requests waiting to be processed, …\nSame as <code>poll()</code> but blocks for at most <code>duration</code> before …\nUse a <code>ThreadPool</code> of the given size to process requests\nParse input from HTML forms. See the <code>post</code> module for …\nDispatch a request to another HTTP server.\nReturns the raw query string requested by the client. In …\nReturns the raw URL requested by the client. It is not …\nBuilds a <code>Response</code> that redirects the user to another URL …\nBuilds a <code>Response</code> that redirects the user to another URL …\nBuilds a <code>Response</code> that redirects the user to another URL …\nBuilds a <code>Response</code> that redirects the user to another URL …\nBuilds a <code>Response</code> that redirects the user to another URL …\nReturns the address of the client that made this request.\nIf the decoded URL of the request starts with <code>prefix</code>, …\nEquivalent to a <code>match</code> expression but for routes.\nRuns the server forever, or until the listening socket is …\nReturns the address of the listening socket.\nSessions handling.\nTurns the response into an empty 304 response if the <code>ETag</code> …\nStarts a server and uses the given requests handler.\nIdentical to <code>start_server</code> but uses a <code>ThreadPool</code> of the …\nThe status code to return to the user.\nCreates a new thread for the server that can be gracefully …\nBuilds a <code>Response</code> that outputs SVG.\nBuilds a <code>Response</code> that outputs plain text.\nThis macro assumes that the current function returns a …\nThis macro assumes that the current function returns a …\nIf set, rouille will give ownership of the client socket …\nReturns the URL requested by the client.\nSupport for websockets.\nAdds an additional header to the response.\nAdds or replace a <code>Content-Disposition</code> header of the …\nAdds or replaces a <code>ETag</code> header to the response, and turns …\nAdds a <code>ETag</code> header to the response, or replaces an …\nAdds or replaces a <code>Cache-Control</code> header that specifies …\nAdds or replaces a <code>Cache-Control</code> header that specifies …\nAdds or replaces a <code>Cache-Control</code> header that specifies …\nChanges the status code of the response.\nRemoves all headers from the response whose names are …\nRemoves all headers from the response that match <code>header</code>.\nCan’t pass through the body of the request because it …\nError that can happen when parsing the JSON input.\nCould not read the body from the request, or could not …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDispatches a request to the process.\nApplies content encoding to the response.\nIterator that returns the list of cookies of a request.\nCredentials returned by <code>basic_http_auth</code>.\nIterator to the elements of a priority header.\nAttempts to parse a <code>Authorization</code> header with basic HTTP …\nAttempts to parse the list of cookies from the request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParsing JSON data in the body of a request.\nLogin provided by the client.\nParsing data sent with <code>multipart/form-data</code>.\nParses the value of a header that has values with …\nPassword provided by the client.\nRead plain text data from the body of a request.\nReads plain text data from the body of a request.\nParsing data sent with a <code>&lt;form method=&quot;POST&quot;&gt;</code>.\nReturns the preferred value amongst a priority header.\nCan’t parse the body of the request because it was …\nCould not read the body from the request. Also happens if …\nError that can happen when parsing the JSON input.\nError while parsing.\nWrong content type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAttempts to parse the request’s body as JSON.\nCan’t parse the body of the request because it was …\nAllows you to inspect the content of the multipart input …\nThe data of a field in a <code>multipart/form-data</code> request.\nError that can happen when decoding multipart data.\nA field in a multipart request with its associated headers …\nThe <code>Content-Type</code> header of the request indicates that it …\nThe field’s data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to decode the content of the request as …\nThe headers for this field, including the name, filename, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake the inner <code>Multipart</code> or <code>&amp;mut Multipart</code>\nReturns <code>true</code> if this field has no content-type or the …\nRead the next entry in the request.\nUpdate <code>self</code> as the next entry.\nGet a builder type which can save the field with or …\nSet the minimum buffer size that <code>BufRead::fill_buf(self)</code> …\nCan’t parse the body of the request because it was …\nImplementation of the <code>DecodePostField</code> that puts the body …\nMust be implemented on types used with the <code>post_input!</code> …\nThere was an error with a particular field.\nCould not read the body from the request.\nCould not read the body. Usually happens with files.\nA field is missing from the received data.\nFailed to parse a string field.\nError that can happen when decoding POST data.\nError returned by the methods of the <code>DecodePostField</code> trait.\nGot multiple values for the same field while only one was …\nThe <code>Content-Type</code> header of the request indicates that it …\nFailed to parse a floating-point field.\nFailed to parse an integer field.\nExpected a file but got a field, or vice versa.\nThe file’s data.\nThe name of the file, if known. Remember that this shouldn…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalled when a field with the given name is found in the …\nCalled when a file with the given name is found in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhen multiple fields with the same name are found in the …\nThe MIME type. Remember that this shouldn’t be blindly …\nCalled when no field is found in the POST input.\nAttempts to decode the <code>POST</code> data received by the request.\nCan’t pass through the body of the request because it …\nCan’t pass through the body of the request because it …\nError that can happen when calling <code>full_proxy</code>.\nThe destination server didn’t produce compliant HTTP.\nCould not read the body from the request, or could not …\nConfiguration for the reverse proxy.\nError that can happen when dispatching the request to …\nThe address to connect to. For example <code>example.com:80</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSends the request to another HTTP server using the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSends the request to another HTTP server using the …\nIf <code>Some</code>, the <code>Host</code> header will be replaced with this value.\nContains the ID of the session.\nReturns true if the client gave us a session ID.\nReturns the argument unchanged.\nGenerates a string suitable for a session ID.\nReturns the id of the session.\nCalls <code>U::from(self)</code>.\nBinary data. If the client is in Javascript, this happens …\nThe websocket connection is closed.\nThe request does not match a websocket request.\nFailed to transfer the message on the socket.\nA message produced by a websocket connection.\nIterator to the list of protocols requested by the user.\nError that can happen when sending a message to the client.\nText data. If the client is in Javascript, this happens …\nA successful websocket. An open channel of communication. …\nError that can happen when attempting to start websocket.\nThe subprotocol passed to the function was not requested …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the websocket has been closed by either …\nReturns a list of the websocket protocols requested by the …\nSends binary data over the websocket.\nSends text data over the websocket.\nBuilds a <code>Response</code> that initiates the websocket protocol.")