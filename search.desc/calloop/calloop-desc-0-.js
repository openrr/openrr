searchState.loadedDescShard("calloop", 0, "Calloop, a Callback-based Event Loop\nShorthand for read and write interest\nContinue listening for events on this source as before\nDisable this source\nAn event source with its callback.\nShorthand for empty interest\nShorthand for empty readiness\nEdge-triggering\nThe error type returned from <code>process_events()</code> (not the …\nThe type of events generated by your source.\nThe EventIterator is an <code>Iterator</code> over the events relevant …\nAn event loop\nTrait representing an event source\nAn idle callback that was inserted in this loop\nInterest to register regarding the file descriptor\nLevel-triggering\nAn handle to an event loop\nA signal that can be shared between thread to stop or …\nSome metadata of your event source\nPossible modes for registering a file descriptor\nWhether this source needs to be sent the …\nWhether this source needs to be sent the …\nSingle event generation\nThe polling system\nPossible actions that can be requested to the event loop …\nShorthand for read interest\nReadiness for a file descriptor notification\nA token representing a registration in the <code>EventLoop</code>.\nRemove this source from the eventloop\nTrigger a re-registration of this source\nThe return type of the user callback\nA token (for implementation of the <code>EventSource</code> trait)\nFactory for creating tokens in your registrations\nShorthand for write interest\nWrap an IO object into an async adapter\nGet the underlying fd of the poller.\nGet the underlying raw-fd of the poller.\nReturns a mutable reference to the event source.\nReturns an immutable reference to the event source.\nRegister a set of event sources. Effectively calls …\nReregister a set of event sources. Effectively calls …\nUnregister a set of event sources. Effectively calls …\nNotification that polling is complete, and …\nNotification that polling is complete, and …\nNotification that a single <code>poll</code> is about to begin\nNotification that a single <code>poll</code> is about to begin\nCancel the idle callback if it was not already run\nAn MPSC channel whose receiving end is an event source\nDisables this event source.\nDispatch pending events to their callbacks\nEnables this previously disabled event source.\nError types used and generated by Calloop.\nIs the FD in an error state\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA generic event source wrapping an IO objects or file …\nGet a signal to stop this event loop from running\nRetrieve a loop handle\nInserts an idle callback.\nInserts a new event source in the loop.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the Dispatcher and returns the inner event source.\nAdapters for async IO objects\nBuilds a dispatcher.\nPing to the event loop\nProcess any relevant events\nWait for the FD to be readable\nIs the FD readable\nRegister yourself to this poll instance\nRegister a new file descriptor for polling\nRegisters a <code>Dispatcher</code> in the loop.\nRemoves this source from the event loop.\nRe-register your file descriptors\nUpdate the registration for a file descriptor\nRun this event loop\nStop the event loop\nTimer event source\nProduce a new unique token\nWrapper for a transient Calloop event source.\nCreate a new event loop\nUnregister your file descriptors\nUnregister a file descriptor\nMakes this source update its registration.\nWake up the event loop\nWait for the FD to be writable\nIs the FD writable\nThe receiving end of the channel\nAn error arising from processing events for a channel.\nThe channel was closed\nThe events generated by the channel event source\nA message was received and is bundled here\nThe sender end of a channel\nThe sender end of a synchronous channel\nCreate a new asynchronous channel\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProxy for <code>mpsc::Receiver::recv</code> to manually poll events.\nSend a message to the channel\nSend a message to the synchronous channel\nCreate a new synchronous, bounded channel\nProxy for <code>mpsc::Receiver::try_recv</code> to manually poll events.\nSend a message to the synchronous channel\nContains the error value\nThe primary error type used by Calloop covering internal …\nAn error generated when trying to insert an event source\nWhen an event source is registered (or re- or …\nThis variant wraps a <code>std::io::Error</code>, which might arise from\nContains the success value\nAny other unexpected error kind (most likely from a user …\n<code>Result</code> alias using Calloop’s error type.\nThe generated error\nConverts the <code>InsertError</code> into Calloop’s error type, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe source that could not be inserted\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrapper to use a type implementing <code>AsRawFd</code> but not <code>AsFd</code> …\nA generic event source wrapping a FD-backed type\nA wrapper around a type that doesn’t expose it mutably …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference.\nGet a mutable reference to the underlying type.\nGet a reference to the underlying type.\nThe programmed interest\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe programmed mode\nWrap <code>inner</code> with an <code>AsFd</code> implementation.\nWrap a FD-backed type into a <code>Generic</code> event source that uses\nWrap a FD-backed type into a <code>Generic</code> event source using an …\nUnwrap the <code>Generic</code> source to retrieve the underlying type\nAdapter for async IO manipulations\nA future that resolves once the associated object becomes …\nA future that resolves once the associated object becomes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMutably access the underlying IO object\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemove the async adapter and retrieve the underlying object\nA future that resolves once the object becomes ready for …\nA future that resolves once the object becomes ready for …\nThe ping event source\nAn error arising from processing events for a ping.\nThe Ping handle\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new ping event source\nDon’t reschedule this timer\nAction to reschedule a timeout if necessary\nA future that resolves once a certain timeout is expired\nA timer event source\nReschedule this timer to a given <code>Duration</code> in the future\nReschedule this timer to a given <code>Instant</code>\nGet the current deadline of this <code>Timer</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a future that resolves at a given instant\nCreate a timer that will fire at a given instant\nCreate a future that resolves after a given duration\nCreate a timer that will fire after a given duration from …\nCreate a timer that will fire immediately when inserted in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChanges the deadline of this timer to an <code>Instant</code>\nChanges the deadline of this timer to a <code>Duration</code> from now\nA <code>TransientSource</code> wraps a Calloop event source and manages …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if there is no wrapped event source.\nApply a function to the enclosed source, if it exists and …\nRemoves the wrapped event source from the event loop and …\nReplace the currently wrapped source with the given one.  …")