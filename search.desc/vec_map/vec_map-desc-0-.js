searchState.loadedDescShard("vec_map", 0, "A simple map based on a vector for small integer keys. …\nA draining iterator over the key-value pairs of a map.\nA view into a single entry in a map, which may either be …\nA consuming iterator over the key-value pairs of a map.\nAn iterator over the key-value pairs of a map.\nAn iterator over the key-value pairs of a map, with the …\nAn iterator over the keys of a map.\nAn occupied Entry\nAn occupied Entry.\nA vacant Entry\nA vacant Entry.\nAn iterator over the values of a map.\nAn iterator over the values of a map.\nA map optimized for small integer keys.\nMoves all elements from <code>other</code> into the map while …\nReturns the number of elements the <code>VecMap</code> can hold without …\nClears the map, removing all key-value pairs.\nReturns true if the map contains a value for the specified …\nReturns an iterator visiting all key-value pairs in …\nGets the given key’s corresponding entry in the map for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nGets a reference to the value in the entry.\nReturns a mutable reference to the value corresponding to …\nGets a mutable reference to the value in the entry.\nInserts a key-value pair into the map. If the key already …\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry with the OccupiedEntry’s key,\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator visiting all key-value pairs in …\nConverts the entry into a mutable reference to its value.\nReturns true if the map contains no elements.\nReturns an iterator visiting all key-value pairs in …\nReturns an iterator visiting all key-value pairs in …\nReturns an iterator visiting all keys in ascending order …\nReturns the number of elements in the map.\nCreates an empty <code>VecMap</code>.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nRemoves a key from the map, returning the value at the key …\nTakes the value of the entry out of the map, and returns …\nReserves capacity for the given <code>VecMap</code> to contain <code>len</code> …\nReserves the minimum capacity for the given <code>VecMap</code> to …\nRetains only the elements specified by the predicate.\nTrims the <code>VecMap</code> of any excess capacity.\nSplits the collection into two at the given key.\nReturns an iterator visiting all values in ascending order …\nReturns an iterator visiting all values in ascending order …\nCreates an empty <code>VecMap</code> with space for at least <code>capacity</code> …")