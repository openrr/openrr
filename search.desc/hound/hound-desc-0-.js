searchState.loadedDescShard("hound", 0, "Hound, a wav encoding and decoding library.\nContains the error value\nThe error type for operations on <code>WavReader</code> and <code>WavWriter</code>.\nWave files with the <code>WAVE_FORMAT_IEEE_FLOAT</code> format tag …\nIll-formed WAVE data was encountered.\nWave files with the <code>WAVE_FORMAT_PCM</code> format tag store …\nThe sample format is different than the destination format.\nAn IO error occured in the underlying reader or writer.\nContains the success value\nA type for results generated by Hound where the error type …\nA type that can be used to represent audio samples.\nSpecifies whether a sample is stored as an “IEEE Float”…\nA writer that specifically only writes integer samples of …\nThe sample has more bits than the destination type.\nThe number of samples written is not a multiple of the …\nThe format is not supported.\nAn iterator that yields samples of type <code>S</code> read from a …\nA reader that reads the WAVE format from the underlying …\nAn iterator that yields samples of type <code>S</code> read from a …\nSpecifies properties of the audio data.\nSpecifies properties of the audio data, as well as the …\nA writer that accepts samples and writes the WAVE format.\nCreates a writer that appends samples to an existing file.\nCast the sample to a 16-bit sample.\nThe number of bits per sample.\nThe number of bytes used to store a sample.\nThe number of channels.\nCreates a writer that writes the WAVE format to a file.\nReturns the duration of the file in samples.\nReturns the duration of the file written so far, in …\nUpdates the WAVE header (which requires knowing all …\nUpdates the WAVE header and flushes the underlying writer.\nFlush the internal buffer to the underlying writer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an efficient writer that writes 16-bit integer …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet “stand-alone” wav header representing infinite or …\nDestroys the <code>WavReader</code> and returns the underlying reader.\nSame as <code>samples</code>, but takes ownership of the <code>WavReader</code>.\nReturns the number of values that the sample iterator will …\nReturns the number of samples in the file written so far.\nAttempts to create a reader that reads the WAVE format.\nCreates a writer that writes the WAVE format to the …\nCreates a writer that appends samples to an existing file …\nCreates a writer that writes the WAVE format to the …\nAttempts to create a reader that reads from the specified …\nReads the audio sample from the WAVE data chunk.\nReads the RIFF WAVE header, returns the supposed file size.\nWhether the wav’s samples are float or integer values.\nThe number of samples per second.\nReturns an iterator over all samples.\nSeek to the given time within the file.\nReturns information about the WAVE file.\nReturns information about the WAVE file being written.\nThe normal information about the audio data.\nWrites the audio sample to the WAVE data chunk.\nWrites the audio sample to the WAVE data chunk, zero …\nWrites a single sample for one channel.\nWrites a single sample for one channel.\nLike <code>write_sample()</code>, but does not perform a bounds check …")