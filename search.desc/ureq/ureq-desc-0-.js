searchState.loadedDescShard("ureq", 0, "A simple, safe HTTP client.\nAgents keep state between requests.\nAccumulates options towards building an Agent.\nRepresents a JSON array.\nA header line that couldn’t be parsed.\nA status line we don’t understand <code>HTTP/1.1 200 OK</code>.\nRepresents a JSON boolean.\nConnection to server failed.\nDNS lookup failed.\nAn error that may occur when processing a Request.\nOne of the types of error the can occur when processing a …\nHTTP status code indicating an error (e.g. 4xx, 5xx) Read …\nInsecure request attempted with https only set\nProxy information was not properly formatted\nThe url could not be understood.\nSome unspecified <code>std::io::Error</code>.\nChained processing of request (and response).\nContinuation of a <code>Middleware</code> chain.\nNever preserve the <code>authorization</code> header on redirect. This …\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nExtension to <code>Result&lt;Response, Error&gt;</code> for handling all …\nProxy server definition\nProxy could not connect\nIncorrect credentials for proxy\nTrait for things implementing std::io::Read + …\nStrategy for keeping <code>authorization</code> headers during …\nRequest instances are builders that creates a request.\nParsed result of a request url with handy inspection …\nA custom resolver to override the default DNS behavior.\nResponse instances are created as results of firing off …\nPreserve the <code>authorization</code> header when the redirect is to …\nA response was successfully received but had status code …\nRepresents a JSON string.\nToo many redirects.\nError that is not a status code error. For instance, DNS …\nThere was an error making the request or receiving the …\nThe url scheme could not be understood.\nAgents are used to hold configuration and keep state …\nAll headers corresponding values for the give name, or …\nAll headers corresponding values for the give name, or …\nHandle the request url as a standard <code>url::Url</code>.\nCreate a new agent.\nCreates an AgentBuilder.\nSends the request with no body and blocks the caller until …\nThe character set part of the “Content-Type”.\nThe content type part of the “Content-Type” header …\nMake a DELETE request.\nMake a DELETE request from this agent.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse a response from a string.\nMake a GET request.\nMake a GET request from this agent.\nThe URL we ended up at. This can differ from the request …\nHandle of the middleware logic.\nContinue the middleware chain by providing (a possibly …\nTells if the response has the named header.\nTells if the header has been set.\nMake a HEAD request.\nMake a HEAD request from this agent.\nThe header value for the given name, or None if not found.\nReturns the value for a set header.\nA list of the set header names in this request. Lowercased …\nA list of the header names in this response. Lowercased to …\nHost of the request url.\nThe http version: <code>HTTP/1.1</code>\nEnforce the client to only perform HTTPS requests. This …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead the body of this response into a serde_json::Value, …\nTurn this response into a <code>impl Read</code> of the body.\nOptionally turn this error into an underlying <code>Response</code>.\nTurn this response into a String of the response body. By …\nOptionally turn this error into an underlying <code>Transport</code>.\nConstruct a <code>serde_json::Value</code> from a JSON literal.\nThe type of this error.\nThe type of error that happened while processing the …\nThe local address the request was made from.\nSets the maximum number of connections allowed in the …\nSets the maximum number of connections per host to keep in …\nHigher level error details, if there are any.\nReturns the value of the request method. Something like <code>GET</code>…\nAdd middleware handler to this agent.\nConstruct a response with a status, status text and a …\nCreates an Agent with default settings.\nCreate a proxy from a format string.\nWhether no_delay will be set on the tcp socket. Setting …\nErgonomic helper for handling all status codes as <code>Response</code>.\nMake a PATCH request.\nMake a PATCH request from this agent.\nPath of the request url.\nPort of the request url, if available. Ports are only …\nMake a POST request.\nMake a POST request from this agent.\nSet the proxy server to use for all connections from this …\nMake a PUT request.\nMake a PUT request from this agent.\nSet a query parameter.\nSet multi query parameters.\nReturns all query parameters as a vector of key-value …\nSet the strategy for propagation of authorization headers …\nHow many redirects to follow.\nThe socket address of the server that sent the response.\nMake a request with the HTTP verb as a parameter.\nMake a request with the HTTP verb as a parameter.\nMake a request using an already-parsed Url.\nMake a request using an already-parsed Url.\nGet the parsed url that will be used for this request. The …\nConfigures a custom resolver to be used by this agent. By …\nRe-exported rustls crate\nGet the scheme of the request url, i.e. “https” or “…\nSend data from a reader.\nSend data as bytes.\nSend a sequence of (key, value) pairs as form-urlencoded …\nSend data a json value.\nSend data as a string.\nSet a header field.\nThe status as a u16: <code>200</code>\nThe status text: <code>OK</code>\nTimeout for the overall request, including DNS resolution, …\nSets overall timeout for the request, overriding agent’s …\nTimeout for the socket connection to be successful. If …\nTimeout for the individual reads of the socket. If both …\nTimeout for the individual writes to the socket. If both …\nConfigure TLS options for rustls to use when making HTTPS …\nConfigure TLS options for a backend other than rustls. The …\nAttempt to detect proxy settings from the environment, …\nThe url that failed. This can be interesting in cases of …\nGet the url str that will be used for this request.\nThe user-agent header to associate with all requests from …")