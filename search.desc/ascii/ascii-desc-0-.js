searchState.loadedDescShard("ascii", 0, "A library that provides ASCII-only string and character …\n<code>&#39;A&#39;</code>\nAcknowledgement\n<code>&#39;&amp;&#39;</code>\n<code>&#39;\\&#39;&#39;</code>\nConvert slices of bytes or <code>AsciiChar</code> to <code>AsciiStr</code>.\nError that is returned when a sequence of <code>u8</code> are not all …\nConvert mutable slices of bytes or <code>AsciiChar</code> to <code>AsciiStr</code>.\nAn ASCII character. It wraps a <code>u8</code>, with the highest bit …\n<code>AsciiStr</code> represents a byte or string slice that only …\nA growable string stored as an ASCII encoded buffer.\n<code>&#39;*&#39;</code>\n<code>&#39;@&#39;</code>\n<code>&#39;B&#39;</code>\n<code>&#39;\\&#39;</code>\nBackspace\nbell / alarm / audible\n<code>&#39;]&#39;</code>\n<code>&#39;[&#39;</code>\n<code>&#39;C&#39;</code>\nCancel\n<code>&#39;^&#39;</code>\n<code>&#39;\\r&#39;</code>\nA copying iterator over the characters of an <code>AsciiStr</code>.\nA mutable iterator over the characters of an <code>AsciiStr</code>.\nAn immutable iterator over the characters of an <code>AsciiStr</code>.\n<code>&#39;:&#39;</code>\n<code>&#39;,&#39;</code>\n<code>&#39;}&#39;</code>\n<code>&#39;{&#39;</code>\n<code>&#39;D&#39;</code>\nDevice control 1, often XON\nDevice control 2\nDevice control 3, Often XOFF\nDevice control 4\nDelete\nData Link Escape\n<code>&#39;$&#39;</code>\n<code>&#39;.&#39;</code>\n<code>&#39;E&#39;</code>\nEnd of Medium\nEnquiry\nEnd Of Transmission\nEscape\nEnd of Transmission Block\nEnd of TeXt\n<code>&#39;=&#39;</code>\n<code>&#39;!&#39;</code>\n<code>&#39;F&#39;</code>\nForm Feed\nFile Separator\nA possible error value when converting an <code>AsciiString</code> from …\n<code>&#39;G&#39;</code>\nGroup Separator\n<code>&#39;</code>’`\n<code>&#39;&gt;&#39;</code>\n<code>&#39;H&#39;</code>\n<code>&#39;#&#39;</code>\n<code>&#39;I&#39;</code>\nConvert vectors into <code>AsciiString</code>.\n<code>&#39;J&#39;</code>\n<code>&#39;K&#39;</code>\n<code>&#39;L&#39;</code>\n<code>&#39;&lt;&#39;</code>\n<code>&#39;\\n&#39;</code>\n<code>&#39;M&#39;</code>\n<code>&#39;-&#39;</code>\n<code>&#39;N&#39;</code>\nNegative AcKnowledgement\n<code>&#39;\\0&#39;</code>\n<code>&#39;O&#39;</code>\n<code>&#39;P&#39;</code>\n<code>&#39;)&#39;</code>\n<code>&#39;(&#39;</code>\n<code>&#39;%&#39;</code>\n<code>&#39;+&#39;</code>\n<code>&#39;Q&#39;</code>\n<code>&#39;?&#39;</code>\n<code>&#39;&quot;&#39;</code>\n<code>&#39;R&#39;</code>\nRecord Separator\n<code>&#39;S&#39;</code>\nShift In\nShift Out\nStart Of Heading\nStart Of teXt\nSubstitute\nSynchronous idle\n<code>&#39;;&#39;</code>\n<code>&#39;/&#39;</code>\n<code>&#39; &#39;</code>\n<code>&#39;T&#39;</code>\n<code>&#39;\\t&#39;</code>\n<code>&#39;~&#39;</code>\nConvert <code>char</code>, <code>u8</code> and other character types to <code>AsciiChar</code>.\nError returned by <code>ToAsciiChar</code>.\n<code>&#39;U&#39;</code>\nUnit Separator\n<code>&#39;_&#39;</code>\n<code>&#39;V&#39;</code>\nVertical tab\n<code>&#39;|&#39;</code>\n<code>&#39;W&#39;</code>\n<code>&#39;X&#39;</code>\n<code>&#39;Y&#39;</code>\n<code>&#39;Z&#39;</code>\n<code>&#39;0&#39;</code>\n<code>&#39;1&#39;</code>\n<code>&#39;2&#39;</code>\n<code>&#39;3&#39;</code>\n<code>&#39;4&#39;</code>\n<code>&#39;5&#39;</code>\n<code>&#39;6&#39;</code>\n<code>&#39;7&#39;</code>\n<code>&#39;8&#39;</code>\n<code>&#39;9&#39;</code>\n<code>&#39;a&#39;</code>\nConvert to an ASCII slice.\nConvert to an ASCII slice.\nConvert to an ASCII slice without checking for non-ASCII …\nConverts an ASCII character into a <code>u8</code>.\nConverts <code>&amp;self</code> into a byte slice.\nConverts an ASCII character into a <code>char</code>.\nConvert to a mutable ASCII slice.\nConvert to a mutable ASCII slice.\nConvert to a mutable ASCII slice without checking for …\nReturns an unsafe mutable pointer to the <code>AsciiStr</code>’s …\nReturns the entire string as mutable slice of <code>AsciiChar</code>s.\nUnicode has printable versions of the ASCII control codes, …\nReturns a raw pointer to the <code>AsciiStr</code>’s buffer.\nReturns the entire string as slice of <code>AsciiChar</code>s.\nConverts <code>&amp;self</code> to a <code>&amp;str</code> slice.\nReturns the ascii string slice with the remaining …\nReturns the ascii string slice with the remaining …\nGet the position of the first non-ASCII byte or character.\n<code>&#39;b&#39;</code>\n<code>&#39;c&#39;</code>\nReturns the number of bytes that this ASCII string buffer …\nReturns the control code represented by a caret notation …\nTerminals use caret notation to display some typed control …\nAlways returns an <code>AsAsciiStrError</code>\nReturns an iterator over the characters of the <code>AsciiStr</code>.\nReturns an iterator over the characters of the <code>AsciiStr</code> …\nTruncates the ASCII string, setting length (but not …\n<code>&#39;d&#39;</code>\n<code>&#39;e&#39;</code>\nCompares two characters case-insensitively.\nCompares two strings case-insensitively.\n<code>&#39;f&#39;</code>\nReturns the first character if the string is not empty.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an ASCII character from a <code>u8</code>, <code>char</code> or other …\nConverts anything that can represent a byte slice into an …\nConverts anything that can represent a byte buffer into an …\nConstructs an ASCII character from a <code>u8</code>, <code>char</code> or other …\nConverts anything that can be represented as a byte slice …\nConverts a vector of bytes to an <code>AsciiString</code> without …\nCreates a new <code>AsciiString</code> from a length, capacity and …\n<code>&#39;g&#39;</code>\nGet a single ASCII character from the slice.\nGet a single ASCII character from the slice.\n<code>&#39;h&#39;</code>\n<code>&#39;i&#39;</code>\nInserts an ASCII character into the buffer at position <code>idx</code>.\nInserts the given ASCII string at the given place in this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to <code>AsciiString</code>.\nConverts a <code>Box&lt;AsciiStr&gt;</code> into a <code>AsciiString</code> without …\nConvert to <code>AsciiString</code> without checking for non-ASCII …\nConverts this <code>AsciiString</code> into a <code>Box</code><code>&lt;</code><code>AsciiStr</code><code>&gt;</code>.\nGet back the original, unmodified type.\nReturns the ascii string slice with the remaining …\nCheck if the character is a letter (a-z, A-Z)\nCheck if the character is a letter or number\nCheck if the character is a letter (a-z, A-Z).\nCheck if the character is a letter or number\nCheck if the character is a space or horizontal tab\nCheck if the character is a control character\nCheck if the character is a number (0-9)\nChecks if the character is printable (except space)\nChecks if the character is a valid hex digit\nChecks if the character is alphabetic and lowercase (a-z).\nChecks if the character is printable (including space)\nChecks if the character is punctuation\nChecks if the character is alphabetic and uppercase (A-Z).\nCheck if the character is a ’ ’, ‘\\t’, ‘\\n’, …\nCheck if the character is a digit in the given radix.\nReturns true if the ASCII slice contains zero bytes.\nReturns true if the ASCII string contains zero bytes.\nChecks if the character is alphabetic and lowercase (a-z).\nChecks if the character is alphabetic and uppercase (A-Z).\nCheck if the character one of ’ ’, ‘\\t’, ‘\\n’, …\n<code>&#39;j&#39;</code>\n<code>&#39;k&#39;</code>\n<code>&#39;l&#39;</code>\nReturns the last character if the string is not empty.\nReturns the number of characters / bytes in this ASCII …\nReturns the number of bytes in this ASCII string.\nReturns an iterator over the lines of the <code>AsciiStr</code>, which …\n<code>&#39;m&#39;</code>\nReplaces letters <code>A</code> to <code>Z</code> with <code>a</code> to <code>z</code>\nReplaces uppercase letters with their lowercase equivalent.\nReplaces letters <code>a</code> to <code>z</code> with <code>A</code> to <code>Z</code>\nReplaces lowercase letters with their uppercase equivalent.\n<code>&#39;n&#39;</code>\nCreate an <code>AsciiChar</code> from a <code>char</code>, panicking if it’s not …\nCreates a new, empty ASCII string buffer without …\n<code>&#39;o&#39;</code>\n<code>&#39;p&#39;</code>\nRemoves the last character from the ASCII string buffer …\nAdds the given ASCII character to the end of the ASCII …\nPushes the given ASCII string onto this ASCII string …\n<code>&#39;q&#39;</code>\n<code>&#39;r&#39;</code>\nRemoves the ASCII character at position <code>idx</code> from the …\nReserves capacity for at least <code>additional</code> more bytes to be …\nReserves the minimum capacity for exactly <code>additional</code> more …\n<code>&#39;s&#39;</code>\nShrinks the capacity of this ASCII string buffer to match …\nConvert a subslice to an ASCII slice.\nConvert a subslice to an ASCII slice.\nReturns an iterator over parts of the <code>AsciiStr</code> separated …\n<code>&#39;t&#39;</code>\nConvert to <code>AsciiChar</code>.\nConvert to <code>AsciiChar</code> without checking that it is an ASCII …\nMaps letters A-Z to a-z and returns any other character …\nReturns a copy of this string where letters ‘A’ to ‘Z…\nCopies the content of this <code>AsciiStr</code> into an owned …\nMaps letters a-z to A-Z and returns any other character …\nReturns a copy of this string where letters ‘a’ to ‘z…\nReturns an ASCII string slice with leading and trailing …\nReturns an ASCII string slice with trailing whitespace …\nReturns an ASCII string slice with leading whitespace …\nShortens a ASCII string to the specified length.\n<code>&#39;u&#39;</code>\n<code>&#39;v&#39;</code>\nReturns the index of the first non-ASCII byte.\n<code>&#39;w&#39;</code>\nCreates a new ASCII string buffer with the given capacity. …\n<code>&#39;x&#39;</code>\n<code>&#39;y&#39;</code>\n<code>&#39;z&#39;</code>")