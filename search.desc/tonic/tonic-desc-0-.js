searchState.loadedDescShard("tonic", 0, "A Rust implementation of gRPC, a high performance, open …\nThe operation was aborted.\nSome entity that we attempted to create already exists.\nThe operation was cancelled.\ngRPC status codes used by <code>Status</code>.\nWrapper type to indicate that an error occurs during the …\nUnrecoverable data loss or corruption.\nDeadline expired before operation could complete.\nContains the error value\nA type map of protocol extensions.\nThe system is not in a state required for the operation’…\nA gRPC Method info extension.\nInternal error.\nTrait implemented by RPC request types.\nTrait implemented by RPC streaming request types.\nClient specified an invalid argument.\nThe RPC request type\nSome requested entity was not found.\nContains the success value\nThe operation completed successfully.\nOperation was attempted past the valid range.\nThe caller does not have permission to execute the …\nA gRPC request and metadata from an RPC call.\nSome resource has been exhausted.\nA gRPC response and metadata from an RPC call.\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nA gRPC status describing the result of an RPC call.\nThe RPC request stream type\nStreaming requests and responses.\nError returned if a request didn’t complete within the …\nThe request does not have valid authentication credentials\nThe service is currently unavailable.\nOperation is not implemented or not supported.\nUnknown error.\nThe operation was aborted, typically due to a concurrency …\nAdd headers from this <code>Status</code> into <code>header_map</code>.\nSome entity that we attempted to create (e.g., file or …\nA re-export of <code>async-trait</code> for use with codegen.\nHTTP specific body utilities.\nThe operation was cancelled (typically by the caller).\nClear the <code>Extensions</code> of all inserted extensions.\nGeneric client implementation.\nGet the gRPC <code>Code</code> of this <code>Status</code>.\nGeneric encoding and decoding.\nUnrecoverable data loss or corruption.\nDeadline expired before operation could complete. For …\nGet description of this <code>Code</code>.\nGet the opaque error details of this <code>Status</code>.\nExtends <code>self</code> with another <code>Extensions</code>.\nReturns a reference to the associated extensions.\nReturns a reference to the associated extensions.\nReturns a mutable reference to the associated extensions.\nReturns a mutable reference to the associated extensions.\nOperation was rejected because the system is not in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert the string representation of a <code>Code</code> (as stored, …\nCreate a <code>Status</code> from various types of <code>Error</code>.\nExtract a <code>Status</code> from a hyper <code>HeaderMap</code>.\nConvert an HTTP request to a gRPC request\nGet the <code>Code</code> that represents the integer, if known.\nCreate a new gRPC request from metadata, extensions and …\nCreate a new gRPC response from metadata, message and …\nGet a reference to a type previously inserted on this …\nGet a mutable reference to a type previously inserted on …\nGet a mutable reference to the message\nGet a mutable reference to the message\nGet a mutable reference to a type, inserting <code>value</code> if not …\nGet a mutable reference to a type, inserting the type’s …\nGet a mutable reference to a type, inserting the value …\nGet a reference to the message\nGet a immutable reference to <code>T</code>.\nInclude an encoded <code>prost_types::FileDescriptorSet</code> as a …\nInclude generated proto server and client items.\nInsert a type into this <code>Extensions</code>.\nInternal errors. Means some invariants expected by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuild an <code>http::Response</code> from the given <code>Status</code>.\nConsumes <code>self</code>, returning the message\nConsumes <code>self</code>, returning the message\nConsumes <code>self</code> returning the parts of the request.\nConsumes <code>self</code> returning the parts of the response.\nWrap the input message <code>T</code> in a <code>tonic::Request</code>\nWrap the stream of messages in a <code>tonic::Request</code>\nClient specified an invalid argument. Note that this …\nCheck whether the extension set is empty or not.\nGet the number of extensions available.\nGet the local address of this connection.\nFetch the next message from this stream.\nGet the text error message of this <code>Status</code>.\nContains data structures and utilities for handling gRPC …\nGet a reference to the custom request metadata.\nGet a reference to the custom response metadata.\nGet a reference to the custom metadata.\nGet a mutable reference to the request metadata.\nGet a mutable reference to the response metadata.\nGet a mutable reference to the custom metadata.\ngRPC method name\nCreate an empty <code>Extensions</code>.\nCreate a new gRPC request.\nCreate a new gRPC response.\nCreate a new <code>Status</code> with the associated code and message.\nCreate empty response. For creating responses that have no …\nCreate a new streaming request in the grpc response format …\nCreate a new streaming response in the grpc response …\nSome requested entity (e.g., file or directory) was not …\nThe operation completed successfully.\nOperation was attempted past the valid range. E.g., …\nThe caller does not have permission to execute the …\nGet the remote address of this connection.\nRemove a type from this <code>Extensions</code>.\nSome resource has been exhausted, perhaps a per-user …\nGeneric server implementation.\nUtilities for using Tower services with Tonic.\ngRPC service name\nAdd a source error to this status.\nSet the max duration the request is allowed to take.\nFetch the trailing metadata.\nBatteries included server and client.\nCreate a <code>Status</code> from various types of <code>Error</code>.\nThe request does not have valid authentication credentials …\nThe service is currently unavailable.  This is a most …\nOperation is not implemented or not supported/enabled in …\nUnknown error. An example of where this error may be …\nCreate a new <code>Status</code> with the associated code, message, and …\nCreate a new <code>Status</code> with the associated code, message, …\nCreate a new <code>Status</code> with the associated code, message, and …\nA type erased HTTP body used for tonic services.\nConvert a <code>http_body::Body</code> into a <code>BoxBody</code>.\nCreate an empty <code>BoxBody</code>\nErrors produced by the service.\nThe future response value.\nA gRPC client dispatcher.\nDefinition of the gRPC trait alias for <code>tower_service</code>.\nResponses body given by the service.\nEnable accepting compressed responses.\nProcess the request and return the response asynchronously.\nSend a client side streaming gRPC request.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCreates a new gRPC client with the provided <code>GrpcService</code>.\nReturns <code>Ready</code> when the service is able to process requests.\nCheck if the inner <code>GrpcService</code> is able to accept a  new …\nCompress requests with the provided encoding.\nSend a server side streaming gRPC request.\nSend a bi-directional streaming gRPC request.\nSend a single unary gRPC request.\nCreates a new gRPC client with the provided <code>GrpcService</code> …\nSettings for how tonic allocates and grows buffers.\nTrait that knows how to encode and decode gRPC messages.\nThe compression encodings Tonic supports.\nThe decodable message.\nA specialized buffer to decode gRPC messages from.\nDecodes gRPC message types\nThe encoder that can decode a message.\nStruct used to configure which encodings are enabled on a …\nThe encodable message.\nA specialized implementation of Body for encoding Result&lt;…\nA specialized buffer to encode gRPC messages into.\nEncodes gRPC message types\nThe encoder that can encode a message.\nThe type of encoding errors.\nThe type of unrecoverable frame decoding errors.\nThe type that is encoded.\nThe type that is decoded.\nA <code>Codec</code> that implements <code>application/grpc+proto</code> via the …\nStreaming requests and responses.\nControls how tonic creates and expands encode buffers.\nControls how tonic creates and expands decode buffers.\nDecode a message from the buffer.\nFetch the decoder.\nEnable a <code>CompressionEncoding</code>.\nEncodes a message into the provided buffer.\nFetch the encoder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if any <code>CompressionEncoding</code>s are enabled.\nCheck if a <code>CompressionEncoding</code> is enabled.\nConfigure a ProstCodec with encoder/decoder buffer …\nCreate a new <code>BufferSettings</code>\nTurns a stream of grpc messages into EncodeBody which is …\nTurns a stream of grpc results (message or error status) …\nRemove the last <code>CompressionEncoding</code>.\nA tool for building custom codecs based on prost encoding …\nA tool for building custom codecs based on prost encoding …\nReserves capacity for at least <code>additional</code> more bytes to be …\ngRPC metadata values can be either ASCII strings or …\nAn ascii metadata key and value.\nAn ascii metadata key and value.\nAn ascii metadata key and value.\nAn ascii metadata key and value.\nAn ascii metadata key and value.\nAn ascii metadata key.\nAn ascii metadata value.\ngRPC metadata values can be either ASCII strings or binary.\nA binary metadata key and value.\nA binary metadata key and value.\nA binary metadata key and value.\nA binary metadata key and value.\nA binary metadata key and value.\nA binary metadata key.\nA binary metadata value.\nA view into a single location in a <code>MetadataMap</code>, which may …\nHTTP Header <code>content-type</code> value for gRPC calls.\nA view to all values stored in a single entry.\n<code>MetadataMap</code> entry iterator.\n<code>MetadataMap</code> entry iterator.\nReference to a key and an associated value in a <code>MetadataMap</code>…\nReference to a key and an associated value in a <code>MetadataMap</code>…\nReference to a key in a <code>MetadataMap</code>. It can point to …\nAn iterator over <code>MetadataMap</code> keys.\nRepresents a custom metadata field name.\nA set of gRPC custom metadata entries.\nRepresents a custom metadata field value.\nAn occupied entry\nA view into a single occupied location in a <code>MetadataMap</code>.\nA vacant entry\nA view into a single empty location in a <code>MetadataMap</code>.\nA drain iterator of all values associated with a single …\nAn iterator of all values associated with a single …\nReference to a value in a <code>MetadataMap</code>. It can point to …\nReference to a value in a <code>MetadataMap</code>. It can point to …\n<code>MetadataMap</code> value iterator.\n<code>MetadataMap</code> value iterator.\nInserts an ascii key-value pair into the map. To insert a …\nInsert the value into the entry.\nLike append, but for binary keys (for example “…\nConverts a <code>MetadataValue</code> to a byte slice. For Binary …\nConverts a <code>MetadataValue</code> to a byte slice. For Binary …\nReturns a <code>str</code> representation of the metadata key.\nReturns the number of custom metadata entries the map can …\nClears the map, removing all key-value pairs. Keeps the …\nReturns true if the map contains a value for the specified …\nGets the given ascii key’s corresponding entry in the …\nGets the given Binary key’s corresponding entry in the …\nPerforms a case-insensitive comparison of the string …\nPerforms a case-insensitive comparison of the string …\nThe metadata::errors module contains types for errors that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a slice of bytes to a <code>MetadataKey</code>.\nConvert a byte slice to a <code>MetadataValue&lt;Binary&gt;</code>.\nConvert an HTTP HeaderMap to a MetadataMap\nConverts a MetadataKey into a <code>MetadataValue&lt;Ascii&gt;</code>.\nConvert a <code>Bytes</code> directly into a <code>MetadataValue</code> without …\nConverts a static string to a <code>MetadataKey</code>.\nConvert a static string to a <code>MetadataValue</code>.\nReturns a reference to the value associated with the key. …\nGet a reference to the first value in the entry.\nReturns a view of all values associated with a key. This …\nLike get_all, but for Binary keys (for example “…\nLike get, but for Binary keys (for example “…\nLike get_mut, but for Binary keys (for example “…\nReturns a mutable reference to the value associated with …\nGet a mutable reference to the first value in the entry.\nInserts an ascii key-value pair into the map. To insert a …\nInsert the value into the entry.\nSets the value of the entry.\nLike insert, but for Binary keys (for example “…\nInsert the value into the entry.\nSets the value of the entry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a MetadataMap into a HTTP HeaderMap\nTake ownership of the key\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nReturns true if the map contains no elements.\nReturns true if the <code>MetadataValue</code> has a length of zero …\nReturns <code>true</code> if the value represents sensitive data.\nAn iterator visiting all key-value pairs (both ascii and …\nReturns an iterator visiting all values associated with …\nReturns an iterator visiting all values associated with …\nAn iterator visiting all key-value pairs, with mutable …\nReturns an iterator mutably visiting all values associated …\nReturns a reference to the entry’s key\nReturns a reference to the entry’s key\nReturns a reference to the entry’s key.\nAn iterator visiting all keys.\nReturns the number of keys (ascii and binary) stored in …\nReturns the number of metadata entries (ascii and binary) …\nReturns the length of <code>self</code>, in bytes.\nCreate an empty <code>MetadataMap</code>.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nRemoves an ascii key from the map, returning the value …\nRemove the entry from the map.\nLike remove, but for Binary keys (for example “…\nRemove the entry from the map.\nRemove the entry from the map.\nReserves capacity for at least <code>additional</code> more custom …\nMark that the metadata value represents sensitive …\nConverts a <code>MetadataValue</code> to a Bytes buffer. This method …\nYields a <code>&amp;str</code> slice if the <code>MetadataValue</code> only contains …\nAn iterator visiting all values (both ascii and binary).\nAn iterator visiting all values mutably.\nCreate an empty <code>MetadataMap</code> with the specified capacity.\nA possible error when converting a <code>MetadataKey</code> from …\nA possible error when converting a <code>MetadataValue</code> from a …\nA possible error when converting a <code>MetadataValue</code> from a …\nA possible error when converting a <code>MetadataValue</code> to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA specialization of tower_service::Service.\nResponse future\nResponse future\nResponse future\nResponse future\nA gRPC Server handler.\nThe <code>Service-Name</code> as described here.\nA trait to provide a static reference to the service’s …\nProtobuf response message type\nProtobuf response message type\nProtobuf response message type\nProtobuf response message type\nStream of outbound response messages\nStream of outbound response messages\nA specialization of tower_service::Service.\nA specialization of tower_service::Service.\nA specialization of tower_service::Service.\nEnable accepting compressed requests.\nCall the service\nCall the service\nCall the service\nCall the service\nHandle a client side streaming gRPC request.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of a encoded message.\nCreates a new gRPC server with the provided <code>Codec</code>.\nEnable sending compressed responses.\nHandle a server side streaming request.\nHandle a bi-directional streaming gRPC request.\nHandle a single unary gRPC request.\nThe body type used in axum requests and responses.\nThe router type for composing handlers and services.\nA gRPC interceptor.\nA <code>Service</code> router.\nAllows adding new services to routes by passing a mutable …\nAdd a new service.\nAdd a new service.\nConvert the router into a borrowed <code>Service</code> with a fixed …\nCreate a new empty builder.\nIntercept a request before it is sent, optionally …\nCreate an empty body.\nAdd a fallback <code>Handler</code> to the router.\nAdd a fallback <code>Service</code> to the router.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Body</code> from a <code>Stream</code>.\nTrue if the router currently has at least one route added.\ngRPC interceptors which are a kind of middleware.\nCreate a new interceptor layer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this <code>Routes</code> into an <code>axum::Router</code>.\nConvert the body into a <code>Stream</code> of data frames.\nConvert this router into a <code>MakeService</code>, that is a <code>Service</code> …\nConvert this <code>Routes</code> into an <code>axum::Router</code>.\nConvert the router into an owned <code>Service</code> with a fixed …\nApply a <code>tower::Layer</code> to all routes in the router.\nMerge the paths and fallbacks of two routers into a single …\nAdd a fallback <code>Handler</code> for the case where a route exists, …\nNest a <code>Router</code> at some path.\nLike <code>nest</code>, but accepts an arbitrary <code>Service</code>.\nCreate a new <code>Body</code> that wraps another <code>http_body::Body</code>.\nCreate a new <code>Router</code>.\nCreate a new routes with <code>svc</code> already added to it.\nThis makes axum perform update some internals of the …\nAdd another route to the router.\nApply a <code>tower::Layer</code> to the router that will only run if …\nAdd another route to the router that calls a <code>Service</code>.\nReturns the routes with added services or empty <code>Routes</code> if …\nProvide the state for the router. State passed to this …\nA service wrapped in an interceptor middleware.\nA gRPC interceptor.\nA gRPC interceptor that can be used as a <code>Layer</code>, created by …\nResponse future for <code>InterceptedService</code>.\nIntercept a request before it is sent, optionally …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new interceptor layer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>InterceptedService</code> that wraps <code>S</code> and …\nTrait representing a streaming body of a Request or …\nA default batteries included <code>transport</code> channel.\nValues yielded by the <code>Body</code>.\nChannel builder.\nError’s that originate from the client or server;\nThe error type this <code>Body</code> might generate.\nA default batteries included <code>transport</code> server.\nDeprecated. Please use <code>crate::status::TimeoutExpired</code> …\nThe URI component of a request.\nGet the authority of this <code>Uri</code>.\nSets the tower service default internal buffer size\nCreates a new builder-style object to manufacture a <code>Uri</code>.\nClient implementation and builder.\nApply a concurrency limit to each request.\nCreate a channel from this config.\nCreate a channel from this config.\nApply a timeout to connecting to the uri.\nConnect with a custom connector.\nConnect with a custom connector lazily.\nSets the executor used to spawn async tasks.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempt to convert a <code>Bytes</code> buffer to a <code>Uri</code>.\nAttempt to convert a <code>Parts</code> into a <code>Uri</code>.\nConvert an <code>Endpoint</code> from shared bytes.\nConvert a <code>Uri</code> from a static string.\nConvert an <code>Endpoint</code> from a static string.\nGet the host of this <code>Uri</code>.\nSets whether to use an adaptive flow control. Uses <code>hyper</code>’…\nSet http2 KEEP_ALIVE_INTERVAL. Uses <code>hyper</code>’s default …\nSets the max size of received header frames.\nSets the max connection-level flow control for HTTP2\nSets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a <code>Uri</code> into <code>Parts</code>.\nReturns <code>true</code> when the end of stream has been reached.\nSet http2 KEEP_ALIVE_TIMEOUT. Uses <code>hyper</code>’s default …\nSet http2 KEEP_ALIVE_WHILE_IDLE. Uses <code>hyper</code>’s default …\nSet a custom origin.\nGet the path of this <code>Uri</code>.\nReturns the path &amp; query components of the Uri\nAttempt to pull out the next data buffer of this stream.\nGet the port part of this <code>Uri</code>.\nGet the port of this <code>Uri</code> as a <code>u16</code>.\nGet the query string of this <code>Uri</code>, starting after the <code>?</code>.\nApply a rate limit to each request.\nGet the scheme of this <code>Uri</code>.\nGet the scheme of this <code>Uri</code> as a <code>&amp;str</code>.\nServer implementation and builder.\nReturns the bounds on the remaining length of the stream.\nSet whether TCP keepalive messages are enabled on accepted …\nSet the value of <code>TCP_NODELAY</code> option for accepted …\nApply a timeout to each request.\nGet the endpoint uri.\nSet a custom user-agent header.\nA default batteries included <code>transport</code> channel.\nChannel builder.\nA future that resolves to an HTTP response.\nBalance a list of <code>Endpoint</code>’s.\nBalance a list of <code>Endpoint</code>’s.\nBalance a list of <code>Endpoint</code>’s.\nCreate an <code>Endpoint</code> builder that can create <code>Channel</code>s.\nReturns the argument unchanged.\nCreate an <code>Endpoint</code> from shared bytes.\nCreate an <code>Endpoint</code> from a static string.\nCalls <code>U::from(self)</code>.\nThe connection info type the IO resources generates.\nTrait that connected IO resources implement and use to …\nA stack based <code>Service</code> router.\nA default batteries included <code>transport</code> server.\nConnection info for standard TCP streams.\nBinds a socket address for a Router\nConnection info for Unix domain socket streams.\nAllow this server to accept http1 requests.\nCreate a router with the optional <code>S</code> typed service as the …\nAdd a new optional service to this router.\nCreate a router with given <code>Routes</code>.\nCreate a router with the <code>S</code> typed service as the first …\nAdd a new service to this router.\nCreate a new server builder that can configure a <code>Server</code>.\nSet the concurrency limit applied to on requests inbound …\nCreate type holding information about the connection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>TcpIncoming</code> from an existing …\nSets whether to use an adaptive flow control. Defaults to …\nSet whether HTTP2 Ping frames are enabled on accepted …\nSets a timeout for receiving an acknowledgement of the …\nSets the max size of received header frames.\nConfigures the maximum number of pending reset streams …\nSets the max connection-level flow control for HTTP2\nSets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this tonic <code>Router</code> into an axum <code>Router</code> consuming …\nCreate a tower service out of a router.\nSet the Tower <code>Layer</code> all services will be wrapped in.\nReturn the local address the IO resource is connected.\nReturns the local address of this connection.\nSets the <code>SETTINGS_MAX_CONCURRENT_STREAMS</code> option for HTTP2 …\nSets the maximum time option in milliseconds that a …\nSets the maximum frame size to use for HTTP2.\nCreates an instance by binding (opening) the specified …\nPeer address. This will be “unnamed” for client unix …\nProcess credentials for the unix socket.\nReturn the remote address the IO resource is connected too.\nReturns the remote (peer) address of this connection.\nConsume this <code>Server</code> creating a future that will execute …\nConsume this <code>Server</code> creating a future that will execute …\nConsume this <code>Server</code> creating a future that will execute …\nConsume this <code>Server</code> creating a future that will execute …\nSet whether TCP keepalive messages are enabled on accepted …\nSet the value of <code>TCP_NODELAY</code> option for accepted …\nSet a timeout on for all request handlers.\nIntercept inbound headers and add a <code>tracing::Span</code> to each …")