searchState.loadedDescShard("claxon", 0, "Claxon, a FLAC decoding library.\nContains the error value\nAn error that prevents successful decoding of the FLAC …\nA FLAC decoder that can decode the stream from the …\nControls what metadata <code>FlacReader</code> reads when constructed.\nAn iterator that yields samples read from a <code>FlacReader</code>.\nAn ill-formed FLAC stream was encountered.\nNot a decoding error, but a problem with the underlying IO.\nContains the success value\nA type for results generated by Claxon where the error …\nA currently unsupported feature of the FLAC format was …\nReturns an iterator that decodes a single frame on every …\nThe <code>frame</code> module deals with the frames that make up a FLAC …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLook up a Vorbis comment such as <code>ARTIST</code> in a …\nExposes traits that help reading data at the bit level …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestroys the FLAC reader and returns the underlying reader.\nThe <code>metadata</code> module deals with metadata at the beginning …\nWhen true, return a reader as soon as all desired metadata …\nCreate a reader that reads the FLAC format.\nCreate a reader that reads the FLAC format, with reader …\nAttempts to create a reader that reads from the specified …\nAttemps to create a reader that reads from the specified …\nWhen true, read metadata blocks at least until a Vorbis …\nReturns an iterator over all samples.\nReturns the streaminfo metadata.\nThe <code>subframe</code> module deals with subframes that make up a …\nReturns name-value pairs of Vorbis comments, such as …\nReturns the vendor string of the Vorbis comment block, if …\nA block of raw audio samples.\nContains the error value\nReads frames from a stream and exposes decoded blocks as …\nEither a <code>Block</code> or an <code>Error</code>.\nContains the success value\nAn iterator over the stereo sample pairs in a block.\nReturns the (zero-based) <code>ch</code>-th channel as a slice.\nReturns the number of channels in the block.\nReturns the number of inter-channel samples in the block.\nReturns a block with 0 channels and 0 samples.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying buffer that stores the samples in …\nDestroy the frame reader, returning the wrapped reader.\nReturns the total number of samples in this block.\nCreates a new frame reader that will yield at least one …\nDecodes the next frame or returns an error if the data was …\nReturns a sample in this block.\nReturns an iterator that produces left and right channel …\nReturns the inter-channel sample number of the first …\nWraps a <code>Reader</code> to facilitate reading that is not …\nSimilar to <code>std::io::BufRead</code>, but more performant.\nProvides convenience methods to make input less cumbersome.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestroys the buffered reader, returning the wrapped reader.\nWrap the reader in a new buffered reader.\nWraps the reader with a reader that facilitates reading …\nReads two bytes and interprets them as a big-endian 16-bit …\nReads two bytes and interprets them as a big-endian 16-bit …\nReads three bytes and interprets them as a big-endian …\nReads four bytes and interprets them as a big-endian …\nReads a single bit.\nRead n bits, where 8 &lt; n &lt;= 16.\nReads until the provided buffer is full.\nReads four bytes and interprets them as a little-endian …\nReads at most 16 bits.\nReads at most 32 bits.\nReads at most eight bits.\nReads a single byte, failing on EOF.\nReads a single byte, not failing on EOF.\nReads bits until a 1 is read, and returns the number of …\nSkips over the specified number of bytes.\nAn application block with application-specific data.\nA CUE sheet block.\nContains the error value\nIterates over Vorbis comments looking for a specific one; …\nA metadata about the flac stream.\nReads metadata blocks from a stream and exposes them as an …\nEither a <code>MetadataBlock</code> or an <code>Error</code>.\nContains the success value\nA padding block (with no meaningful data).\nA picture block.\nA block with a reserved block type, not supported by this …\nA seek point in the seek table.\nA seek table to aid seeking in the stream.\nA seek table block.\nThe streaminfo metadata block, with important information …\nA stream info block.\nIterates over Vorbis comments (FLAC tags) in a FLAC stream.\nVorbis comments, also known as FLAC tags (e.g. artist, …\nA Vorbis comment block, also known as FLAC tags.\nThe number of bits per sample.\nThe number of channels.\nName-value pairs of Vorbis comments, such as <code>ARTIST=Queen</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum block size (in inter-channel samples) used in …\nThe maximum frame size (in bytes) used in the stream.\nMD5 signature of the unencoded audio data.\nThe minimum block size (in inter-channel samples) used in …\nThe minimum frame size (in bytes) used in the stream.\nReturns a new <code>Tags</code> iterator.\nReturns a new <code>GetTag</code> iterator.\nCreates a metadata block reader that will yield at least …\nOffset in bytes from the first byte of the first frame …\nRead a single metadata block of the given type and length …\nRead a single metadata block header and body from the …\nSample number of the first sample in the target frame, or 2…\nThe sample rate in Hz.\nThe total number of inter-channel samples in the stream.\nNumber of samples in the target frame.\nThe “vendor string”, chosen by the encoder vendor.\nThe contents of the application block.\nThe registered application ID.\nThe number of padding bytes.\nDecodes a subframe into the provided block-size buffer.\nGiven a signed two’s complement integer in the <code>bits</code> …")