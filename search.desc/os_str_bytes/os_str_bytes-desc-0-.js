searchState.loadedDescShard("os_str_bytes", 0, "This crate allows interacting with the data stored by <code>OsStr</code>…\nThe error that occurs when a byte sequence is not …\nA platform agnostic variant of <code>OsStrExt</code>.\nA platform agnostic variant of <code>OsStringExt</code>.\nAllows a type to be used for searching by <code>RawOsStr</code> and …\nA container for borrowed byte strings converted by this …\nExtensions to <code>Cow&lt;RawOsStr&gt;</code> for additional conversions.\nA container for owned byte strings converted by this crate.\nReturns the byte string stored by this container.\nConverts and wraps a byte string.\nConverts a byte string into an equivalent platform-native …\nWraps a byte string, without copying or encoding …\nConverts a byte string into an equivalent platform-native …\nWraps a byte string, without copying or encoding …\nEquivalent to <code>String::clear</code>.\nEquivalent to <code>str::contains</code>.\nConverts and wraps a byte string.\nEquivalent to <code>str::ends_with</code>.\nEquivalent to <code>str::ends_with</code> but accepts this type for the …\nEquivalent to <code>str::find</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a platform-native string back to this …\nConverts a byte string into an equivalent platform-native …\nWraps a byte string, without copying or encoding …\nConverts a byte string into an equivalent platform-native …\nWraps a byte string, without copying or encoding …\nWraps a string, without copying or encoding conversion.\nWraps a string, without copying or encoding conversion.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>String::into_boxed_str</code>.\nConverts this representation back to a platform-native …\nConverts this representation back to a platform-native …\nReturns the byte string stored by this container.\nConverts a platform-native string into an equivalent byte …\nReturns the byte string stored by this container.\nEquivalent to <code>OsString::into_string</code>.\nEquivalent to <code>str::is_empty</code>.\nIterators provided by this crate.\nConverts a platform-native string into a representation …\nConverts a platform-native string into a representation …\nReturns the length of the byte string stored by this …\nEquivalent to <code>str::rfind</code>.\nEquivalent to <code>str::rsplit_once</code>.\nEquivalent to <code>String::shrink_to_fit</code>.\nEquivalent to <code>str::split</code>, but empty patterns are not …\nEquivalent to <code>str::split_at</code>.\nEquivalent to <code>String::split_off</code>.\nEquivalent to <code>str::split_once</code>.\nEquivalent to <code>str::starts_with</code>.\nEquivalent to <code>str::starts_with</code> but accepts this type for …\nEquivalent to <code>str::strip_prefix</code>.\nEquivalent to <code>str::strip_suffix</code>.\nConverts this representation back to a platform-native …\nConverts a platform-native string into an equivalent byte …\nConverts and returns the byte string stored by this …\nEquivalent to <code>OsStr::to_str</code>.\nConverts this string to the best UTF-8 representation …\nEquivalent to <code>str::trim_end_matches</code>.\nEquivalent to <code>str::trim_matches</code>.\nEquivalent to <code>str::trim_start_matches</code>.\nEquivalent to <code>String::truncate</code>.\nThe iterator returned by <code>RawOsStr::split</code>.\nA temporary type alias providing backward compatibility.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")