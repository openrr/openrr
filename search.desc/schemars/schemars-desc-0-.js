searchState.loadedDescShard("schemars", 0, "Schemars\nA type which can be described as a JSON Schema document.\nThe map type used by schemars types.\nA view into a single entry in a map, which may either be …\nAn occupied entry.\nThe set type used by schemars types.\nA vacant entry.\nJSON Schema generator and settings.\nWhether JSON Schemas generated for this type should be …\nGenerates a JSON Schema for this type.\nJSON Schema types.\nGenerates a <code>RootSchema</code> for the given type using default …\nGenerates a <code>RootSchema</code> for the given example value using …\nReturns a string that uniquely identifies the schema …\nThe name of the generated JSON Schema.\nContains the <code>Visitor</code> trait, used to recursively modify a …\nA Visitor which implements additional traits required to …\nThe main type used to generate JSON Schemas.\nSettings to customize how Schemas are generated.\nUpcasts this visitor into an <code>Any</code>, which can be used to …\nBorrows the collection of all referenceable schemas that …\nMutably borrows the collection of all referenceable …\nA JSON pointer to the expected location of referenceable …\nAttemps to find the schema that the given <code>schema</code> is …\nCreates <code>SchemaSettings</code> that conform to JSON Schema Draft 7.\nCreates <code>SchemaSettings</code> that conform to JSON Schema 2019-09.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInline all subschemas instead of using references.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>SchemaGenerator</code> using these settings.\nConsumes <code>self</code> and generates a root JSON Schema for the …\nConsumes <code>self</code> and generates a root JSON Schema for the …\nThe URI of the meta-schema describing the structure of the …\nCreates a new <code>SchemaGenerator</code> using the given settings.\nCreates <code>SchemaSettings</code> that conform to OpenAPI 3.0.\nIf <code>true</code>, schemas for <code>Option&lt;T&gt;</code> will have <code>null</code> added to …\nIf <code>true</code>, schemas for <code>Option&lt;T&gt;</code> will include a <code>nullable</code> …\nGenerates a root JSON Schema for the type <code>T</code>.\nGenerates a root JSON Schema for the given example value.\nBorrows the <code>SchemaSettings</code> being used by this …\nGenerates a JSON Schema for the type <code>T</code>, and returns either …\nReturns the collection of all referenceable schemas that …\nA list of visitors that get applied to all generated root …\nReturns an iterator over the visitors being used by this …\nModifies the <code>SchemaSettings</code> by calling the given function.\nAppends the given visitor to the list of visitors for …\nProperties of a <code>SchemaObject</code> which define validation …\nA trivial boolean JSON Schema.\nThe possible types of values in JSON Schema documents.\nProperties which annotate a <code>SchemaObject</code> which typically …\nProperties of a <code>SchemaObject</code> which define validation …\nA JSON Schema object.\nProperties of a <code>SchemaObject</code> which define validation …\nThe root object of a JSON Schema document.\nA JSON Schema.\nA JSON Schema object.\nA type which can be serialized as a single item, or …\nProperties of a <code>SchemaObject</code> which define validation …\nProperties of a <code>SchemaObject</code> which define validation …\nThe <code>additionalItems</code> keyword.\nThe <code>additionalProperties</code> keyword.\nThe <code>allOf</code> keyword.\nThe <code>anyOf</code> keyword.\nReturns a mutable reference to this schema’s …\nProperties of the <code>SchemaObject</code> which define validation …\nThe <code>const</code> keyword.\nReturns <code>true</code> if <code>self</code> is either a <code>Single</code> equal to <code>x</code>, or a …\nThe <code>contains</code> keyword.\nThe <code>default</code> keyword.\nThe <code>definitions</code> keyword.\nThe <code>deprecated</code> keyword.\nThe <code>description</code> keyword.\nThe <code>else</code> keyword.\nThe <code>enum</code> keyword.\nThe <code>examples</code> keyword.\nThe <code>exclusiveMaximum</code> keyword.\nThe <code>exclusiveMinimum</code> keyword.\nArbitrary extra properties which are not part of the JSON …\nThe <code>format</code> keyword.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if <code>self</code> accepts values of the given type, …\nThe <code>$id</code> keyword.\nThe <code>if</code> keyword.\nThe <code>type</code> keyword.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the given schema (if it is a boolean schema) into …\nReturns <code>true</code> if <code>self</code> is a <code>$ref</code> schema.\nReturns <code>true</code> if <code>self</code> is a <code>$ref</code> schema.\nThe <code>items</code> keyword.\nThe <code>maxItems</code> keyword.\nThe <code>maxLength</code> keyword.\nThe <code>maxProperties</code> keyword.\nThe <code>maximum</code> keyword.\nThe <code>$schema</code> keyword.\nReturns a mutable reference to this schema’s <code>Metadata</code>, …\nProperties which annotate the <code>SchemaObject</code> which typically …\nThe <code>minItems</code> keyword.\nThe <code>minLength</code> keyword.\nThe <code>minProperties</code> keyword.\nThe <code>minimum</code> keyword.\nThe <code>multipleOf</code> keyword.\nCreates a new <code>$ref</code> schema.\nCreates a new <code>$ref</code> schema.\nThe <code>not</code> keyword.\nReturns a mutable reference to this schema’s …\nProperties of the <code>SchemaObject</code> which define validation …\nReturns a mutable reference to this schema’s …\nProperties of the <code>SchemaObject</code> which define validation …\nThe <code>oneOf</code> keyword.\nThe <code>pattern</code> keyword.\nThe <code>patternProperties</code> keyword.\nThe <code>properties</code> keyword.\nThe <code>propertyNames</code> keyword.\nThe <code>readOnly</code> keyword.\nThe <code>$ref</code> keyword.\nThe <code>required</code> keyword.\nThe root schema itself.\nReturns a mutable reference to this schema’s …\nProperties of the <code>SchemaObject</code> which define validation …\nReturns a mutable reference to this schema’s …\nProperties of the <code>SchemaObject</code> which define validation …\nThe <code>then</code> keyword.\nThe <code>title</code> keyword.\nThe <code>uniqueItems</code> keyword.\nThe <code>writeOnly</code> keyword.\nThis visitor will restructure JSON Schema objects so that …\nThis visitor will replace all boolean JSON Schemas with …\nThis visitor will remove the <code>examples</code> schema property and …\nTrait used to recursively modify a constructed schema and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhen set to <code>true</code>, the <code>examples</code> property will not be …\nWhen set to <code>true</code>, a schema’s <code>additionalProperties</code> …\nVisits all subschemas of the <code>RootSchema</code>.\nOverride this method to modify a <code>RootSchema</code> and …\nVisits all subschemas of the <code>Schema</code>.\nOverride this method to modify a <code>Schema</code> and (optionally) …\nVisits all subschemas of the <code>SchemaObject</code>.\nOverride this method to modify a <code>SchemaObject</code> and …")