searchState.loadedDescShard("deflate", 0, "An implementation an encoder using DEFLATE compression …\nHigher compression level (<code>CompressionOptions::high()</code>).\nAn enum describing the level of compression to be used by …\nA struct describing the options for a compressor or …\nDefault level (<code>CompressionOptions::default()</code>).\nFast minimal compression (<code>CompressionOptions::fast()</code>).\nUse greedy matching: the matching algorithm simply uses a …\nUse lazy matching: after finding a match, the next input …\nAn enum describing whether we use lazy or greedy matching.\nCompress normally.\nEnum allowing some special options (not implemented yet)!\nForce fixed Huffman tables. (Unimplemented!).\nForce stored (uncompressed) blocks only. (Unimplemented!).\nReturns the options describing the default compression …\nCompress the given slice of bytes with DEFLATE compression …\nCompress the given slice of bytes with DEFLATE compression.\nCompress the given slice of bytes with DEFLATE …\nCompress the given slice of bytes with DEFLATE …\nCompress the given slice of bytes with DEFLATE …\nCompress the given slice of bytes with DEFLATE …\nReturns  a fast set of compression settings\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns compression settings roughly corresponding to the …\nReturns a set of compression settings that makes the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOnly lazy match if we have a length less than this value.\nWhether to use lazy or greedy matching.\nThe maximum number of checks to make in the hash table for …\nReturns a set of compression settings that makes the …\nForce fixed/stored blocks (Not implemented yet).\nEncoders implementing a <code>Write</code> interface.\nA DEFLATE encoder/compressor.\nA Gzip encoder/compressor.\nA Zlib encoder/compressor.\nReturn the adler32 checksum of the currently consumed data.\nGet the crc32 checksum of the data consumed so far.\nWhen the encoder is dropped, output the rest of the data.\nWhen the encoder is dropped, output the rest of the data.\nWhen the encoder is dropped, output the rest of the data.\nEncode all pending data to the contained writer, consume …\nEncode all pending data to the contained writer, consume …\nEncode all pending data to the contained writer, consume …\nFlush the encoder.\nFlush the encoder.\nFlush the encoder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new GzEncoder from the provided <code>GzBuilder</code>. This …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new encoder using the provided compression …\nCreate a new <code>ZlibEncoder</code> using the provided compression …\nCreate a new <code>GzEncoder</code> writing deflate-compressed data to …\nResets the encoder (except the compression options), …\nResets the encoder (except the compression options), …\nResets the encoder (except the compression options), …\nResets the encoder (except the compression options), …")