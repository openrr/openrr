(function() {
    var type_impls = Object.fromEntries([["immutable_chunkmap",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Map%3CK,+V,+SIZE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#67\">Source</a><a href=\"#impl-Clone-for-Map%3CK,+V,+SIZE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, const SIZE: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#67\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","immutable_chunkmap::map::MapS","immutable_chunkmap::map::MapM","immutable_chunkmap::map::MapL"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Map%3CK,+V,+SIZE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#154-162\">Source</a><a href=\"#impl-Debug-for-Map%3CK,+V,+SIZE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, const SIZE: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#159-161\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","immutable_chunkmap::map::MapS","immutable_chunkmap::map::MapM","immutable_chunkmap::map::MapL"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Map%3CK,+V,+SIZE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#107-115\">Source</a><a href=\"#impl-Default-for-Map%3CK,+V,+SIZE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, const SIZE: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#112-114\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","immutable_chunkmap::map::MapS","immutable_chunkmap::map::MapM","immutable_chunkmap::map::MapL"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C(K,+V)%3E-for-Map%3CK,+V,+SIZE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#187-195\">Source</a><a href=\"#impl-FromIterator%3C(K,+V)%3E-for-Map%3CK,+V,+SIZE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, const SIZE: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#192-194\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(K, V)</a>&gt;&gt;(iter: T) -&gt; Self</h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<(K, V)>","immutable_chunkmap::map::MapS","immutable_chunkmap::map::MapM","immutable_chunkmap::map::MapL"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Map%3CK,+V,+SIZE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#97-105\">Source</a><a href=\"#impl-Hash-for-Map%3CK,+V,+SIZE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, const SIZE: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#102-104\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","immutable_chunkmap::map::MapS","immutable_chunkmap::map::MapM","immutable_chunkmap::map::MapL"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3C%26Q%3E-for-Map%3CK,+V,+SIZE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#164-174\">Source</a><a href=\"#impl-Index%3C%26Q%3E-for-Map%3CK,+V,+SIZE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Q, K, V, const SIZE: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;'a Q</a>&gt; for <a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#170\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = V</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#171-173\">Source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;V</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<&'a Q>","immutable_chunkmap::map::MapS","immutable_chunkmap::map::MapM","immutable_chunkmap::map::MapL"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3C%26Q%3E-for-Map%3CK,+V,+SIZE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#176-185\">Source</a><a href=\"#impl-IndexMut%3C%26Q%3E-for-Map%3CK,+V,+SIZE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Q, K, V, const SIZE: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;'a Q</a>&gt; for <a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#182-184\">Source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;'a Q</a>) -&gt; &amp;mut Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<&'a Q>","immutable_chunkmap::map::MapS","immutable_chunkmap::map::MapM","immutable_chunkmap::map::MapL"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Map%3CK,+V,+SIZE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#306-755\">Source</a><a href=\"#impl-Map%3CK,+V,+SIZE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, const SIZE: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#312-314\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a new empty map</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downgrade\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#317-319\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.downgrade\" class=\"fn\">downgrade</a>(&amp;self) -&gt; <a class=\"struct\" href=\"immutable_chunkmap/map/struct.WeakMapRef.html\" title=\"struct immutable_chunkmap::map::WeakMapRef\">WeakMapRef</a>&lt;K, V, SIZE&gt;</h4></section></summary><div class=\"docblock\"><p>Create a weak reference to this map</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strong_count\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#322-324\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.strong_count\" class=\"fn\">strong_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the number of strong references to this map (see Arc)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.weak_count\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#327-329\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.weak_count\" class=\"fn\">weak_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the number of weak references to this map (see Arc)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_many\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#349-351\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.insert_many\" class=\"fn\">insert_many</a>&lt;E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(K, V)</a>&gt;&gt;(&amp;self, elts: E) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>This will insert many elements at once, and is\npotentially a lot faster than inserting one by one,\nespecially if the data is sorted. It is just a wrapper\naround the more general update_many method.</p>\n<p>#Examples</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code> <span class=\"kw\">use </span><span class=\"self\">self</span>::immutable_chunkmap::map::MapM;\n\n <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[(<span class=\"number\">1</span>, <span class=\"number\">3</span>), (<span class=\"number\">10</span>, <span class=\"number\">1</span>), (-<span class=\"number\">12</span>, <span class=\"number\">2</span>), (<span class=\"number\">44</span>, <span class=\"number\">0</span>), (<span class=\"number\">50</span>, -<span class=\"number\">1</span>)];\n v.sort_unstable_by_key(|<span class=\"kw-2\">&amp;</span>(k, <span class=\"kw\">_</span>)| k);\n\n <span class=\"kw\">let </span>m = MapM::new().insert_many(v.iter().map(|(k, v)| (<span class=\"kw-2\">*</span>k, <span class=\"kw-2\">*</span>v)));\n\n <span class=\"kw\">for </span>(k, v) <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>v {\n   <span class=\"macro\">assert_eq!</span>(m.get(k), Option::Some(v))\n }</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_many\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#357-364\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.remove_many\" class=\"fn\">remove_many</a>&lt;Q, E&gt;(&amp;self, elts: E) -&gt; Self<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,</div></h4></section></summary><div class=\"docblock\"><p>This will remove many elements at once, and is potentially a\nlot faster than removing elements one by one, especially if\nthe data is sorted. It is just a wrapper around the more\ngeneral update_many method.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_many\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#394-402\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.update_many\" class=\"fn\">update_many</a>&lt;Q, D, E, F&gt;(&amp;self, elts: E, f: F) -&gt; Self<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(Q, D)</a>&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(Q, D, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;V</a>)&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>This method updates multiple bindings in one call. Given an\niterator of an arbitrary type (Q, D), where Q is any borrowed\nform of K, an update function taking Q, D, the current binding\nin the map, if any, and producing the new binding, if any,\nthis method will produce a new map with updated bindings of\nmany elements at once. It will skip intermediate node\nallocations where possible. If the data in elts is sorted, it\nwill be able to skip many more intermediate allocations, and\ncan produce a speedup of about 10x compared to\ninserting/updating one by one. In any case it should always be\nfaster than inserting elements one by one, even with random\nunsorted keys.</p>\n<p>#Examples</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::iter::FromIterator;\n<span class=\"kw\">use </span><span class=\"self\">self</span>::immutable_chunkmap::map::MapM;\n\n<span class=\"kw\">let </span>m = MapM::from_iter((<span class=\"number\">0</span>..<span class=\"number\">4</span>).map(|k| (k, k)));\n<span class=\"kw\">let </span>m = m.update_many(\n    (<span class=\"number\">0</span>..<span class=\"number\">4</span>).map(|x| (x, ())),\n    |k, (), cur| cur.map(|(<span class=\"kw\">_</span>, c)| (k, c + <span class=\"number\">1</span>))\n);\n<span class=\"macro\">assert_eq!</span>(\n    m.into_iter().map(|(k, v)| (<span class=\"kw-2\">*</span>k, <span class=\"kw-2\">*</span>v)).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;(),\n    <span class=\"macro\">vec!</span>[(<span class=\"number\">0</span>, <span class=\"number\">1</span>), (<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"number\">3</span>), (<span class=\"number\">3</span>, <span class=\"number\">4</span>)]\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#409-412\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;self, k: K, v: V) -&gt; (Self, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;)</h4></section></summary><div class=\"docblock\"><p>return a new map with (k, v) inserted into it. If k\nalready exists in the old map, the old binding will be\nreturned, and the new map will contain the new\nbinding. In fact this method is just a wrapper around\nupdate.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_cow\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#416-418\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.insert_cow\" class=\"fn\">insert_cow</a>(&amp;mut self, k: K, v: V) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;</h4></section></summary><div class=\"docblock\"><p>insert in place using copy on write semantics if self is not a\nunique reference to the map. see <code>update_cow</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#449-457\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.update\" class=\"fn\">update</a>&lt;Q, D, F&gt;(&amp;self, q: Q, d: D, f: F) -&gt; (Self, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;)<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(Q, D, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;V</a>)&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>return a new map with the binding for q, which can be any\nborrowed form of k, updated to the result of f. If f returns\nNone, the binding will be removed from the new map, otherwise\nit will be inserted. This function is more efficient than\ncalling <code>get</code> and then <code>insert</code>, since it makes only one tree\ntraversal instead of two. This method runs in log(N) time and\nspace where N is the size of the map.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span><span class=\"self\">self</span>::immutable_chunkmap::map::MapM;\n\n<span class=\"kw\">let </span>(m, <span class=\"kw\">_</span>) = MapM::new().update(<span class=\"number\">0</span>, <span class=\"number\">0</span>, |k, d, <span class=\"kw\">_</span>| <span class=\"prelude-val\">Some</span>((k, d)));\n<span class=\"kw\">let </span>(m, <span class=\"kw\">_</span>) = m.update(<span class=\"number\">1</span>, <span class=\"number\">1</span>, |k, d, <span class=\"kw\">_</span>| <span class=\"prelude-val\">Some</span>((k, d)));\n<span class=\"kw\">let </span>(m, <span class=\"kw\">_</span>) = m.update(<span class=\"number\">2</span>, <span class=\"number\">2</span>, |k, d, <span class=\"kw\">_</span>| <span class=\"prelude-val\">Some</span>((k, d)));\n<span class=\"macro\">assert_eq!</span>(m.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(m.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(m.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>(m, <span class=\"kw\">_</span>) = m.update(<span class=\"number\">0</span>, (), |k, (), v| v.map(<span class=\"kw\">move </span>|(<span class=\"kw\">_</span>, v)| (k, v + <span class=\"number\">1</span>)));\n<span class=\"macro\">assert_eq!</span>(m.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(m.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(m.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>(m, <span class=\"kw\">_</span>) = m.update(<span class=\"number\">1</span>, (), |<span class=\"kw\">_</span>, (), <span class=\"kw\">_</span>| <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(m.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(m.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(m.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_cow\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#496-503\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.update_cow\" class=\"fn\">update_cow</a>&lt;Q, D, F&gt;(&amp;mut self, q: Q, d: D, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(Q, D, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;V</a>)&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Perform a copy on write update to the map. In the case that\nself is a unique reference to the map, then the update will be\nperformed completly in place. self will be mutated, and no\nprevious version will be available. In the case that self has\na clone, or clones, then only the parts of the map that need\nto be mutated will be copied before the update is\nperformed. self will reference the mutated copy, and previous\nversions of the map will not be modified. self will still\nshare all the parts of the map that did not need to be mutated\nwith any pre existing clones.</p>\n<p>COW semantics are a flexible middle way between full\nperistance and full mutability. Needless to say in the case\nwhere you have a unique reference to the map, using update_cow\nis a lot faster than using update, and a lot more flexible\nthan update_many.</p>\n<p>Other than copy on write the semanics of this method are\nidentical to those of update.</p>\n<p>#Examples</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code> <span class=\"kw\">use </span><span class=\"self\">self</span>::immutable_chunkmap::map::MapM;\n\n <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>m = MapM::new().update(<span class=\"number\">0</span>, <span class=\"number\">0</span>, |k, d, <span class=\"kw\">_</span>| <span class=\"prelude-val\">Some</span>((k, d))).<span class=\"number\">0</span>;\n <span class=\"kw\">let </span>orig = m.clone();\n m.update_cow(<span class=\"number\">1</span>, <span class=\"number\">1</span>, |k, d, <span class=\"kw\">_</span>| <span class=\"prelude-val\">Some</span>((k, d))); <span class=\"comment\">// copies the original chunk\n </span>m.update_cow(<span class=\"number\">2</span>, <span class=\"number\">2</span>, |k, d, <span class=\"kw\">_</span>| <span class=\"prelude-val\">Some</span>((k, d))); <span class=\"comment\">// doesn't copy anything\n </span><span class=\"macro\">assert_eq!</span>(m.len(), <span class=\"number\">3</span>);\n <span class=\"macro\">assert_eq!</span>(orig.len(), <span class=\"number\">1</span>);\n <span class=\"macro\">assert_eq!</span>(m.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>));\n <span class=\"macro\">assert_eq!</span>(m.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n <span class=\"macro\">assert_eq!</span>(m.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n <span class=\"macro\">assert_eq!</span>(orig.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>));\n <span class=\"macro\">assert_eq!</span>(orig.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n <span class=\"macro\">assert_eq!</span>(orig.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#537-542\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.union\" class=\"fn\">union</a>&lt;F&gt;(&amp;self, other: &amp;<a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;, f: F) -&gt; Self<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;V</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Merge two maps together. Bindings that exist in both maps will\nbe passed to f, which may elect to remove the binding by\nreturning None. This function runs in O(log(n) + m) time and\nspace, where n is the size of the largest map, and m is the\nnumber of intersecting chunks. It will never be slower than\ncalling update_many on the first map with an iterator over the\nsecond, and will be significantly faster if the intersection\nis minimal or empty.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::iter::FromIterator;\n<span class=\"kw\">use </span><span class=\"self\">self</span>::immutable_chunkmap::map::MapM;\n\n<span class=\"kw\">let </span>m0 = MapM::from_iter((<span class=\"number\">0</span>..<span class=\"number\">10</span>).map(|k| (k, <span class=\"number\">1</span>)));\n<span class=\"kw\">let </span>m1 = MapM::from_iter((<span class=\"number\">10</span>..<span class=\"number\">20</span>).map(|k| (k, <span class=\"number\">1</span>)));\n<span class=\"kw\">let </span>m2 = m0.union(<span class=\"kw-2\">&amp;</span>m1, |_k, _v0, _v1| <span class=\"macro\">panic!</span>(<span class=\"string\">\"no intersection expected\"</span>));\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">20 </span>{\n    <span class=\"macro\">assert!</span>(m2.get(<span class=\"kw-2\">&amp;</span>i).is_some())\n}\n\n<span class=\"kw\">let </span>m3 = MapM::from_iter((<span class=\"number\">5</span>..<span class=\"number\">9</span>).map(|k| (k, <span class=\"number\">1</span>)));\n<span class=\"kw\">let </span>m4 = m3.union(<span class=\"kw-2\">&amp;</span>m2, |_k, v0, v1| <span class=\"prelude-val\">Some</span>(v0 + v1));\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">20 </span>{\n   <span class=\"macro\">assert!</span>(\n       <span class=\"kw-2\">*</span>m4.get(<span class=\"kw-2\">&amp;</span>i).unwrap() ==\n       <span class=\"kw-2\">*</span>m3.get(<span class=\"kw-2\">&amp;</span>i).unwrap_or(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>) + <span class=\"kw-2\">*</span>m2.get(<span class=\"kw-2\">&amp;</span>i).unwrap_or(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>)\n   )\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersect\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#569-574\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.intersect\" class=\"fn\">intersect</a>&lt;F&gt;(&amp;self, other: &amp;<a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;, f: F) -&gt; Self<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;V</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Produce a map containing the mapping over F of the\nintersection (by key) of two maps. The function f runs on each\nintersecting element, and has the option to omit elements from\nthe intersection by returning None, or change the value any\nway it likes. Runs in O(log(N) + M) time and space where N is\nthe size of the smallest map, and M is the number of\nintersecting chunks.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code> <span class=\"kw\">use </span>core::iter::FromIterator;\n <span class=\"kw\">use </span><span class=\"self\">self</span>::immutable_chunkmap::map::MapM;\n\n <span class=\"kw\">let </span>m0 = MapM::from_iter((<span class=\"number\">0</span>..<span class=\"number\">100000</span>).map(|k| (k, <span class=\"number\">1</span>)));\n <span class=\"kw\">let </span>m1 = MapM::from_iter((<span class=\"number\">50</span>..<span class=\"number\">30000</span>).map(|k| (k, <span class=\"number\">1</span>)));\n <span class=\"kw\">let </span>m2 = m0.intersect(<span class=\"kw-2\">&amp;</span>m1, |_k, v0, v1| <span class=\"prelude-val\">Some</span>(v0 + v1));\n\n <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">100000 </span>{\n     <span class=\"kw\">if </span>i &gt;= <span class=\"number\">30000 </span>|| i &lt; <span class=\"number\">50 </span>{\n         <span class=\"macro\">assert!</span>(m2.get(<span class=\"kw-2\">&amp;</span>i).is_none());\n     } <span class=\"kw\">else </span>{\n         <span class=\"macro\">assert!</span>(<span class=\"kw-2\">*</span>m2.get(<span class=\"kw-2\">&amp;</span>i).unwrap() == <span class=\"number\">2</span>);\n     }\n }</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.diff\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#602-609\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.diff\" class=\"fn\">diff</a>&lt;F&gt;(&amp;self, other: &amp;<a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;, f: F) -&gt; Self<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;V</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h4></section></summary><div class=\"docblock\"><p>Produce a map containing the second map subtracted from the\nfirst. The function F is called for each intersecting element,\nand ultimately decides whether it appears in the result, for\nexample, to compute a classical set diff, the function should\nalways return None.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code> <span class=\"kw\">use </span>core::iter::FromIterator;\n <span class=\"kw\">use </span><span class=\"self\">self</span>::immutable_chunkmap::map::MapM;\n\n <span class=\"kw\">let </span>m0 = MapM::from_iter((<span class=\"number\">0</span>..<span class=\"number\">10000</span>).map(|k| (k, <span class=\"number\">1</span>)));\n <span class=\"kw\">let </span>m1 = MapM::from_iter((<span class=\"number\">50</span>..<span class=\"number\">3000</span>).map(|k| (k, <span class=\"number\">1</span>)));\n <span class=\"kw\">let </span>m2 = m0.diff(<span class=\"kw-2\">&amp;</span>m1, |_k, _v0, _v1| <span class=\"prelude-val\">None</span>);\n\n m2.invariant();\n <span class=\"macro\">dbg!</span>(m2.len());\n <span class=\"macro\">assert!</span>(m2.len() == <span class=\"number\">10000 </span>- <span class=\"number\">2950</span>);\n <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10000 </span>{\n     <span class=\"kw\">if </span>i &gt;= <span class=\"number\">3000 </span>|| i &lt; <span class=\"number\">50 </span>{\n         <span class=\"macro\">assert!</span>(<span class=\"kw-2\">*</span>m2.get(<span class=\"kw-2\">&amp;</span>i).unwrap() == <span class=\"number\">1</span>);\n     } <span class=\"kw\">else </span>{\n         <span class=\"macro\">assert!</span>(m2.get(<span class=\"kw-2\">&amp;</span>i).is_none());\n     }\n }</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#614-619\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.get\" class=\"fn\">get</a>&lt;'a, Q: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>&gt;(&amp;'a self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;'a V</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,</div></h4></section></summary><div class=\"docblock\"><p>lookup the mapping for k. If it doesn’t exist return\nNone. Runs in log(N) time and constant space. where N\nis the size of the map.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_key\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#624-629\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.get_key\" class=\"fn\">get_key</a>&lt;'a, Q: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>&gt;(&amp;'a self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;'a K</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,</div></h4></section></summary><div class=\"docblock\"><p>lookup the mapping for k. Return the key. If it doesn’t exist\nreturn None. Runs in log(N) time and constant space. where N\nis the size of the map.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_full\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#634-639\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.get_full\" class=\"fn\">get_full</a>&lt;'a, Q: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>&gt;(&amp;'a self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;'a V</a>)&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,</div></h4></section></summary><div class=\"docblock\"><p>lookup the mapping for k. Return both the key and the\nvalue. If it doesn’t exist return None. Runs in log(N) time\nand constant space. where N is the size of the map.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut_cow\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#666-671\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.get_mut_cow\" class=\"fn\">get_mut_cow</a>&lt;'a, Q: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>&gt;(\n    &amp;'a mut self,\n    k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Q</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;'a mut V</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Get a mutable reference to the value mapped to <code>k</code> using copy on write semantics.\nThis works as <code>Arc::make_mut</code>, it will only clone the parts of the tree that are,</p>\n<ul>\n<li>required to reach <code>k</code></li>\n<li>have a strong count &gt; 1</li>\n</ul>\n<p>This operation is also triggered by mut indexing on the map, e.g. <code>&amp;mut m[k]</code>\ncalls <code>get_mut_cow</code> on <code>m</code></p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::iter::FromIterator;\n<span class=\"kw\">use </span><span class=\"self\">self</span>::immutable_chunkmap::map::MapM <span class=\"kw\">as </span>Map;\n  \n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>m = Map::from_iter((<span class=\"number\">0</span>..<span class=\"number\">100</span>).map(|k| (k, Map::from_iter((<span class=\"number\">0</span>..<span class=\"number\">100</span>).map(|k| (k, <span class=\"number\">1</span>))))));\n<span class=\"kw\">let </span>orig = m.clone();\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(inner) = m.get_mut_cow(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(v) = inner.get_mut_cow(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>) {\n        <span class=\"kw-2\">*</span>v += <span class=\"number\">1\n    </span>}\n}\n\n<span class=\"macro\">assert_eq!</span>(m.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>).and_then(|m| m.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>)), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(orig.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>).and_then(|m| m.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>)), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_cow\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#675-680\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.get_or_insert_cow\" class=\"fn\">get_or_insert_cow</a>&lt;'a, F&gt;(&amp;'a mut self, k: K, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;'a mut V</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; V,</div></h4></section></summary><div class=\"docblock\"><p>Same as <code>get_mut_cow</code> except if the value is not in the map it will\nfirst be inserted by calling <code>f</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#686-692\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.remove\" class=\"fn\">remove</a>&lt;Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>&gt;(&amp;self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; (Self, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;)<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,</div></h4></section></summary><div class=\"docblock\"><p>return a new map with the mapping under k removed. If\nthe binding existed in the old map return it. Runs in\nlog(N) time and log(N) space, where N is the size of\nthe map.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_cow\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#696-701\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.remove_cow\" class=\"fn\">remove_cow</a>&lt;Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>&gt;(&amp;mut self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,</div></h4></section></summary><div class=\"docblock\"><p>remove in place using copy on write semantics if self is not a\nunique reference to the map. see <code>update_cow</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#704-706\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>get the number of elements in the map O(1) time and space</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.range\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#716-723\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.range\" class=\"fn\">range</a>&lt;'a, Q, R&gt;(&amp;'a self, r: R) -&gt; Iter&lt;'a, R, Q, K, V, SIZE&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;Q&gt; + 'a,</div></h4></section></summary><div class=\"docblock\"><p>return an iterator over the subset of elements in the\nmap that are within the specified range.</p>\n<p>The returned iterator runs in O(log(N) + M) time, and\nconstant space. N is the number of elements in the\ntree, and M is the number of elements you examine.</p>\n<p>if lbound &gt;= ubound the returned iterator will be empty</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.range_mut_cow\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#736-743\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.range_mut_cow\" class=\"fn\">range_mut_cow</a>&lt;'a, Q, R&gt;(\n    &amp;'a mut self,\n    r: R,\n) -&gt; IterMut&lt;'a, R, Q, K, V, SIZE&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;Q&gt; + 'a,</div></h4></section></summary><div class=\"docblock\"><p>return a mutable iterator over the subset of elements in the\nmap that are within the specified range. The iterator will\ncopy on write the part of the tree that it visits,\nspecifically it will be as if you ran get_mut_cow on every\nelement you visit.</p>\n<p>The returned iterator runs in O(log(N) + M) time, and\nconstant space. N is the number of elements in the\ntree, and M is the number of elements you examine.</p>\n<p>if lbound &gt;= ubound the returned iterator will be empty</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut_cow\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#752-754\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.iter_mut_cow\" class=\"fn\">iter_mut_cow</a>&lt;'a&gt;(&amp;'a mut self) -&gt; IterMut&lt;'a, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/range/struct.RangeFull.html\" title=\"struct core::ops::range::RangeFull\">RangeFull</a>, K, K, V, SIZE&gt;</h4></section></summary><div class=\"docblock\"><p>return a mutable iterator over the entire map. The iterator\nwill copy on write every element in the tree, specifically it\nwill be as if you ran get_mut_cow on every element.</p>\n<p>The returned iterator runs in O(log(N) + M) time, and\nconstant space. N is the number of elements in the\ntree, and M is the number of elements you examine.</p>\n</div></details></div></details>",0,"immutable_chunkmap::map::MapS","immutable_chunkmap::map::MapM","immutable_chunkmap::map::MapL"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Map%3CK,+V,+SIZE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#757-767\">Source</a><a href=\"#impl-Map%3CK,+V,+SIZE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, const SIZE: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_default_cow\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#764-766\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.get_or_default_cow\" class=\"fn\">get_or_default_cow</a>&lt;'a&gt;(&amp;'a mut self, k: K) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;'a mut V</a></h4></section></summary><div class=\"docblock\"><p>Same as <code>get_mut_cow</code> except if the value isn’t in the map it will\nbe added by calling <code>V::default</code></p>\n</div></details></div></details>",0,"immutable_chunkmap::map::MapS","immutable_chunkmap::map::MapM","immutable_chunkmap::map::MapL"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Map%3CK,+V,+SIZE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#769-778\">Source</a><a href=\"#impl-Map%3CK,+V,+SIZE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, const SIZE: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.invariant\" class=\"method\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#775-777\">Source</a><h4 class=\"code-header\">pub fn <a href=\"immutable_chunkmap/map/struct.Map.html#tymethod.invariant\" class=\"fn\">invariant</a>(&amp;self)</h4></section></div></details>",0,"immutable_chunkmap::map::MapS","immutable_chunkmap::map::MapM","immutable_chunkmap::map::MapL"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Map%3CK,+V,+SIZE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#144-152\">Source</a><a href=\"#impl-Ord-for-Map%3CK,+V,+SIZE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, const SIZE: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#149-151\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1013-1015\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1052-1054\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1078-1080\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","immutable_chunkmap::map::MapS","immutable_chunkmap::map::MapM","immutable_chunkmap::map::MapL"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Map%3CK,+V,+SIZE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#117-125\">Source</a><a href=\"#impl-PartialEq-for-Map%3CK,+V,+SIZE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, const SIZE: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#122-124\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","immutable_chunkmap::map::MapS","immutable_chunkmap::map::MapM","immutable_chunkmap::map::MapL"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Map%3CK,+V,+SIZE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#134-142\">Source</a><a href=\"#impl-PartialOrd-for-Map%3CK,+V,+SIZE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, const SIZE: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#139-141\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","immutable_chunkmap::map::MapS","immutable_chunkmap::map::MapM","immutable_chunkmap::map::MapL"],["<section id=\"impl-Eq-for-Map%3CK,+V,+SIZE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/immutable_chunkmap/map.rs.html#127-132\">Source</a><a href=\"#impl-Eq-for-Map%3CK,+V,+SIZE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, const SIZE: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"immutable_chunkmap/map/struct.Map.html\" title=\"struct immutable_chunkmap::map::Map\">Map</a>&lt;K, V, SIZE&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section>","Eq","immutable_chunkmap::map::MapS","immutable_chunkmap::map::MapM","immutable_chunkmap::map::MapL"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[88726]}