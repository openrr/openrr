(function() {
    var type_impls = Object.fromEntries([["typewit",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BoolWitG%3CB%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/typewit/const_marker/boolwit.rs.html#204-359\">Source</a><a href=\"#impl-BoolWitG%3CB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B&gt; <a class=\"enum\" href=\"typewit/const_marker/enum.BoolWitG.html\" title=\"enum typewit::const_marker::BoolWitG\">BoolWitG</a>&lt;B&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_true\" class=\"method\"><a class=\"src rightside\" href=\"src/typewit/const_marker/boolwit.rs.html#216-218\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"typewit/const_marker/enum.BoolWitG.html#tymethod.is_true\" class=\"fn\">is_true</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Whether <code>B == Bool&lt;true&gt;</code></p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typewit::{const_marker::BoolWitG, TypeEq};\n \n<span class=\"macro\">assert_eq!</span>(BoolWitG::True(TypeEq::NEW).is_true(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(BoolWitG::False(TypeEq::NEW).is_true(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_false\" class=\"method\"><a class=\"src rightside\" href=\"src/typewit/const_marker/boolwit.rs.html#231-233\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"typewit/const_marker/enum.BoolWitG.html#tymethod.is_false\" class=\"fn\">is_false</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Whether <code>B == Bool&lt;false&gt;</code></p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typewit::{const_marker::BoolWitG, TypeEq};\n \n<span class=\"macro\">assert_eq!</span>(BoolWitG::True(TypeEq::NEW).is_false(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(BoolWitG::False(TypeEq::NEW).is_false(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_true\" class=\"method\"><a class=\"src rightside\" href=\"src/typewit/const_marker/boolwit.rs.html#246-251\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"typewit/const_marker/enum.BoolWitG.html#tymethod.to_true\" class=\"fn\">to_true</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"typewit/struct.TypeEq.html\" title=\"struct typewit::TypeEq\">TypeEq</a>&lt;B, <a class=\"struct\" href=\"typewit/const_marker/struct.Bool.html\" title=\"struct typewit::const_marker::Bool\">Bool</a>&lt;true&gt;&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a proof of <code>B == Bool&lt;true&gt;</code>, returns None if <code>B == Bool&lt;false&gt;</code></p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typewit::{const_marker::{Bool, BoolWitG}, TypeEq};\n \n<span class=\"macro\">assert_eq!</span>(BoolWitG::True(TypeEq::NEW).to_true(), <span class=\"prelude-val\">Some</span>(TypeEq::new::&lt;Bool&lt;<span class=\"bool-val\">true</span>&gt;&gt;()));\n<span class=\"macro\">assert_eq!</span>(BoolWitG::False(TypeEq::NEW).to_true(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_false\" class=\"method\"><a class=\"src rightside\" href=\"src/typewit/const_marker/boolwit.rs.html#264-269\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"typewit/const_marker/enum.BoolWitG.html#tymethod.to_false\" class=\"fn\">to_false</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"typewit/struct.TypeEq.html\" title=\"struct typewit::TypeEq\">TypeEq</a>&lt;B, <a class=\"struct\" href=\"typewit/const_marker/struct.Bool.html\" title=\"struct typewit::const_marker::Bool\">Bool</a>&lt;false&gt;&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a proof of <code>B == Bool&lt;false&gt;</code>, returns None if <code>B == Bool&lt;true&gt;</code></p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typewit::{const_marker::{Bool, BoolWitG}, TypeEq};\n \n<span class=\"macro\">assert_eq!</span>(BoolWitG::True(TypeEq::NEW).to_false(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(BoolWitG::False(TypeEq::NEW).to_false(), <span class=\"prelude-val\">Some</span>(TypeEq::new::&lt;Bool&lt;<span class=\"bool-val\">false</span>&gt;&gt;()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_true\" class=\"method\"><a class=\"src rightside\" href=\"src/typewit/const_marker/boolwit.rs.html#286-291\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"typewit/const_marker/enum.BoolWitG.html#tymethod.unwrap_true\" class=\"fn\">unwrap_true</a>(self) -&gt; <a class=\"struct\" href=\"typewit/struct.TypeEq.html\" title=\"struct typewit::TypeEq\">TypeEq</a>&lt;B, <a class=\"struct\" href=\"typewit/const_marker/struct.Bool.html\" title=\"struct typewit::const_marker::Bool\">Bool</a>&lt;true&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a proof of <code>B == Bool&lt;true&gt;</code>.</p>\n<h5 id=\"panic\"><a class=\"doc-anchor\" href=\"#panic\">§</a>Panic</h5>\n<p>Panics if <code>B == Bool&lt;false&gt;</code></p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typewit::{const_marker::{Bool, BoolWitG}, TypeEq};\n \n<span class=\"macro\">assert_eq!</span>(BoolWitG::True(TypeEq::NEW).unwrap_true(), TypeEq::new::&lt;Bool&lt;<span class=\"bool-val\">true</span>&gt;&gt;());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect_true\" class=\"method\"><a class=\"src rightside\" href=\"src/typewit/const_marker/boolwit.rs.html#307-312\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"typewit/const_marker/enum.BoolWitG.html#tymethod.expect_true\" class=\"fn\">expect_true</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"typewit/struct.TypeEq.html\" title=\"struct typewit::TypeEq\">TypeEq</a>&lt;B, <a class=\"struct\" href=\"typewit/const_marker/struct.Bool.html\" title=\"struct typewit::const_marker::Bool\">Bool</a>&lt;true&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a proof of <code>B == Bool&lt;true&gt;</code>.</p>\n<h5 id=\"panic-1\"><a class=\"doc-anchor\" href=\"#panic-1\">§</a>Panic</h5>\n<p>Panics if <code>B == Bool&lt;false&gt;</code>, with <code>msg</code> as the panic message.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typewit::{const_marker::{Bool, BoolWitG}, TypeEq};\n \n<span class=\"macro\">assert_eq!</span>(BoolWitG::True(TypeEq::NEW).expect_true(<span class=\"string\">\":(\"</span>), TypeEq::new::&lt;Bool&lt;<span class=\"bool-val\">true</span>&gt;&gt;());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_false\" class=\"method\"><a class=\"src rightside\" href=\"src/typewit/const_marker/boolwit.rs.html#328-333\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"typewit/const_marker/enum.BoolWitG.html#tymethod.unwrap_false\" class=\"fn\">unwrap_false</a>(self) -&gt; <a class=\"struct\" href=\"typewit/struct.TypeEq.html\" title=\"struct typewit::TypeEq\">TypeEq</a>&lt;B, <a class=\"struct\" href=\"typewit/const_marker/struct.Bool.html\" title=\"struct typewit::const_marker::Bool\">Bool</a>&lt;false&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a proof of <code>B == Bool&lt;false&gt;</code>.</p>\n<h5 id=\"panic-2\"><a class=\"doc-anchor\" href=\"#panic-2\">§</a>Panic</h5>\n<p>Panics if <code>B == Bool&lt;true&gt;</code></p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typewit::{const_marker::{Bool, BoolWitG}, TypeEq};\n \n<span class=\"macro\">assert_eq!</span>(BoolWitG::False(TypeEq::NEW).unwrap_false(), TypeEq::new::&lt;Bool&lt;<span class=\"bool-val\">false</span>&gt;&gt;());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect_false\" class=\"method\"><a class=\"src rightside\" href=\"src/typewit/const_marker/boolwit.rs.html#352-357\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"typewit/const_marker/enum.BoolWitG.html#tymethod.expect_false\" class=\"fn\">expect_false</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"typewit/struct.TypeEq.html\" title=\"struct typewit::TypeEq\">TypeEq</a>&lt;B, <a class=\"struct\" href=\"typewit/const_marker/struct.Bool.html\" title=\"struct typewit::const_marker::Bool\">Bool</a>&lt;false&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a proof of <code>B == Bool&lt;false&gt;</code>.</p>\n<h5 id=\"panic-3\"><a class=\"doc-anchor\" href=\"#panic-3\">§</a>Panic</h5>\n<p>Panics if <code>B == Bool&lt;true&gt;</code>, with <code>msg</code> as the panic message.</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typewit::{const_marker::{Bool, BoolWitG}, TypeEq};\n \n<span class=\"macro\">assert_eq!</span>(\n    BoolWitG::False(TypeEq::NEW).expect_false(<span class=\"string\">\"it is false\"</span>),\n    TypeEq::new::&lt;Bool&lt;<span class=\"bool-val\">false</span>&gt;&gt;(),\n);</code></pre></div>\n</div></details></div></details>",0,"typewit::const_marker::boolwit::BoolWit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-BoolWitG%3CB%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/typewit/const_marker/boolwit.rs.html#363-367\">Source</a><a href=\"#impl-Clone-for-BoolWitG%3CB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"typewit/const_marker/enum.BoolWitG.html\" title=\"enum typewit::const_marker::BoolWitG\">BoolWitG</a>&lt;B&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/typewit/const_marker/boolwit.rs.html#364-366\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","typewit::const_marker::boolwit::BoolWit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-BoolWitG%3CB%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/typewit/const_marker/boolwit.rs.html#369-376\">Source</a><a href=\"#impl-Debug-for-BoolWitG%3CB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"typewit/const_marker/enum.BoolWitG.html\" title=\"enum typewit::const_marker::BoolWitG\">BoolWitG</a>&lt;B&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/typewit/const_marker/boolwit.rs.html#370-375\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","typewit::const_marker::boolwit::BoolWit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MakeTypeWitness-for-BoolWitG%3CBool%3CB%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/typewit/const_marker/boolwit.rs.html#382-392\">Source</a><a href=\"#impl-MakeTypeWitness-for-BoolWitG%3CBool%3CB%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const B: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.bool.html\">bool</a>&gt; <a class=\"trait\" href=\"typewit/trait.MakeTypeWitness.html\" title=\"trait typewit::MakeTypeWitness\">MakeTypeWitness</a> for <a class=\"enum\" href=\"typewit/const_marker/enum.BoolWitG.html\" title=\"enum typewit::const_marker::BoolWitG\">BoolWitG</a>&lt;<a class=\"struct\" href=\"typewit/const_marker/struct.Bool.html\" title=\"struct typewit::const_marker::Bool\">Bool</a>&lt;B&gt;&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAKE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/typewit/const_marker/boolwit.rs.html#383-391\">Source</a><a href=\"#associatedconstant.MAKE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"typewit/trait.MakeTypeWitness.html#associatedconstant.MAKE\" class=\"constant\">MAKE</a>: Self</h4></section></summary><div class='docblock'>A constant with the type witness</div></details></div></details>","MakeTypeWitness","typewit::const_marker::boolwit::BoolWit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeWitnessTypeArg-for-BoolWitG%3CB%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/typewit/const_marker/boolwit.rs.html#378-380\">Source</a><a href=\"#impl-TypeWitnessTypeArg-for-BoolWitG%3CB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B&gt; <a class=\"trait\" href=\"typewit/trait.TypeWitnessTypeArg.html\" title=\"trait typewit::TypeWitnessTypeArg\">TypeWitnessTypeArg</a> for <a class=\"enum\" href=\"typewit/const_marker/enum.BoolWitG.html\" title=\"enum typewit::const_marker::BoolWitG\">BoolWitG</a>&lt;B&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Arg\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/typewit/const_marker/boolwit.rs.html#379\">Source</a><a href=\"#associatedtype.Arg\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"typewit/trait.TypeWitnessTypeArg.html#associatedtype.Arg\" class=\"associatedtype\">Arg</a> = B</h4></section></summary><div class='docblock'>The type parameter used for type witnesses. <a href=\"typewit/trait.TypeWitnessTypeArg.html#associatedtype.Arg\">Read more</a></div></details></div></details>","TypeWitnessTypeArg","typewit::const_marker::boolwit::BoolWit"],["<section id=\"impl-Copy-for-BoolWitG%3CB%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/typewit/const_marker/boolwit.rs.html#361\">Source</a><a href=\"#impl-Copy-for-BoolWitG%3CB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"typewit/const_marker/enum.BoolWitG.html\" title=\"enum typewit::const_marker::BoolWitG\">BoolWitG</a>&lt;B&gt;</h3></section>","Copy","typewit::const_marker::boolwit::BoolWit"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[18347]}