(function() {
    var type_impls = Object.fromEntries([["nix",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CPid%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/nix/unistd.rs.html#191-195\">Source</a><a href=\"#impl-From%3CPid%3E-for-i32\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"nix/unistd/struct.Pid.html\" title=\"struct nix::unistd::Pid\">Pid</a>&gt; for <a class=\"type\" href=\"libc/unix/type.pid_t.html\" title=\"type libc::unix::pid_t\">pid_t</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nix/unistd.rs.html#192-194\">Source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(pid: <a class=\"struct\" href=\"nix/unistd/struct.Pid.html\" title=\"struct nix::unistd::Pid\">Pid</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Pid>","nix::sys::signal::type_of_thread_id"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[1352]}