(function() {
    var type_impls = Object.fromEntries([["ncollide3d",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IsometryOps%3CN%3E-for-Isometry%3CN,+Unit%3CQuaternion%3CN%3E%3E,+3%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ncollide3d/utils/isometry_ops.rs.html#41-59\">Source</a><a href=\"#impl-IsometryOps%3CN%3E-for-Isometry%3CN,+Unit%3CQuaternion%3CN%3E%3E,+3%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;N: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>&gt; <a class=\"trait\" href=\"ncollide3d/utils/trait.IsometryOps.html\" title=\"trait ncollide3d::utils::IsometryOps\">IsometryOps</a>&lt;N&gt; for <a class=\"type\" href=\"nalgebra/geometry/isometry_alias/type.Isometry3.html\" title=\"type nalgebra::geometry::isometry_alias::Isometry3\">Isometry3</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.absolute_transform_vector\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ncollide3d/utils/isometry_ops.rs.html#43-45\">Source</a><a href=\"#method.absolute_transform_vector\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"ncollide3d/utils/trait.IsometryOps.html#tymethod.absolute_transform_vector\" class=\"fn\">absolute_transform_vector</a>(&amp;self, v: &amp;<a class=\"type\" href=\"ncollide3d/math/type.Vector.html\" title=\"type ncollide3d::math::Vector\">Vector</a>&lt;N&gt;) -&gt; <a class=\"type\" href=\"ncollide3d/math/type.Vector.html\" title=\"type ncollide3d::math::Vector\">Vector</a>&lt;N&gt;</h4></section></summary><div class='docblock'>Transform a vector by the absolute value of the homogeneous matrix\nequivalent to <code>self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inverse_transform_unit_vector\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ncollide3d/utils/isometry_ops.rs.html#48-51\">Source</a><a href=\"#method.inverse_transform_unit_vector\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"ncollide3d/utils/trait.IsometryOps.html#tymethod.inverse_transform_unit_vector\" class=\"fn\">inverse_transform_unit_vector</a>(&amp;self, v: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"type\" href=\"ncollide3d/math/type.Vector.html\" title=\"type ncollide3d::math::Vector\">Vector</a>&lt;N&gt;&gt;) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"type\" href=\"ncollide3d/math/type.Vector.html\" title=\"type ncollide3d::math::Vector\">Vector</a>&lt;N&gt;&gt;</h4></section></summary><div class='docblock'>Transform a unit vector by the inverse of <code>self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lerp_slerp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ncollide3d/utils/isometry_ops.rs.html#54-58\">Source</a><a href=\"#method.lerp_slerp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"ncollide3d/utils/trait.IsometryOps.html#tymethod.lerp_slerp\" class=\"fn\">lerp_slerp</a>(&amp;self, other: &amp;Self, t: N) -&gt; Self</h4></section></summary><div class='docblock'>Interpolates between two isometries, using LERP for the translation part and SLERP for the rotation part.</div></details></div></details>","IsometryOps<N>","ncollide3d::math::Isometry"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[3712]}