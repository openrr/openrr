(function() {
    var type_impls = Object.fromEntries([["abi_stable",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WithMetadata_%3CT,+P%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/prefix_type.rs.html#183-266\">Source</a><a href=\"#impl-WithMetadata_%3CT,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, P&gt; <a class=\"struct\" href=\"abi_stable/prefix_type/struct.WithMetadata_.html\" title=\"struct abi_stable::prefix_type::WithMetadata_\">WithMetadata_</a>&lt;T, P&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/prefix_type.rs.html#186-197\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"abi_stable/prefix_type/struct.WithMetadata_.html#tymethod.new\" class=\"fn\">new</a>(value: T) -&gt; Self<div class=\"where\">where\n    T: <a class=\"trait\" href=\"abi_stable/prefix_type/trait.PrefixTypeTrait.html\" title=\"trait abi_stable::prefix_type::PrefixTypeTrait\">PrefixTypeTrait</a>&lt;PrefixFields = P&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Constructs this with <code>WithMetadata::new(value)</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.field_accessibility\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/prefix_type.rs.html#201-203\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"abi_stable/prefix_type/struct.WithMetadata_.html#tymethod.field_accessibility\" class=\"fn\">field_accessibility</a>(&amp;self) -&gt; <a class=\"type\" href=\"abi_stable/prefix_type/type.FieldAccessibility.html\" title=\"type abi_stable::prefix_type::FieldAccessibility\">FieldAccessibility</a></h4></section></summary><div class=\"docblock\"><p>A bit array that describes the accessibility of each field in <code>T</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_layout\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/prefix_type.rs.html#207-209\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"abi_stable/prefix_type/struct.WithMetadata_.html#tymethod.type_layout\" class=\"fn\">type_layout</a>(&amp;self) -&gt; &amp;'static <a class=\"struct\" href=\"abi_stable/prefix_type/struct.PTStructLayout.html\" title=\"struct abi_stable::prefix_type::PTStructLayout\">PTStructLayout</a></h4></section></summary><div class=\"docblock\"><p>The basic layout of the prefix type, for error messages.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.raw_as_prefix\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/prefix_type.rs.html#217-219\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"abi_stable/prefix_type/struct.WithMetadata_.html#tymethod.raw_as_prefix\" class=\"fn\">raw_as_prefix</a>(this: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a>Self) -&gt; <a class=\"struct\" href=\"abi_stable/prefix_type/struct.PrefixRef.html\" title=\"struct abi_stable::prefix_type::PrefixRef\">PrefixRef</a>&lt;P&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a <code>PrefixRef</code> from <code>this</code>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>You must enture that this <code>WithMetadata</code> lives for the entire program’s lifetime.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_prefix\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/prefix_type.rs.html#233-235\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"abi_stable/prefix_type/struct.WithMetadata_.html#tymethod.as_prefix\" class=\"fn\">as_prefix</a>(&amp;self) -&gt; <a class=\"struct\" href=\"abi_stable/prefix_type/struct.PrefixRef.html\" title=\"struct abi_stable::prefix_type::PrefixRef\">PrefixRef</a>&lt;P&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a <code>PrefixRef</code> from <code>self</code>.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>You must ensure that <code>self</code> lives for the entire program’s lifetime.</p>\n<h5 id=\"alternative\"><a class=\"doc-anchor\" href=\"#alternative\">§</a>Alternative</h5>\n<p>For a safe equivalent of this, you can use <a href=\"../sabi_types/struct.StaticRef.html#method.as_prefix\"><code>StaticRef::as_prefix</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.static_as_prefix\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/prefix_type.rs.html#263-265\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"abi_stable/prefix_type/struct.WithMetadata_.html#tymethod.static_as_prefix\" class=\"fn\">static_as_prefix</a>(&amp;'static self) -&gt; <a class=\"struct\" href=\"abi_stable/prefix_type/struct.PrefixRef.html\" title=\"struct abi_stable::prefix_type::PrefixRef\">PrefixRef</a>&lt;P&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a <code>PrefixRef</code> from <code>self</code>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>abi_stable::{\n    for_examples::{Module, Module_Ref},\n    prefix_type::{PrefixRef, PrefixTypeTrait, WithMetadata},\n    std_types::{RSome, RStr},\n};\n\n<span class=\"kw\">const </span>WITH_META: <span class=\"kw-2\">&amp;</span>WithMetadata&lt;Module&gt; = <span class=\"kw-2\">&amp;</span>WithMetadata::new(\n    Module {\n        first: RSome(<span class=\"number\">13</span>),\n        second: RStr::from_str(<span class=\"string\">\"foo\"</span>),\n        third: <span class=\"number\">100</span>,\n    },\n);\n\n<span class=\"kw\">const </span>MOD: Module_Ref = Module_Ref(WITH_META.static_as_prefix());\n\n<span class=\"macro\">assert_eq!</span>(MOD.first(), RSome(<span class=\"number\">13</span>));\n<span class=\"macro\">assert_eq!</span>(MOD.second().as_str(), <span class=\"string\">\"foo\"</span>);\n</code></pre></div>\n</div></details></div></details>",0,"abi_stable::prefix_type::WithMetadata"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[6354]}