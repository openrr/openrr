(function() {
    var type_impls = Object.fromEntries([["abi_stable",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RBoxError_%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#474-478\">Source</a><a href=\"#impl-Debug-for-RBoxError_%3CM%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#475-477\">Source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","abi_stable::std_types::std_error::UnsyncRBoxError","abi_stable::std_types::std_error::SendRBoxError","abi_stable::std_types::std_error::RBoxError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-RBoxError_%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#468-472\">Source</a><a href=\"#impl-Display-for-RBoxError_%3CM%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#469-471\">Source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","abi_stable::std_types::std_error::UnsyncRBoxError","abi_stable::std_types::std_error::SendRBoxError","abi_stable::std_types::std_error::RBoxError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Error-for-RBoxError_%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#466\">Source</a><a href=\"#impl-Error-for-RBoxError_%3CM%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> for <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.source\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/error.rs.html#105\">Source</a></span><a href=\"#method.source\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html#method.source\" class=\"fn\">source</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;(dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + 'static)&gt;</h4></section></summary><div class='docblock'>Returns the lower-level source of this error, if any. <a href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html#method.source\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.description\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/error.rs.html#131\">Source</a></span><a href=\"#method.description\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html#method.description\" class=\"fn\">description</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated since 1.42.0: use the Display impl or to_string()</span></div></span><div class='docblock'> <a href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html#method.description\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cause\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/error.rs.html#141\">Source</a></span><a href=\"#method.cause\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html#method.cause\" class=\"fn\">cause</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated since 1.33.0: replaced by Error::source, which can support downcasting</span></div></span></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.provide\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/error.rs.html#204\">Source</a><a href=\"#method.provide\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html#method.provide\" class=\"fn\">provide</a>&lt;'a&gt;(&amp;'a self, request: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/error/struct.Request.html\" title=\"struct core::error::Request\">Request</a>&lt;'a&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>)</span></div></span><div class='docblock'>Provides type-based access to context intended for error reports. <a href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html#method.provide\">Read more</a></div></details></div></details>","Error","abi_stable::std_types::std_error::UnsyncRBoxError","abi_stable::std_types::std_error::SendRBoxError","abi_stable::std_types::std_error::RBoxError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBox%3Cdyn+Error%3E%3E-for-RBoxError_%3CUnsyncUnsend%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#677-681\">Source</a><a href=\"#impl-From%3CBox%3Cdyn+Error%3E%3E-for-RBoxError_%3CUnsyncUnsend%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a>&gt;&gt; for <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;<a class=\"struct\" href=\"abi_stable/marker_type/struct.UnsyncUnsend.html\" title=\"struct abi_stable::marker_type::UnsyncUnsend\">UnsyncUnsend</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#677-681\">Source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(this: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + 'static&gt;) -&gt; <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;<a class=\"struct\" href=\"abi_stable/marker_type/struct.UnsyncUnsend.html\" title=\"struct abi_stable::marker_type::UnsyncUnsend\">UnsyncUnsend</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;dyn Error&gt;</code> to a <code>!Send + !Sync</code> <code>RBoxError_</code>.</p>\n<h5 id=\"behavior\"><a class=\"doc-anchor\" href=\"#behavior\">Â§</a>Behavior</h5>\n<p>If the contents of the Box&lt;_&gt; is an erased <code>RBoxError_&lt;_&gt;</code>\nit will be returned directly,\notherwise the <code>Box&lt;_&gt;</code> will be converted into an <code>RBoxError_&lt;_&gt;</code>\nusing <code>RBoxError_::new</code>.</p>\n</div></details></div></details>","From<Box<dyn Error>>","abi_stable::std_types::std_error::UnsyncRBoxError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBox%3Cdyn+Error+%2B+Send%3E%3E-for-RBoxError_%3CUnsyncSend%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#672-676\">Source</a><a href=\"#impl-From%3CBox%3Cdyn+Error+%2B+Send%3E%3E-for-RBoxError_%3CUnsyncSend%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt; for <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;<a class=\"struct\" href=\"abi_stable/marker_type/struct.UnsyncSend.html\" title=\"struct abi_stable::marker_type::UnsyncSend\">UnsyncSend</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#672-676\">Source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(this: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static&gt;) -&gt; <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;<a class=\"struct\" href=\"abi_stable/marker_type/struct.UnsyncSend.html\" title=\"struct abi_stable::marker_type::UnsyncSend\">UnsyncSend</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;dyn Error + Send&gt;</code> to a <code>Send + !Sync</code> <code>RBoxError_</code>.</p>\n<h5 id=\"behavior\"><a class=\"doc-anchor\" href=\"#behavior\">Â§</a>Behavior</h5>\n<p>If the contents of the Box&lt;_&gt; is an erased <code>RBoxError_&lt;_&gt;</code>\nit will be returned directly,\notherwise the <code>Box&lt;_&gt;</code> will be converted into an <code>RBoxError_&lt;_&gt;</code>\nusing <code>RBoxError_::new</code>.</p>\n</div></details></div></details>","From<Box<dyn Error + Send>>","abi_stable::std_types::std_error::SendRBoxError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBox%3Cdyn+Error+%2B+Send+%2B+Sync%3E%3E-for-RBoxError_\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#667-671\">Source</a><a href=\"#impl-From%3CBox%3Cdyn+Error+%2B+Send+%2B+Sync%3E%3E-for-RBoxError_\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt; for <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;<a class=\"struct\" href=\"abi_stable/marker_type/struct.SyncSend.html\" title=\"struct abi_stable::marker_type::SyncSend\">SyncSend</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#667-671\">Source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(\n    this: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static&gt;,\n) -&gt; <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;<a class=\"struct\" href=\"abi_stable/marker_type/struct.SyncSend.html\" title=\"struct abi_stable::marker_type::SyncSend\">SyncSend</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;dyn Error + Send + Sync&gt;</code> to a <code>Send + Sync</code> <code>RBoxError_</code>.</p>\n<h5 id=\"behavior\"><a class=\"doc-anchor\" href=\"#behavior\">Â§</a>Behavior</h5>\n<p>If the contents of the Box&lt;_&gt; is an erased <code>RBoxError_&lt;_&gt;</code>\nit will be returned directly,\notherwise the <code>Box&lt;_&gt;</code> will be converted into an <code>RBoxError_&lt;_&gt;</code>\nusing <code>RBoxError_::new</code>.</p>\n</div></details></div></details>","From<Box<dyn Error + Sync + Send>>","abi_stable::std_types::std_error::RBoxError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GetStaticEquivalent_-for-RBoxError_%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#186\">Source</a><a href=\"#impl-GetStaticEquivalent_-for-RBoxError_%3CM%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html\" title=\"trait abi_stable::abi_stability::get_static_equivalent::GetStaticEquivalent_\">GetStaticEquivalent_</a> for <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"abi_stable/trait.StableAbi.html\" title=\"trait abi_stable::StableAbi\">__StableAbi</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.StaticEquivalent\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#186\">Source</a><a href=\"#associatedtype.StaticEquivalent\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html#associatedtype.StaticEquivalent\" class=\"associatedtype\">StaticEquivalent</a> = _static_RBoxError_&lt;&lt;M as <a class=\"trait\" href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html\" title=\"trait abi_stable::abi_stability::get_static_equivalent::GetStaticEquivalent_\">GetStaticEquivalent_</a>&gt;::<a class=\"associatedtype\" href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html#associatedtype.StaticEquivalent\" title=\"type abi_stable::abi_stability::get_static_equivalent::GetStaticEquivalent_::StaticEquivalent\">StaticEquivalent</a>&gt;</h4></section></summary><div class='docblock'>The <code>'static</code> equivalent of <code>Self</code></div></details></div></details>","GetStaticEquivalent_","abi_stable::std_types::std_error::UnsyncRBoxError","abi_stable::std_types::std_error::SendRBoxError","abi_stable::std_types::std_error::RBoxError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RBoxError_%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#262-341\">Source</a><a href=\"#impl-RBoxError_%3CM%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_fmt\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#281-290\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.from_fmt\" class=\"fn\">from_fmt</a>&lt;T&gt;(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;T</a>) -&gt; Self<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Constructs an RBoxError from an error,\nstoring the Debug and Display messages without storing the error value.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>abi_stable::std_types::RBoxError;\n\n<span class=\"kw\">let </span>int_error = <span class=\"string\">\"\"</span>.parse::&lt;u32&gt;().unwrap_err();\n\n<span class=\"kw\">let </span>display_fmt = int_error.to_string();\n<span class=\"kw\">let </span>debug_fmt = <span class=\"macro\">format!</span>(<span class=\"string\">\"{:#?}\"</span>, int_error);\n\n<span class=\"kw\">let </span>err = RBoxError::from_fmt(<span class=\"kw-2\">&amp;</span>int_error);\n\n<span class=\"macro\">assert_eq!</span>(display_fmt, err.to_string());\n<span class=\"macro\">assert_eq!</span>(debug_fmt, <span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, err));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_debug\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#308-317\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.from_debug\" class=\"fn\">from_debug</a>&lt;T&gt;(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;T</a>) -&gt; Self<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Constructs an RBoxError from a type that only implements Debug,\nstoring the Debug message without storing the error value.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>abi_stable::std_types::RBoxError;\n\n<span class=\"kw\">let </span>int_error = <span class=\"string\">\"\"</span>.parse::&lt;u32&gt;().unwrap_err();\n\n<span class=\"kw\">let </span>debug_fmt = <span class=\"macro\">format!</span>(<span class=\"string\">\"{:#?}\"</span>, int_error);\n<span class=\"kw\">let </span>err = RBoxError::from_debug(<span class=\"kw-2\">&amp;</span>int_error);\n\n<span class=\"macro\">assert_eq!</span>(debug_fmt, <span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, err));\n<span class=\"macro\">assert_eq!</span>(debug_fmt, <span class=\"macro\">format!</span>(<span class=\"string\">\"{:#?}\"</span>, err));</code></pre></div>\n</div></details></div></details>",0,"abi_stable::std_types::std_error::UnsyncRBoxError","abi_stable::std_types::std_error::SendRBoxError","abi_stable::std_types::std_error::RBoxError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RBoxError_%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#343-366\">Source</a><a href=\"#impl-RBoxError_%3CM%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_formatted_error\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#352-361\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.to_formatted_error\" class=\"fn\">to_formatted_error</a>&lt;N&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;N&gt;</h4></section></summary><div class=\"docblock\"><p>Converts this error to a formatted error</p>\n<p>This is used to decouple an <code>RBoxError</code> from the dynamic library that produced it,\nin order to unload the dynamic library.</p>\n</div></details></div></details>",0,"abi_stable::std_types::std_error::UnsyncRBoxError","abi_stable::std_types::std_error::SendRBoxError","abi_stable::std_types::std_error::RBoxError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RBoxError_%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#368-422\">Source</a><a href=\"#impl-RBoxError_%3CM%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_id\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#370-372\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"abi_stable/std_types/struct.UTypeId.html\" title=\"struct abi_stable::std_types::UTypeId\">UTypeId</a></h4></section></summary><div class=\"docblock\"><p>Returns the <code>UTypeId</code> of the error this wraps.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.heap_address\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#381-383\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.heap_address\" class=\"fn\">heap_address</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>The address of the <code>Box&lt;_&gt;</code> this wraps</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_unsync\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#400-402\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.as_unsync\" class=\"fn\">as_unsync</a>(&amp;self) -&gt; &amp;<a class=\"type\" href=\"abi_stable/std_types/type.UnsyncRBoxError.html\" title=\"type abi_stable::std_types::UnsyncRBoxError\">UnsyncRBoxError</a></h4></section></summary><div class=\"docblock\"><p>Casts this <code>&amp;RBoxError_&lt;_&gt;</code> to <code>&amp;UnsyncRBoxError</code>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>abi_stable::std_types::{RBoxError, UnsyncRBoxError};\n<span class=\"kw\">use </span>std::convert::TryFrom;\n\n<span class=\"kw\">let </span>int_err = u32::try_from(-<span class=\"number\">1_i32</span>).unwrap_err();\n\n<span class=\"kw\">let </span>err: RBoxError = RBoxError::new(int_err);\n\n<span class=\"kw\">let </span>unsync_err: <span class=\"kw-2\">&amp;</span>UnsyncRBoxError = err.as_unsync();\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_unsync\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#419-421\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.into_unsync\" class=\"fn\">into_unsync</a>(self) -&gt; <a class=\"type\" href=\"abi_stable/std_types/type.UnsyncRBoxError.html\" title=\"type abi_stable::std_types::UnsyncRBoxError\">UnsyncRBoxError</a></h4></section></summary><div class=\"docblock\"><p>Converts this <code>RBoxError_&lt;_&gt;</code> to <code>UnsyncRBoxError</code>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>abi_stable::std_types::{RBoxError, UnsyncRBoxError};\n<span class=\"kw\">use </span>std::convert::TryFrom;\n\n<span class=\"kw\">let </span>int_err = u64::try_from(-<span class=\"number\">1338_i32</span>).unwrap_err();\n\n<span class=\"kw\">let </span>err: RBoxError = RBoxError::new(int_err);\n\n<span class=\"kw\">let </span>unsync_err: UnsyncRBoxError = err.into_unsync();\n</code></pre></div>\n</div></details></div></details>",0,"abi_stable::std_types::std_error::UnsyncRBoxError","abi_stable::std_types::std_error::SendRBoxError","abi_stable::std_types::std_error::RBoxError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RBoxError_%3CUnsyncSend%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#222-240\">Source</a><a href=\"#impl-RBoxError_%3CUnsyncSend%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;<a class=\"struct\" href=\"abi_stable/marker_type/struct.UnsyncSend.html\" title=\"struct abi_stable::marker_type::UnsyncSend\">UnsyncSend</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#234-239\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.new\" class=\"fn\">new</a>&lt;T&gt;(value: T) -&gt; Self<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Constructs a <code>Send + !Sync</code> <code>RBoxError_</code> from an error.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>abi_stable::std_types::SendRBoxError;\n\n<span class=\"kw\">let </span>str_err = String::from_utf16(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xD834</span>]).unwrap_err() ;\n\n<span class=\"kw\">let </span>err = SendRBoxError::new(str_err);</code></pre></div>\n</div></details></div></details>",0,"abi_stable::std_types::std_error::SendRBoxError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RBoxError_%3CUnsyncSend%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#672-676\">Source</a><a href=\"#impl-RBoxError_%3CUnsyncSend%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;<a class=\"struct\" href=\"abi_stable/marker_type/struct.UnsyncSend.html\" title=\"struct abi_stable::marker_type::UnsyncSend\">UnsyncSend</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_box\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#672-676\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.from_box\" class=\"fn\">from_box</a>(this: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;dyn Error + Send&gt;</code> to a <code>Send + !Sync</code> <code>RBoxError_</code>.</p>\n<p><code>RBoxError::from_box( RBoxError::into_box( err ) )</code>\nis a no-op with respect to the heap address of the RBoxError_&lt;_&gt;.</p>\n<h5 id=\"behavior\"><a class=\"doc-anchor\" href=\"#behavior\">Â§</a>Behavior</h5>\n<p>If the contents of the <code>Box&lt;_&gt;</code> is an erased <code>RBoxError_&lt;_&gt;</code>\nit will be returned directly,\notherwise the <code>Box&lt;_&gt;</code> will be converted into an <code>RBoxError_&lt;_&gt;</code>\nusing <code>RBoxError_::new</code>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">Â§</a>Example</h5>\n<p>For an example of converting back and forth to a <code>Box&lt;dyn Error&gt;</code>\n<a href=\"#from_to_conversion\">here is the example</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_box\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#672-676\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.into_box\" class=\"fn\">into_box</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static&gt;</h4></section></summary><div class=\"docblock\"><p>Converts an <code>RBoxError_&lt;_&gt;</code> to a <code>Box&lt;dyn Error&gt;</code>.</p>\n<p><code>RBoxError::from_box( RBoxError::into_box( err ) )</code>\nis a no-op with respect to the heap address of the RBoxError_&lt;_&gt;.</p>\n<h5 id=\"behavior-1\"><a class=\"doc-anchor\" href=\"#behavior-1\">Â§</a>Behavior</h5>\n<p>If the contents of the <code>RBoxError_&lt;_&gt;</code> is an erased <code>Box&lt;dyn Error + ... &gt;</code>\nit will be returned directly,\notherwise the <code>RBoxError_&lt;_&gt;</code> will be converted into an <code>Box&lt;dyn Error + ... &gt;</code>\nusing <code>Box::new</code>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">Â§</a>Example</h5>\n<p>For an example of converting back and forth to a <code>Box&lt;dyn Error&gt;</code>\n<a href=\"#from_to_conversion\">here is the example</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#672-676\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.downcast\" class=\"fn\">downcast</a>&lt;T&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"abi_stable/std_types/struct.RBox.html\" title=\"struct abi_stable::std_types::RBox\">RBox</a>&lt;T&gt;, Self&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Converts this <code>RBoxError_&lt;_&gt;</code> to an <code>RBox&lt;T&gt;</code>.</p>\n<p>If was constructed from a <code>Box&lt;dyn Error + ... &gt;</code>,\nand this is being casted to another type,\nitâ€™ll first downcast to <code>Box&lt;dyn Error + ... &gt;</code>,\nthen itâ€™ll downcast the <code>Box&lt;dyn Error + ... &gt;</code> into <code>RBox&lt;T&gt;</code>.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">Â§</a>Errors</h5>\n<p>This returns <code>Err(self)</code> in any of these cases:</p>\n<ul>\n<li>\n<p>The <code>RBoxError_</code> wasnâ€™t constructed in the current dynamic library.</p>\n</li>\n<li>\n<p>The <code>RBoxError_</code> was constructed with a different type than <code>T</code>.</p>\n</li>\n</ul>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">Â§</a>Example</h5>\n<p>Look at the type level documentation for\n<a href=\"#downcasting-by-value\">the example</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#672-676\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.downcast_ref\" class=\"fn\">downcast_ref</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Converts this <code>&amp;RBoxError_&lt;_&gt;</code> to a <code>&amp;T</code>.</p>\n<p>If was constructed from a <code>Box&lt;dyn Error + ... &gt;</code>,\nand this is being casted to another type,\nitâ€™ll first downcast to <code>&amp;dyn Error + ... </code>,\nthen itâ€™ll downcast the <code>&amp;dyn Error + ... </code> into <code>&amp;T</code>.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">Â§</a>Errors</h5>\n<p>This returns <code>None</code> in any of these cases:</p>\n<ul>\n<li>\n<p>The <code>RBoxError_</code> wasnâ€™t constructed in the current dynamic library.</p>\n</li>\n<li>\n<p>The <code>RBoxError_</code> was constructed with a different type than <code>T</code>.</p>\n</li>\n</ul>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">Â§</a>Example</h5>\n<p>Look at the type level documentation for the example.\n<a href=\"#downcasting-by-reference\">the example</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#672-676\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.downcast_mut\" class=\"fn\">downcast_mut</a>&lt;T&gt;(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut T</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Converts this <code>&amp;mut RBoxError_&lt;_&gt;</code> to a <code>&amp;mut T</code>.</p>\n<p>If was constructed from a <code>Box&lt;dyn Error + ... &gt;</code>,\nand this is being casted to another type,\nitâ€™ll first downcast to <code>&amp;mut dyn Error + ... </code>,\nthen itâ€™ll downcast the <code>&amp;mut dyn Error + ... </code> into <code>&amp;mut T</code>.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">Â§</a>Errors</h5>\n<p>This returns <code>None</code> in any of these cases:</p>\n<ul>\n<li>\n<p>The <code>RBoxError_</code> wasnâ€™t constructed in the current dynamic library.</p>\n</li>\n<li>\n<p>The <code>RBoxError_</code> was constructed with a different type than <code>T</code>.</p>\n</li>\n</ul>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">Â§</a>Example</h5>\n<p>Look at the type level documentation for the example.\n<a href=\"#downcasting-by-mutable-reference\">the example</a>.</p>\n</div></details></div></details>",0,"abi_stable::std_types::std_error::SendRBoxError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RBoxError_%3CUnsyncUnsend%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#242-260\">Source</a><a href=\"#impl-RBoxError_%3CUnsyncUnsend%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;<a class=\"struct\" href=\"abi_stable/marker_type/struct.UnsyncUnsend.html\" title=\"struct abi_stable::marker_type::UnsyncUnsend\">UnsyncUnsend</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#254-259\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.new\" class=\"fn\">new</a>&lt;T&gt;(value: T) -&gt; Self<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Constructs a <code>!Send + !Sync</code> <code>RBoxError_</code> from an error.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>abi_stable::std_types::UnsyncRBoxError;\n\n<span class=\"kw\">let </span>str_err = std::str::from_utf8(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">255</span>]).unwrap_err() ;\n\n<span class=\"kw\">let </span>err = UnsyncRBoxError::new(str_err);</code></pre></div>\n</div></details></div></details>",0,"abi_stable::std_types::std_error::UnsyncRBoxError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RBoxError_%3CUnsyncUnsend%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#677-681\">Source</a><a href=\"#impl-RBoxError_%3CUnsyncUnsend%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;<a class=\"struct\" href=\"abi_stable/marker_type/struct.UnsyncUnsend.html\" title=\"struct abi_stable::marker_type::UnsyncUnsend\">UnsyncUnsend</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_box\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#677-681\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.from_box\" class=\"fn\">from_box</a>(this: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + 'static&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;dyn Error&gt;</code> to a <code>!Send + !Sync</code> <code>RBoxError_</code>.</p>\n<p><code>RBoxError::from_box( RBoxError::into_box( err ) )</code>\nis a no-op with respect to the heap address of the RBoxError_&lt;_&gt;.</p>\n<h5 id=\"behavior\"><a class=\"doc-anchor\" href=\"#behavior\">Â§</a>Behavior</h5>\n<p>If the contents of the <code>Box&lt;_&gt;</code> is an erased <code>RBoxError_&lt;_&gt;</code>\nit will be returned directly,\notherwise the <code>Box&lt;_&gt;</code> will be converted into an <code>RBoxError_&lt;_&gt;</code>\nusing <code>RBoxError_::new</code>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">Â§</a>Example</h5>\n<p>For an example of converting back and forth to a <code>Box&lt;dyn Error&gt;</code>\n<a href=\"#from_to_conversion\">here is the example</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_box\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#677-681\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.into_box\" class=\"fn\">into_box</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + 'static&gt;</h4></section></summary><div class=\"docblock\"><p>Converts an <code>RBoxError_&lt;_&gt;</code> to a <code>Box&lt;dyn Error&gt;</code>.</p>\n<p><code>RBoxError::from_box( RBoxError::into_box( err ) )</code>\nis a no-op with respect to the heap address of the RBoxError_&lt;_&gt;.</p>\n<h5 id=\"behavior-1\"><a class=\"doc-anchor\" href=\"#behavior-1\">Â§</a>Behavior</h5>\n<p>If the contents of the <code>RBoxError_&lt;_&gt;</code> is an erased <code>Box&lt;dyn Error + ... &gt;</code>\nit will be returned directly,\notherwise the <code>RBoxError_&lt;_&gt;</code> will be converted into an <code>Box&lt;dyn Error + ... &gt;</code>\nusing <code>Box::new</code>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">Â§</a>Example</h5>\n<p>For an example of converting back and forth to a <code>Box&lt;dyn Error&gt;</code>\n<a href=\"#from_to_conversion\">here is the example</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#677-681\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.downcast\" class=\"fn\">downcast</a>&lt;T&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"abi_stable/std_types/struct.RBox.html\" title=\"struct abi_stable::std_types::RBox\">RBox</a>&lt;T&gt;, Self&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Converts this <code>RBoxError_&lt;_&gt;</code> to an <code>RBox&lt;T&gt;</code>.</p>\n<p>If was constructed from a <code>Box&lt;dyn Error + ... &gt;</code>,\nand this is being casted to another type,\nitâ€™ll first downcast to <code>Box&lt;dyn Error + ... &gt;</code>,\nthen itâ€™ll downcast the <code>Box&lt;dyn Error + ... &gt;</code> into <code>RBox&lt;T&gt;</code>.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">Â§</a>Errors</h5>\n<p>This returns <code>Err(self)</code> in any of these cases:</p>\n<ul>\n<li>\n<p>The <code>RBoxError_</code> wasnâ€™t constructed in the current dynamic library.</p>\n</li>\n<li>\n<p>The <code>RBoxError_</code> was constructed with a different type than <code>T</code>.</p>\n</li>\n</ul>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">Â§</a>Example</h5>\n<p>Look at the type level documentation for\n<a href=\"#downcasting-by-value\">the example</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#677-681\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.downcast_ref\" class=\"fn\">downcast_ref</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Converts this <code>&amp;RBoxError_&lt;_&gt;</code> to a <code>&amp;T</code>.</p>\n<p>If was constructed from a <code>Box&lt;dyn Error + ... &gt;</code>,\nand this is being casted to another type,\nitâ€™ll first downcast to <code>&amp;dyn Error + ... </code>,\nthen itâ€™ll downcast the <code>&amp;dyn Error + ... </code> into <code>&amp;T</code>.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">Â§</a>Errors</h5>\n<p>This returns <code>None</code> in any of these cases:</p>\n<ul>\n<li>\n<p>The <code>RBoxError_</code> wasnâ€™t constructed in the current dynamic library.</p>\n</li>\n<li>\n<p>The <code>RBoxError_</code> was constructed with a different type than <code>T</code>.</p>\n</li>\n</ul>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">Â§</a>Example</h5>\n<p>Look at the type level documentation for the example.\n<a href=\"#downcasting-by-reference\">the example</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#677-681\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.downcast_mut\" class=\"fn\">downcast_mut</a>&lt;T&gt;(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut T</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Converts this <code>&amp;mut RBoxError_&lt;_&gt;</code> to a <code>&amp;mut T</code>.</p>\n<p>If was constructed from a <code>Box&lt;dyn Error + ... &gt;</code>,\nand this is being casted to another type,\nitâ€™ll first downcast to <code>&amp;mut dyn Error + ... </code>,\nthen itâ€™ll downcast the <code>&amp;mut dyn Error + ... </code> into <code>&amp;mut T</code>.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">Â§</a>Errors</h5>\n<p>This returns <code>None</code> in any of these cases:</p>\n<ul>\n<li>\n<p>The <code>RBoxError_</code> wasnâ€™t constructed in the current dynamic library.</p>\n</li>\n<li>\n<p>The <code>RBoxError_</code> was constructed with a different type than <code>T</code>.</p>\n</li>\n</ul>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">Â§</a>Example</h5>\n<p>Look at the type level documentation for the example.\n<a href=\"#downcasting-by-mutable-reference\">the example</a>.</p>\n</div></details></div></details>",0,"abi_stable::std_types::std_error::UnsyncRBoxError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RBoxError_\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#202-220\">Source</a><a href=\"#impl-RBoxError_\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;<a class=\"struct\" href=\"abi_stable/marker_type/struct.SyncSend.html\" title=\"struct abi_stable::marker_type::SyncSend\">SyncSend</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#214-219\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.new\" class=\"fn\">new</a>&lt;T&gt;(value: T) -&gt; Self<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Constructs a <code>Send + Sync</code> <code>RBoxError_</code> from an error.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>abi_stable::std_types::RBoxError;\n\n<span class=\"kw\">let </span>str_err = String::from_utf8(<span class=\"macro\">vec!</span>[<span class=\"number\">255</span>]).unwrap_err();\n\n<span class=\"kw\">let </span>err = RBoxError::new(str_err);</code></pre></div>\n</div></details></div></details>",0,"abi_stable::std_types::std_error::RBoxError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RBoxError_\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#424-464\">Source</a><a href=\"#impl-RBoxError_\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;<a class=\"struct\" href=\"abi_stable/marker_type/struct.SyncSend.html\" title=\"struct abi_stable::marker_type::SyncSend\">SyncSend</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_send\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#441-443\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.as_send\" class=\"fn\">as_send</a>(&amp;self) -&gt; &amp;<a class=\"type\" href=\"abi_stable/std_types/type.SendRBoxError.html\" title=\"type abi_stable::std_types::SendRBoxError\">SendRBoxError</a></h4></section></summary><div class=\"docblock\"><p>Casts this <code>&amp;RBoxError_&lt;_&gt;</code> to <code>&amp;SendRBoxError</code>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>abi_stable::std_types::{RBoxError, SendRBoxError};\n<span class=\"kw\">use </span>std::convert::TryFrom;\n\n<span class=\"kw\">let </span>slice: <span class=\"kw-2\">&amp;mut </span>[u32] = <span class=\"kw-2\">&amp;mut </span>[];\n<span class=\"kw\">let </span>arr_err=&lt;<span class=\"kw-2\">&amp;mut </span>[u32;<span class=\"number\">10</span>]&gt;::try_from(slice).unwrap_err();\n\n<span class=\"kw\">let </span>err: RBoxError = RBoxError::new(arr_err);\n\n<span class=\"kw\">let </span>unsync_err: <span class=\"kw-2\">&amp;</span>SendRBoxError = err.as_send();\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_send\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#461-463\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.into_send\" class=\"fn\">into_send</a>(self) -&gt; <a class=\"type\" href=\"abi_stable/std_types/type.SendRBoxError.html\" title=\"type abi_stable::std_types::SendRBoxError\">SendRBoxError</a></h4></section></summary><div class=\"docblock\"><p>Converts this <code>RBoxError_&lt;_&gt;</code> to <code>SendRBoxError</code>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>abi_stable::std_types::{RBoxError, SendRBoxError};\n<span class=\"kw\">use </span>std::convert::TryFrom;\n\n<span class=\"kw\">let </span>slice: <span class=\"kw-2\">&amp;</span>[u32] = <span class=\"kw-2\">&amp;</span>[];\n<span class=\"kw\">let </span>arr_err=&lt;<span class=\"kw-2\">&amp;</span>[u32;<span class=\"number\">10</span>]&gt;::try_from(slice).unwrap_err();\n\n<span class=\"kw\">let </span>err: RBoxError = RBoxError::new(arr_err);\n\n<span class=\"kw\">let </span>unsync_err: SendRBoxError = err.into_send();\n</code></pre></div>\n</div></details></div></details>",0,"abi_stable::std_types::std_error::RBoxError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RBoxError_\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#667-671\">Source</a><a href=\"#impl-RBoxError_\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;<a class=\"struct\" href=\"abi_stable/marker_type/struct.SyncSend.html\" title=\"struct abi_stable::marker_type::SyncSend\">SyncSend</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_box\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#667-671\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.from_box\" class=\"fn\">from_box</a>(this: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;dyn Error + Send + Sync&gt;</code> to a <code>Send + Sync</code> <code>RBoxError_</code>.</p>\n<p><code>RBoxError::from_box( RBoxError::into_box( err ) )</code>\nis a no-op with respect to the heap address of the RBoxError_&lt;_&gt;.</p>\n<h5 id=\"behavior\"><a class=\"doc-anchor\" href=\"#behavior\">Â§</a>Behavior</h5>\n<p>If the contents of the <code>Box&lt;_&gt;</code> is an erased <code>RBoxError_&lt;_&gt;</code>\nit will be returned directly,\notherwise the <code>Box&lt;_&gt;</code> will be converted into an <code>RBoxError_&lt;_&gt;</code>\nusing <code>RBoxError_::new</code>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">Â§</a>Example</h5>\n<p>For an example of converting back and forth to a <code>Box&lt;dyn Error&gt;</code>\n<a href=\"#from_to_conversion\">here is the example</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_box\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#667-671\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.into_box\" class=\"fn\">into_box</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static&gt;</h4></section></summary><div class=\"docblock\"><p>Converts an <code>RBoxError_&lt;_&gt;</code> to a <code>Box&lt;dyn Error&gt;</code>.</p>\n<p><code>RBoxError::from_box( RBoxError::into_box( err ) )</code>\nis a no-op with respect to the heap address of the RBoxError_&lt;_&gt;.</p>\n<h5 id=\"behavior-1\"><a class=\"doc-anchor\" href=\"#behavior-1\">Â§</a>Behavior</h5>\n<p>If the contents of the <code>RBoxError_&lt;_&gt;</code> is an erased <code>Box&lt;dyn Error + ... &gt;</code>\nit will be returned directly,\notherwise the <code>RBoxError_&lt;_&gt;</code> will be converted into an <code>Box&lt;dyn Error + ... &gt;</code>\nusing <code>Box::new</code>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">Â§</a>Example</h5>\n<p>For an example of converting back and forth to a <code>Box&lt;dyn Error&gt;</code>\n<a href=\"#from_to_conversion\">here is the example</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#667-671\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.downcast\" class=\"fn\">downcast</a>&lt;T&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"abi_stable/std_types/struct.RBox.html\" title=\"struct abi_stable::std_types::RBox\">RBox</a>&lt;T&gt;, Self&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Converts this <code>RBoxError_&lt;_&gt;</code> to an <code>RBox&lt;T&gt;</code>.</p>\n<p>If was constructed from a <code>Box&lt;dyn Error + ... &gt;</code>,\nand this is being casted to another type,\nitâ€™ll first downcast to <code>Box&lt;dyn Error + ... &gt;</code>,\nthen itâ€™ll downcast the <code>Box&lt;dyn Error + ... &gt;</code> into <code>RBox&lt;T&gt;</code>.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">Â§</a>Errors</h5>\n<p>This returns <code>Err(self)</code> in any of these cases:</p>\n<ul>\n<li>\n<p>The <code>RBoxError_</code> wasnâ€™t constructed in the current dynamic library.</p>\n</li>\n<li>\n<p>The <code>RBoxError_</code> was constructed with a different type than <code>T</code>.</p>\n</li>\n</ul>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">Â§</a>Example</h5>\n<p>Look at the type level documentation for\n<a href=\"#downcasting-by-value\">the example</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#667-671\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.downcast_ref\" class=\"fn\">downcast_ref</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Converts this <code>&amp;RBoxError_&lt;_&gt;</code> to a <code>&amp;T</code>.</p>\n<p>If was constructed from a <code>Box&lt;dyn Error + ... &gt;</code>,\nand this is being casted to another type,\nitâ€™ll first downcast to <code>&amp;dyn Error + ... </code>,\nthen itâ€™ll downcast the <code>&amp;dyn Error + ... </code> into <code>&amp;T</code>.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">Â§</a>Errors</h5>\n<p>This returns <code>None</code> in any of these cases:</p>\n<ul>\n<li>\n<p>The <code>RBoxError_</code> wasnâ€™t constructed in the current dynamic library.</p>\n</li>\n<li>\n<p>The <code>RBoxError_</code> was constructed with a different type than <code>T</code>.</p>\n</li>\n</ul>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">Â§</a>Example</h5>\n<p>Look at the type level documentation for the example.\n<a href=\"#downcasting-by-reference\">the example</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#667-671\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/std_types/struct.RBoxError_.html#tymethod.downcast_mut\" class=\"fn\">downcast_mut</a>&lt;T&gt;(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut T</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">ErrorTrait</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Converts this <code>&amp;mut RBoxError_&lt;_&gt;</code> to a <code>&amp;mut T</code>.</p>\n<p>If was constructed from a <code>Box&lt;dyn Error + ... &gt;</code>,\nand this is being casted to another type,\nitâ€™ll first downcast to <code>&amp;mut dyn Error + ... </code>,\nthen itâ€™ll downcast the <code>&amp;mut dyn Error + ... </code> into <code>&amp;mut T</code>.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">Â§</a>Errors</h5>\n<p>This returns <code>None</code> in any of these cases:</p>\n<ul>\n<li>\n<p>The <code>RBoxError_</code> wasnâ€™t constructed in the current dynamic library.</p>\n</li>\n<li>\n<p>The <code>RBoxError_</code> was constructed with a different type than <code>T</code>.</p>\n</li>\n</ul>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">Â§</a>Example</h5>\n<p>Look at the type level documentation for the example.\n<a href=\"#downcasting-by-mutable-reference\">the example</a>.</p>\n</div></details></div></details>",0,"abi_stable::std_types::std_error::RBoxError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StableAbi-for-RBoxError_%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#186\">Source</a><a href=\"#impl-StableAbi-for-RBoxError_%3CM%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"abi_stable/trait.StableAbi.html\" title=\"trait abi_stable::StableAbi\">StableAbi</a> for <a class=\"struct\" href=\"abi_stable/std_types/struct.RBoxError_.html\" title=\"struct abi_stable::std_types::RBoxError_\">RBoxError_</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"abi_stable/trait.StableAbi.html\" title=\"trait abi_stable::StableAbi\">__StableAbi</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.LAYOUT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#186\">Source</a><a href=\"#associatedconstant.LAYOUT\" class=\"anchor\">Â§</a><h4 class=\"code-header\">const <a href=\"abi_stable/trait.StableAbi.html#associatedconstant.LAYOUT\" class=\"constant\">LAYOUT</a>: &amp;'static <a class=\"struct\" href=\"abi_stable/type_layout/struct.TypeLayout.html\" title=\"struct abi_stable::type_layout::TypeLayout\">TypeLayout</a></h4></section></summary><div class='docblock'>The layout of the type provided by implementors.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IsNonZeroType\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/std_types/std_error.rs.html#186\">Source</a><a href=\"#associatedtype.IsNonZeroType\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"abi_stable/trait.StableAbi.html#associatedtype.IsNonZeroType\" class=\"associatedtype\">IsNonZeroType</a> = <a class=\"struct\" href=\"abi_stable/reexports/struct.False.html\" title=\"struct abi_stable::reexports::False\">False</a></h4></section></summary><div class='docblock'>Whether this type has a single invalid bit-pattern. <a href=\"abi_stable/trait.StableAbi.html#associatedtype.IsNonZeroType\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.ABI_CONSTS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/abi_stability/stable_abi_trait.rs.html#76-79\">Source</a><a href=\"#associatedconstant.ABI_CONSTS\" class=\"anchor\">Â§</a><h4 class=\"code-header\">const <a href=\"abi_stable/trait.StableAbi.html#associatedconstant.ABI_CONSTS\" class=\"constant\">ABI_CONSTS</a>: <a class=\"struct\" href=\"abi_stable/abi_stability/stable_abi_trait/struct.AbiConsts.html\" title=\"struct abi_stable::abi_stability::stable_abi_trait::AbiConsts\">AbiConsts</a> = _</h4></section></summary><div class='docblock'><code>const</code>-equivalents of the associated types.</div></details></div></details>","StableAbi","abi_stable::std_types::std_error::UnsyncRBoxError","abi_stable::std_types::std_error::SendRBoxError","abi_stable::std_types::std_error::RBoxError"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[71540]}