(function() {
    var type_impls = Object.fromEntries([["abi_stable",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitArray64%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#114-161\">Source</a><a href=\"#impl-BitArray64%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"struct\" href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html\" title=\"struct abi_stable::sabi_types::bitarray::BitArray64\">BitArray64</a>&lt;E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.at\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#121-128\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html#tymethod.at\" class=\"fn\">at</a>(self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; E<div class=\"where\">where\n    E: <a class=\"trait\" href=\"abi_stable/sabi_types/bitarray/trait.BooleanEnum.html\" title=\"trait abi_stable::sabi_types::bitarray::BooleanEnum\">BooleanEnum</a>,</div></h4></section></summary><div class=\"docblock\"><p>Gets the value of <code>E</code> at <code>index</code></p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function panics if <code>index &gt;= 64</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#136-146\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html#tymethod.set\" class=\"fn\">set</a>(self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>, value: E) -&gt; Self<div class=\"where\">where\n    E: <a class=\"trait\" href=\"abi_stable/sabi_types/bitarray/trait.BooleanEnum.html\" title=\"trait abi_stable::sabi_types::bitarray::BooleanEnum\">BooleanEnum</a>,</div></h4></section></summary><div class=\"docblock\"><p>Sets the value at <code>index</code> to <code>value</code></p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>This function panics if <code>index &gt;= 64</code></p>\n</div></details></div></details>",0,"abi_stable::prefix_type::accessible_fields::FieldAccessibility","abi_stable::prefix_type::accessible_fields::FieldConditionality"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitArray64%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#163-196\">Source</a><a href=\"#impl-BitArray64%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"struct\" href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html\" title=\"struct abi_stable::sabi_types::bitarray::BitArray64\">BitArray64</a>&lt;E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncated\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#165-168\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html#tymethod.truncated\" class=\"fn\">truncated</a>(self, length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Truncates self so that only the first <code>length</code> elements are truthy.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bits\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#172-174\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html#tymethod.bits\" class=\"fn\">bits</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Converts this array to its underlying representation</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#178-184\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html#tymethod.iter\" class=\"fn\">iter</a>(self) -&gt; <a class=\"struct\" href=\"abi_stable/sabi_types/bitarray/struct.BitArray64Iter.html\" title=\"struct abi_stable::sabi_types::bitarray::BitArray64Iter\">BitArray64Iter</a>&lt;E&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitArray64Iter&lt;E&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>An iterator over the first <code>count</code> elements of the array.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#187-195\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html#tymethod.eq\" class=\"fn\">eq</a>(self, other: Self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Whether this array is equal to <code>other</code> up to the <code>count</code> element.</p>\n</div></details></div></details>",0,"abi_stable::prefix_type::accessible_fields::FieldAccessibility","abi_stable::prefix_type::accessible_fields::FieldConditionality"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitArray64%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#82-112\">Source</a><a href=\"#impl-BitArray64%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"struct\" href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html\" title=\"struct abi_stable::sabi_types::bitarray::BitArray64\">BitArray64</a>&lt;E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_count\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#85-93\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html#tymethod.with_count\" class=\"fn\">with_count</a>(count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; Self<div class=\"where\">where\n    E: <a class=\"trait\" href=\"abi_stable/sabi_types/bitarray/trait.BooleanEnum.html\" title=\"trait abi_stable::sabi_types::bitarray::BooleanEnum\">BooleanEnum</a>,</div></h4></section></summary><div class=\"docblock\"><p>Creates a BitArray64 where the first <code>count</code> elements are truthy.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u64\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#97-102\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html#tymethod.from_u64\" class=\"fn\">from_u64</a>(bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u64.html\">u64</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a BitArray64 from a u64.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.empty\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#106-111\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html#tymethod.empty\" class=\"fn\">empty</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a BitArray64 where all elements are falsy.</p>\n</div></details></div></details>",0,"abi_stable::prefix_type::accessible_fields::FieldAccessibility","abi_stable::prefix_type::accessible_fields::FieldConditionality"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-BitArray64%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#73-80\">Source</a><a href=\"#impl-Clone-for-BitArray64%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html\" title=\"struct abi_stable::sabi_types::bitarray::BitArray64\">BitArray64</a>&lt;E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#74-79\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","abi_stable::prefix_type::accessible_fields::FieldAccessibility","abi_stable::prefix_type::accessible_fields::FieldConditionality"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-BitArray64%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#198-205\">Source</a><a href=\"#impl-Debug-for-BitArray64%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html\" title=\"struct abi_stable::sabi_types::bitarray::BitArray64\">BitArray64</a>&lt;E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"abi_stable/sabi_types/bitarray/trait.BooleanEnum.html\" title=\"trait abi_stable::sabi_types::bitarray::BooleanEnum\">BooleanEnum</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#202-204\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","abi_stable::prefix_type::accessible_fields::FieldAccessibility","abi_stable::prefix_type::accessible_fields::FieldConditionality"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GetStaticEquivalent_-for-BitArray64%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#65\">Source</a><a href=\"#impl-GetStaticEquivalent_-for-BitArray64%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"trait\" href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html\" title=\"trait abi_stable::abi_stability::get_static_equivalent::GetStaticEquivalent_\">GetStaticEquivalent_</a> for <a class=\"struct\" href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html\" title=\"struct abi_stable::sabi_types::bitarray::BitArray64\">BitArray64</a>&lt;E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"abi_stable/trait.StableAbi.html\" title=\"trait abi_stable::StableAbi\">__StableAbi</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.StaticEquivalent\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#65\">Source</a><a href=\"#associatedtype.StaticEquivalent\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html#associatedtype.StaticEquivalent\" class=\"associatedtype\">StaticEquivalent</a> = _static_BitArray64&lt;&lt;E as <a class=\"trait\" href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html\" title=\"trait abi_stable::abi_stability::get_static_equivalent::GetStaticEquivalent_\">GetStaticEquivalent_</a>&gt;::<a class=\"associatedtype\" href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html#associatedtype.StaticEquivalent\" title=\"type abi_stable::abi_stability::get_static_equivalent::GetStaticEquivalent_::StaticEquivalent\">StaticEquivalent</a>&gt;</h4></section></summary><div class='docblock'>The <code>'static</code> equivalent of <code>Self</code></div></details></div></details>","GetStaticEquivalent_","abi_stable::prefix_type::accessible_fields::FieldAccessibility","abi_stable::prefix_type::accessible_fields::FieldConditionality"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-BitArray64%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#65\">Source</a><a href=\"#impl-PartialEq-for-BitArray64%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html\" title=\"struct abi_stable::sabi_types::bitarray::BitArray64\">BitArray64</a>&lt;E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#65\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html\" title=\"struct abi_stable::sabi_types::bitarray::BitArray64\">BitArray64</a>&lt;E&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","abi_stable::prefix_type::accessible_fields::FieldAccessibility","abi_stable::prefix_type::accessible_fields::FieldConditionality"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StableAbi-for-BitArray64%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#65\">Source</a><a href=\"#impl-StableAbi-for-BitArray64%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"trait\" href=\"abi_stable/trait.StableAbi.html\" title=\"trait abi_stable::StableAbi\">StableAbi</a> for <a class=\"struct\" href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html\" title=\"struct abi_stable::sabi_types::bitarray::BitArray64\">BitArray64</a>&lt;E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"abi_stable/trait.StableAbi.html\" title=\"trait abi_stable::StableAbi\">__StableAbi</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.LAYOUT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#65\">Source</a><a href=\"#associatedconstant.LAYOUT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"abi_stable/trait.StableAbi.html#associatedconstant.LAYOUT\" class=\"constant\">LAYOUT</a>: &amp;'static <a class=\"struct\" href=\"abi_stable/type_layout/struct.TypeLayout.html\" title=\"struct abi_stable::type_layout::TypeLayout\">TypeLayout</a></h4></section></summary><div class='docblock'>The layout of the type provided by implementors.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IsNonZeroType\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#65\">Source</a><a href=\"#associatedtype.IsNonZeroType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"abi_stable/trait.StableAbi.html#associatedtype.IsNonZeroType\" class=\"associatedtype\">IsNonZeroType</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u64.html\">u64</a> as <a class=\"trait\" href=\"abi_stable/trait.StableAbi.html\" title=\"trait abi_stable::StableAbi\">StableAbi</a>&gt;::<a class=\"associatedtype\" href=\"abi_stable/trait.StableAbi.html#associatedtype.IsNonZeroType\" title=\"type abi_stable::StableAbi::IsNonZeroType\">IsNonZeroType</a></h4></section></summary><div class='docblock'>Whether this type has a single invalid bit-pattern. <a href=\"abi_stable/trait.StableAbi.html#associatedtype.IsNonZeroType\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.ABI_CONSTS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/abi_stability/stable_abi_trait.rs.html#76-79\">Source</a><a href=\"#associatedconstant.ABI_CONSTS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"abi_stable/trait.StableAbi.html#associatedconstant.ABI_CONSTS\" class=\"constant\">ABI_CONSTS</a>: <a class=\"struct\" href=\"abi_stable/abi_stability/stable_abi_trait/struct.AbiConsts.html\" title=\"struct abi_stable::abi_stability::stable_abi_trait::AbiConsts\">AbiConsts</a> = _</h4></section></summary><div class='docblock'><code>const</code>-equivalents of the associated types.</div></details></div></details>","StableAbi","abi_stable::prefix_type::accessible_fields::FieldAccessibility","abi_stable::prefix_type::accessible_fields::FieldConditionality"],["<section id=\"impl-Copy-for-BitArray64%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#72\">Source</a><a href=\"#impl-Copy-for-BitArray64%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html\" title=\"struct abi_stable::sabi_types::bitarray::BitArray64\">BitArray64</a>&lt;E&gt;</h3></section>","Copy","abi_stable::prefix_type::accessible_fields::FieldAccessibility","abi_stable::prefix_type::accessible_fields::FieldConditionality"],["<section id=\"impl-Eq-for-BitArray64%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#65\">Source</a><a href=\"#impl-Eq-for-BitArray64%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html\" title=\"struct abi_stable::sabi_types::bitarray::BitArray64\">BitArray64</a>&lt;E&gt;</h3></section>","Eq","abi_stable::prefix_type::accessible_fields::FieldAccessibility","abi_stable::prefix_type::accessible_fields::FieldConditionality"],["<section id=\"impl-StructuralPartialEq-for-BitArray64%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/sabi_types/bitarray.rs.html#65\">Source</a><a href=\"#impl-StructuralPartialEq-for-BitArray64%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"abi_stable/sabi_types/bitarray/struct.BitArray64.html\" title=\"struct abi_stable::sabi_types::bitarray::BitArray64\">BitArray64</a>&lt;E&gt;</h3></section>","StructuralPartialEq","abi_stable::prefix_type::accessible_fields::FieldAccessibility","abi_stable::prefix_type::accessible_fields::FieldConditionality"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[23470]}