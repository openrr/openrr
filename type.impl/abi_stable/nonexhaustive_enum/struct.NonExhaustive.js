(function() {
    var type_impls = Object.fromEntries([["abi_stable",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-NonExhaustive%3CE,+S,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#504-511\">Source</a><a href=\"#impl-Clone-for-NonExhaustive%3CE,+S,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"abi_stable/trait.InterfaceType.html\" title=\"trait abi_stable::InterfaceType\">InterfaceType</a>&lt;Clone = <a class=\"struct\" href=\"abi_stable/type_level/impl_enum/struct.Implemented.html\" title=\"struct abi_stable::type_level::impl_enum::Implemented\">Implemented</a>&lt;<a class=\"struct\" href=\"abi_stable/type_level/trait_marker/struct.Clone.html\" title=\"struct abi_stable::type_level::trait_marker::Clone\">Clone</a>&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#508-510\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-NonExhaustive%3CE,+S,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#528-541\">Source</a><a href=\"#impl-Debug-for-NonExhaustive%3CE,+S,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"abi_stable/trait.InterfaceType.html\" title=\"trait abi_stable::InterfaceType\">InterfaceType</a>&lt;Debug = <a class=\"struct\" href=\"abi_stable/type_level/impl_enum/struct.Implemented.html\" title=\"struct abi_stable::type_level::impl_enum::Implemented\">Implemented</a>&lt;<a class=\"struct\" href=\"abi_stable/type_level/trait_marker/struct.Debug.html\" title=\"struct abi_stable::type_level::trait_marker::Debug\">Debug</a>&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#532-540\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-NonExhaustive%3CE,+S,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#660-677\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-NonExhaustive%3CE,+S,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, E, S, I&gt; <a class=\"trait\" href=\"serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I&gt;<div class=\"where\">where\n    E: 'de + <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.GetVTable.html\" title=\"trait abi_stable::nonexhaustive_enum::GetVTable\">GetVTable</a>&lt;S, I&gt;,\n    S: 'de,\n    I: 'de + <a class=\"trait\" href=\"abi_stable/trait.InterfaceType.html\" title=\"trait abi_stable::InterfaceType\">InterfaceType</a>&lt;Deserialize = <a class=\"struct\" href=\"abi_stable/type_level/impl_enum/struct.Implemented.html\" title=\"struct abi_stable::type_level::impl_enum::Implemented\">Implemented</a>&lt;<a class=\"struct\" href=\"abi_stable/type_level/trait_marker/struct.Deserialize.html\" title=\"struct abi_stable::type_level::trait_marker::Deserialize\">Deserialize</a>&gt;&gt; + <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.DeserializeEnum.html\" title=\"trait abi_stable::nonexhaustive_enum::DeserializeEnum\">DeserializeEnum</a>&lt;'de, Self&gt;,\n    &lt;I as <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.DeserializeEnum.html\" title=\"trait abi_stable::nonexhaustive_enum::DeserializeEnum\">DeserializeEnum</a>&lt;'de, Self&gt;&gt;::<a class=\"associatedtype\" href=\"abi_stable/nonexhaustive_enum/trait.DeserializeEnum.html#associatedtype.Proxy\" title=\"type abi_stable::nonexhaustive_enum::DeserializeEnum::Proxy\">Proxy</a>: <a class=\"trait\" href=\"serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3><div class=\"docblock\"><p>First it Deserializes a string,then it deserializes into a\n<code>NonExhaustive&lt;_&gt;</code>,by using <code>&lt;I as DeserializeEnum&gt;::deserialize_enum</code>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#668-676\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde_core/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(deserializer: D) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, D::<a class=\"associatedtype\" href=\"serde_core/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde_core::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde_core/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-NonExhaustive%3CE,+S,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#513-526\">Source</a><a href=\"#impl-Display-for-NonExhaustive%3CE,+S,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"abi_stable/trait.InterfaceType.html\" title=\"trait abi_stable::InterfaceType\">InterfaceType</a>&lt;Display = <a class=\"struct\" href=\"abi_stable/type_level/impl_enum/struct.Implemented.html\" title=\"struct abi_stable::type_level::impl_enum::Implemented\">Implemented</a>&lt;<a class=\"struct\" href=\"abi_stable/type_level/trait_marker/struct.Display.html\" title=\"struct abi_stable::type_level::trait_marker::Display\">Display</a>&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#517-525\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-NonExhaustive%3CE,+S,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#704-712\">Source</a><a href=\"#impl-Drop-for-NonExhaustive%3CE,+S,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#705-711\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Error-for-NonExhaustive%3CE,+S,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#693-700\">Source</a><a href=\"#impl-Error-for-NonExhaustive%3CE,+S,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> for <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"abi_stable/trait.InterfaceType.html\" title=\"trait abi_stable::InterfaceType\">InterfaceType</a>&lt;Debug = <a class=\"struct\" href=\"abi_stable/type_level/impl_enum/struct.Implemented.html\" title=\"struct abi_stable::type_level::impl_enum::Implemented\">Implemented</a>&lt;<a class=\"struct\" href=\"abi_stable/type_level/trait_marker/struct.Debug.html\" title=\"struct abi_stable::type_level::trait_marker::Debug\">Debug</a>&gt;, Display = <a class=\"struct\" href=\"abi_stable/type_level/impl_enum/struct.Implemented.html\" title=\"struct abi_stable::type_level::impl_enum::Implemented\">Implemented</a>&lt;<a class=\"struct\" href=\"abi_stable/type_level/trait_marker/struct.Display.html\" title=\"struct abi_stable::type_level::trait_marker::Display\">Display</a>&gt;, Error = <a class=\"struct\" href=\"abi_stable/type_level/impl_enum/struct.Implemented.html\" title=\"struct abi_stable::type_level::impl_enum::Implemented\">Implemented</a>&lt;<a class=\"struct\" href=\"abi_stable/type_level/trait_marker/struct.Error.html\" title=\"struct abi_stable::type_level::trait_marker::Error\">Error</a>&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.source\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/error.rs.html#105\">Source</a></span><a href=\"#method.source\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html#method.source\" class=\"fn\">source</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;(dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + 'static)&gt;</h4></section></summary><div class='docblock'>Returns the lower-level source of this error, if any. <a href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html#method.source\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.description\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/error.rs.html#131\">Source</a></span><a href=\"#method.description\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html#method.description\" class=\"fn\">description</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.42.0: use the Display impl or to_string()</span></div></span><div class='docblock'> <a href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html#method.description\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cause\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/error.rs.html#141\">Source</a></span><a href=\"#method.cause\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html#method.cause\" class=\"fn\">cause</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.33.0: replaced by Error::source, which can support downcasting</span></div></span></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.provide\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/error.rs.html#204\">Source</a><a href=\"#method.provide\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html#method.provide\" class=\"fn\">provide</a>&lt;'a&gt;(&amp;'a self, request: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/error/struct.Request.html\" title=\"struct core::error::Request\">Request</a>&lt;'a&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>)</span></div></span><div class='docblock'>Provides type-based access to context intended for error reports. <a href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html#method.provide\">Read more</a></div></details></div></details>","Error","abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GetStaticEquivalent_-for-NonExhaustive%3CE,+S,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#187\">Source</a><a href=\"#impl-GetStaticEquivalent_-for-NonExhaustive%3CE,+S,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I&gt; <a class=\"trait\" href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html\" title=\"trait abi_stable::abi_stability::get_static_equivalent::GetStaticEquivalent_\">GetStaticEquivalent_</a> for <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html\" title=\"trait abi_stable::abi_stability::get_static_equivalent::GetStaticEquivalent_\">__GetStaticEquivalent_</a> + <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.NonExhaustiveMarker.html\" title=\"trait abi_stable::nonexhaustive_enum::NonExhaustiveMarker\">NonExhaustiveMarker</a>&lt;S&gt;,\n    S: <a class=\"trait\" href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html\" title=\"trait abi_stable::abi_stability::get_static_equivalent::GetStaticEquivalent_\">__GetStaticEquivalent_</a>,\n    I: <a class=\"trait\" href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html\" title=\"trait abi_stable::abi_stability::get_static_equivalent::GetStaticEquivalent_\">__GetStaticEquivalent_</a> + <a class=\"trait\" href=\"abi_stable/trait.InterfaceType.html\" title=\"trait abi_stable::InterfaceType\">InterfaceType</a>,\n    NonExhaustiveVtable_Ref&lt;E, S, I&gt;: <a class=\"trait\" href=\"abi_stable/trait.StableAbi.html\" title=\"trait abi_stable::StableAbi\">StableAbi</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.StaticEquivalent\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#187\">Source</a><a href=\"#associatedtype.StaticEquivalent\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html#associatedtype.StaticEquivalent\" class=\"associatedtype\">StaticEquivalent</a> = _static_NonExhaustive&lt;&lt;E as <a class=\"trait\" href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html\" title=\"trait abi_stable::abi_stability::get_static_equivalent::GetStaticEquivalent_\">GetStaticEquivalent_</a>&gt;::<a class=\"associatedtype\" href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html#associatedtype.StaticEquivalent\" title=\"type abi_stable::abi_stability::get_static_equivalent::GetStaticEquivalent_::StaticEquivalent\">StaticEquivalent</a>, &lt;S as <a class=\"trait\" href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html\" title=\"trait abi_stable::abi_stability::get_static_equivalent::GetStaticEquivalent_\">GetStaticEquivalent_</a>&gt;::<a class=\"associatedtype\" href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html#associatedtype.StaticEquivalent\" title=\"type abi_stable::abi_stability::get_static_equivalent::GetStaticEquivalent_::StaticEquivalent\">StaticEquivalent</a>, &lt;I as <a class=\"trait\" href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html\" title=\"trait abi_stable::abi_stability::get_static_equivalent::GetStaticEquivalent_\">GetStaticEquivalent_</a>&gt;::<a class=\"associatedtype\" href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html#associatedtype.StaticEquivalent\" title=\"type abi_stable::abi_stability::get_static_equivalent::GetStaticEquivalent_::StaticEquivalent\">StaticEquivalent</a>&gt;</h4></section></summary><div class='docblock'>The <code>'static</code> equivalent of <code>Self</code></div></details></div></details>","GetStaticEquivalent_","abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-NonExhaustive%3CE,+S,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#681-691\">Source</a><a href=\"#impl-Hash-for-NonExhaustive%3CE,+S,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"abi_stable/trait.InterfaceType.html\" title=\"trait abi_stable::InterfaceType\">InterfaceType</a>&lt;Hash = <a class=\"struct\" href=\"abi_stable/type_level/impl_enum/struct.Implemented.html\" title=\"struct abi_stable::type_level::impl_enum::Implemented\">Implemented</a>&lt;<a class=\"struct\" href=\"abi_stable/type_level/trait_marker/struct.Hash.html\" title=\"struct abi_stable::type_level::trait_marker::Hash\">Hash</a>&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#685-690\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonExhaustive%3CE,+S,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#218-286\">Source</a><a href=\"#impl-NonExhaustive%3CE,+S,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I&gt; <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#225-230\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html#tymethod.new\" class=\"fn\">new</a>(value: E) -&gt; Self<div class=\"where\">where\n    E: <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.GetVTable.html\" title=\"trait abi_stable::nonexhaustive_enum::GetVTable\">GetVTable</a>&lt;S, I&gt; + <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.GetEnumInfo.html\" title=\"trait abi_stable::nonexhaustive_enum::GetEnumInfo\">GetEnumInfo</a>&lt;DefaultStorage = S, DefaultInterface = I&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Constructs a <code>NonExhaustive&lt;&gt;</code> from <code>value</code> using its default interface and storage.</p>\n<h5 id=\"panic\"><a class=\"doc-anchor\" href=\"#panic\">§</a>Panic</h5>\n<p>This panics if the storage has an alignment or size smaller than that of <code>E</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_interface\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#239-244\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html#tymethod.with_interface\" class=\"fn\">with_interface</a>(value: E) -&gt; Self<div class=\"where\">where\n    E: <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.GetVTable.html\" title=\"trait abi_stable::nonexhaustive_enum::GetVTable\">GetVTable</a>&lt;S, I&gt; + <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.GetEnumInfo.html\" title=\"trait abi_stable::nonexhaustive_enum::GetEnumInfo\">GetEnumInfo</a>&lt;DefaultStorage = S&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Constructs a <code>NonExhaustive&lt;&gt;</code> from <code>value</code> using its default storage\nand a custom interface.</p>\n<h5 id=\"panic-1\"><a class=\"doc-anchor\" href=\"#panic-1\">§</a>Panic</h5>\n<p>This panics if the storage has an alignment or size smaller than that of <code>E</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_storage\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#253-258\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html#tymethod.with_storage\" class=\"fn\">with_storage</a>(value: E) -&gt; Self<div class=\"where\">where\n    E: <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.GetVTable.html\" title=\"trait abi_stable::nonexhaustive_enum::GetVTable\">GetVTable</a>&lt;S, I&gt; + <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.GetEnumInfo.html\" title=\"trait abi_stable::nonexhaustive_enum::GetEnumInfo\">GetEnumInfo</a>&lt;DefaultInterface = I&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Constructs a <code>NonExhaustive&lt;&gt;</code> from <code>value</code> using its default interface\nand a custom storage.</p>\n<h5 id=\"panic-2\"><a class=\"doc-anchor\" href=\"#panic-2\">§</a>Panic</h5>\n<p>This panics if the storage has an alignment or size smaller than that of <code>E</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_storage_and_interface\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#266-271\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html#tymethod.with_storage_and_interface\" class=\"fn\">with_storage_and_interface</a>(value: E) -&gt; Self<div class=\"where\">where\n    E: <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.GetVTable.html\" title=\"trait abi_stable::nonexhaustive_enum::GetVTable\">GetVTable</a>&lt;S, I&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Constructs a <code>NonExhaustive&lt;&gt;</code> from <code>value</code> using both a custom interface and storage.</p>\n<h5 id=\"panic-3\"><a class=\"doc-anchor\" href=\"#panic-3\">§</a>Panic</h5>\n<p>This panics if the storage has an alignment or size smaller than that of <code>E</code>.</p>\n</div></details></div></details>",0,"abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonExhaustive%3CE,+S,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#288-414\">Source</a><a href=\"#impl-NonExhaustive%3CE,+S,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I&gt; <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.GetEnumInfo.html\" title=\"trait abi_stable::nonexhaustive_enum::GetEnumInfo\">GetEnumInfo</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_enum\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#317-324\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html#tymethod.as_enum\" class=\"fn\">as_enum</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;E</a>, <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.UnwrapEnumError.html\" title=\"struct abi_stable::nonexhaustive_enum::UnwrapEnumError\">UnwrapEnumError</a>&lt;&amp;Self&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>wraps a reference to this <code>NonExhaustive&lt;&gt;</code> into a reference to the original enum.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>This returns an error if the wrapped enum is of a variant that is\nnot valid in this context.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<p>This shows how some <code>NonExhaustive&lt;enum&gt;</code> can be unwrapped, and others cannot.<br>\nThat enum comes from a newer version of the library than this knows.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>abi_stable::nonexhaustive_enum::doc_enums::example_2::{\n    new_a, new_b, new_c, Foo,\n};\n\n<span class=\"macro\">assert_eq!</span>(new_a().as_enum().ok(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>Foo::A));\n<span class=\"macro\">assert_eq!</span>(new_b(<span class=\"number\">10</span>).as_enum().ok(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>Foo::B(<span class=\"number\">10</span>)));\n<span class=\"macro\">assert_eq!</span>(new_b(<span class=\"number\">77</span>).as_enum().ok(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>Foo::B(<span class=\"number\">77</span>)));\n<span class=\"macro\">assert_eq!</span>(new_c().as_enum().ok(), <span class=\"prelude-val\">None</span>);\n\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_enum_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#350-365\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html#tymethod.as_enum_mut\" class=\"fn\">as_enum_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut E</a>, <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.UnwrapEnumError.html\" title=\"struct abi_stable::nonexhaustive_enum::UnwrapEnumError\">UnwrapEnumError</a>&lt;&amp;mut Self&gt;&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.GetVTable.html\" title=\"trait abi_stable::nonexhaustive_enum::GetVTable\">GetVTable</a>&lt;S, I&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Unwraps a mutable reference to this <code>NonExhaustive&lt;&gt;</code> into a\nmutable reference to the original enum.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>This returns an error if the wrapped enum is of a variant that is\nnot valid in this context.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<p>This shows how some <code>NonExhaustive&lt;enum&gt;</code> can be unwrapped, and others cannot.<br>\nThat enum comes from a newer version of the library than this knows.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>abi_stable::nonexhaustive_enum::doc_enums::example_1::{\n    new_a, new_b, new_c, Foo,\n};\n\n<span class=\"macro\">assert_eq!</span>(new_a().as_enum_mut().ok(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span>Foo::A));\n<span class=\"macro\">assert_eq!</span>(new_b(<span class=\"number\">10</span>).as_enum_mut().ok(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(new_b(<span class=\"number\">77</span>).as_enum_mut().ok(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(new_c().as_enum_mut().ok(), <span class=\"prelude-val\">None</span>);\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_enum\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#390-398\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html#tymethod.into_enum\" class=\"fn\">into_enum</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;E, <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.UnwrapEnumError.html\" title=\"struct abi_stable::nonexhaustive_enum::UnwrapEnumError\">UnwrapEnumError</a>&lt;Self&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Unwraps this <code>NonExhaustive&lt;&gt;</code> into the original enum.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>This returns an error if the wrapped enum is of a variant that is\nnot valid in this context.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<p>This shows how some <code>NonExhaustive&lt;enum&gt;</code> can be unwrapped, and others cannot.<br>\nThat enum comes from a newer version of the library than this knows.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>abi_stable::nonexhaustive_enum::doc_enums::example_2::{\n    new_a, new_b, new_c, Foo,\n};\n\n<span class=\"macro\">assert_eq!</span>(new_a().into_enum().ok(), <span class=\"prelude-val\">Some</span>(Foo::A));\n<span class=\"macro\">assert_eq!</span>(new_b(<span class=\"number\">10</span>).into_enum().ok(), <span class=\"prelude-val\">Some</span>(Foo::B(<span class=\"number\">10</span>)));\n<span class=\"macro\">assert_eq!</span>(new_b(<span class=\"number\">77</span>).into_enum().ok(), <span class=\"prelude-val\">Some</span>(Foo::B(<span class=\"number\">77</span>)));\n<span class=\"macro\">assert_eq!</span>(new_c().into_enum().ok(), <span class=\"prelude-val\">None</span>);\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_valid_discriminant\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#405-407\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html#tymethod.is_valid_discriminant\" class=\"fn\">is_valid_discriminant</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the discriminant of this enum is valid in this context.</p>\n<p>The only way for it to be invalid is if the dynamic library is a\nnewer version than this knows.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_discriminant\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#411-413\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html#tymethod.get_discriminant\" class=\"fn\">get_discriminant</a>(&amp;self) -&gt; E::<a class=\"associatedtype\" href=\"abi_stable/nonexhaustive_enum/trait.GetEnumInfo.html#associatedtype.Discriminant\" title=\"type abi_stable::nonexhaustive_enum::GetEnumInfo::Discriminant\">Discriminant</a></h4></section></summary><div class=\"docblock\"><p>Gets the value of the discriminant of the enum.</p>\n</div></details></div></details>",0,"abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonExhaustive%3CE,+S,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#416-502\">Source</a><a href=\"#impl-NonExhaustive%3CE,+S,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I&gt; <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.transmute_enum\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#429-432\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html#tymethod.transmute_enum\" class=\"fn\">transmute_enum</a>&lt;F&gt;(self) -&gt; <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;F, S, I&gt;</h4></section></summary><div class=\"docblock\"><p>Transmute this <code>NonExhaustive&lt;E,S,I&gt;</code> into <code>NonExhaustive&lt;F,S,I&gt;</code>,\nchanging the type of the enum it wraps.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This has the same safety requirements that <code>std::mem::transmute</code> has.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This panics if the storage has an alignment or size smaller than that of <code>F</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transmute_enum_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#444-447\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html#tymethod.transmute_enum_ref\" class=\"fn\">transmute_enum_ref</a>&lt;F&gt;(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;F, S, I&gt;</h4></section></summary><div class=\"docblock\"><p>Transmute this <code>&amp;NonExhaustive&lt;E,S,I&gt;</code> into <code>&amp;NonExhaustive&lt;F,S,I&gt;</code>,\nchanging the type of the enum it wraps.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This has the same safety requirements that <code>std::mem::transmute</code> has.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>This panics if the storage has an alignment or size smaller than that of <code>F</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transmute_enum_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#459-462\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html#tymethod.transmute_enum_mut\" class=\"fn\">transmute_enum_mut</a>&lt;F&gt;(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;F, S, I&gt;</h4></section></summary><div class=\"docblock\"><p>Transmute this <code>&amp;mut NonExhaustive&lt;E,S,I&gt;</code> into <code>&amp;mut NonExhaustive&lt;F,S,I&gt;</code>,\nchanging the type of the enum it wraps.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>This has the same safety requirements that <code>std::mem::transmute</code> has.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>This panics if the storage has an alignment or size smaller than that of <code>F</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transmute_enum_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#477-484\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html#tymethod.transmute_enum_ptr\" class=\"fn\">transmute_enum_ptr</a>&lt;P, F&gt;(this: P) -&gt; P::<a class=\"associatedtype\" href=\"abi_stable/pointer_trait/trait.CanTransmuteElement.html#associatedtype.TransmutedPtr\" title=\"type abi_stable::pointer_trait::CanTransmuteElement::TransmutedPtr\">TransmutedPtr</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&lt;Target = Self&gt; + <a class=\"trait\" href=\"abi_stable/pointer_trait/trait.CanTransmuteElement.html\" title=\"trait abi_stable::pointer_trait::CanTransmuteElement\">CanTransmuteElement</a>&lt;<a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;F, S, I&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Transmute this pointer to a <code>NonExhaustive&lt;E,S,I&gt;</code> into\na pointer (of the same kind) to a <code>NonExhaustive&lt;F,S,I&gt;</code>,\nchanging the type of the enum it wraps.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>This has the same safety requirements that\n<code>abi_stable::pointer_traits::TransmuteElement::transmute_element</code> has.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>This panics if the storage has an alignment or size smaller than that of <code>F</code>.</p>\n</div></details></div></details>",0,"abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonExhaustive%3CE,+S,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#614-636\">Source</a><a href=\"#impl-NonExhaustive%3CE,+S,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I&gt; <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.GetEnumInfo.html\" title=\"trait abi_stable::nonexhaustive_enum::GetEnumInfo\">GetEnumInfo</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_into_proxy\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#619-625\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html#tymethod.serialize_into_proxy\" class=\"fn\">serialize_into_proxy</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;I::<a class=\"associatedtype\" href=\"abi_stable/nonexhaustive_enum/trait.SerializeEnum.html#associatedtype.Proxy\" title=\"type abi_stable::nonexhaustive_enum::SerializeEnum::Proxy\">Proxy</a>, <a class=\"type\" href=\"abi_stable/std_types/type.RBoxError.html\" title=\"type abi_stable::std_types::RBoxError\">RBoxError</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"abi_stable/trait.InterfaceType.html\" title=\"trait abi_stable::InterfaceType\">InterfaceType</a>&lt;Serialize = <a class=\"struct\" href=\"abi_stable/type_level/impl_enum/struct.Implemented.html\" title=\"struct abi_stable::type_level::impl_enum::Implemented\">Implemented</a>&lt;<a class=\"struct\" href=\"abi_stable/type_level/trait_marker/struct.Serialize.html\" title=\"struct abi_stable::type_level::trait_marker::Serialize\">Serialize</a>&gt;&gt; + <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.SerializeEnum.html\" title=\"trait abi_stable::nonexhaustive_enum::SerializeEnum\">SerializeEnum</a>&lt;E&gt;,</div></h4></section></summary><div class=\"docblock\"><p>It serializes a <code>NonExhaustive&lt;_&gt;</code> into a proxy.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_from_proxy\" class=\"method\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#628-635\">Source</a><h4 class=\"code-header\">pub fn <a href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html#tymethod.deserialize_from_proxy\" class=\"fn\">deserialize_from_proxy</a>&lt;'borr&gt;(proxy: I::<a class=\"associatedtype\" href=\"abi_stable/nonexhaustive_enum/trait.DeserializeEnum.html#associatedtype.Proxy\" title=\"type abi_stable::nonexhaustive_enum::DeserializeEnum::Proxy\">Proxy</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"type\" href=\"abi_stable/std_types/type.RBoxError.html\" title=\"type abi_stable::std_types::RBoxError\">RBoxError</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"abi_stable/trait.InterfaceType.html\" title=\"trait abi_stable::InterfaceType\">InterfaceType</a>&lt;Deserialize = <a class=\"struct\" href=\"abi_stable/type_level/impl_enum/struct.Implemented.html\" title=\"struct abi_stable::type_level::impl_enum::Implemented\">Implemented</a>&lt;<a class=\"struct\" href=\"abi_stable/type_level/trait_marker/struct.Deserialize.html\" title=\"struct abi_stable::type_level::trait_marker::Deserialize\">Deserialize</a>&gt;&gt; + <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.DeserializeEnum.html\" title=\"trait abi_stable::nonexhaustive_enum::DeserializeEnum\">DeserializeEnum</a>&lt;'borr, Self&gt;,\n    I::<a class=\"associatedtype\" href=\"abi_stable/nonexhaustive_enum/trait.DeserializeEnum.html#associatedtype.Proxy\" title=\"type abi_stable::nonexhaustive_enum::DeserializeEnum::Proxy\">Proxy</a>: 'borr,</div></h4></section></summary><div class=\"docblock\"><p>Deserializes a <code>NonExhaustive&lt;_&gt;</code> from a proxy.</p>\n</div></details></div></details>",0,"abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonExhaustiveSharedOps-for-NonExhaustive%3CE,+S,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#763-768\">Source</a><a href=\"#impl-NonExhaustiveSharedOps-for-NonExhaustive%3CE,+S,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I&gt; <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.NonExhaustiveSharedOps.html\" title=\"trait abi_stable::nonexhaustive_enum::NonExhaustiveSharedOps\">NonExhaustiveSharedOps</a> for <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.GetEnumInfo.html\" title=\"trait abi_stable::nonexhaustive_enum::GetEnumInfo\">GetEnumInfo</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Discriminant\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#767\">Source</a><a href=\"#associatedtype.Discriminant\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"abi_stable/nonexhaustive_enum/trait.NonExhaustiveSharedOps.html#associatedtype.Discriminant\" class=\"associatedtype\">Discriminant</a> = &lt;E as <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.GetEnumInfo.html\" title=\"trait abi_stable::nonexhaustive_enum::GetEnumInfo\">GetEnumInfo</a>&gt;::<a class=\"associatedtype\" href=\"abi_stable/nonexhaustive_enum/trait.GetEnumInfo.html#associatedtype.Discriminant\" title=\"type abi_stable::nonexhaustive_enum::GetEnumInfo::Discriminant\">Discriminant</a></h4></section></summary><div class='docblock'>The type of the discriminant of the wrapped enum.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_discriminant_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#767\">Source</a><a href=\"#method.get_discriminant_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"abi_stable/nonexhaustive_enum/trait.NonExhaustiveSharedOps.html#tymethod.get_discriminant_\" class=\"fn\">get_discriminant_</a>(&amp;self) -&gt; E::<a class=\"associatedtype\" href=\"abi_stable/nonexhaustive_enum/trait.GetEnumInfo.html#associatedtype.Discriminant\" title=\"type abi_stable::nonexhaustive_enum::GetEnumInfo::Discriminant\">Discriminant</a></h4></section></summary><div class='docblock'>Gets the discriminant of the wrapped enum.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enum_info_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#767\">Source</a><a href=\"#method.enum_info_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"abi_stable/nonexhaustive_enum/trait.NonExhaustiveSharedOps.html#tymethod.enum_info_\" class=\"fn\">enum_info_</a>(&amp;self) -&gt; &amp;'static <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.EnumInfo.html\" title=\"struct abi_stable::nonexhaustive_enum::EnumInfo\">EnumInfo</a></h4></section></summary><div class='docblock'>Gets miscelaneous information about the wrapped enum</div></details></div></details>","NonExhaustiveSharedOps","abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-NonExhaustive%3CE,+S,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#559-567\">Source</a><a href=\"#impl-Ord-for-NonExhaustive%3CE,+S,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"abi_stable/trait.InterfaceType.html\" title=\"trait abi_stable::InterfaceType\">InterfaceType</a>&lt;Ord = <a class=\"struct\" href=\"abi_stable/type_level/impl_enum/struct.Implemented.html\" title=\"struct abi_stable::type_level::impl_enum::Implemented\">Implemented</a>&lt;<a class=\"struct\" href=\"abi_stable/type_level/trait_marker/struct.Ord.html\" title=\"struct abi_stable::type_level::trait_marker::Ord\">Ord</a>&gt;&gt;,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#564-566\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1013-1015\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1052-1054\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1078-1080\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CE%3E-for-NonExhaustive%3CE,+S,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#599-610\">Source</a><a href=\"#impl-PartialEq%3CE%3E-for-NonExhaustive%3CE,+S,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;E&gt; for <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.GetEnumInfo.html\" title=\"trait abi_stable::nonexhaustive_enum::GetEnumInfo\">GetEnumInfo</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,\n    I: <a class=\"trait\" href=\"abi_stable/trait.InterfaceType.html\" title=\"trait abi_stable::InterfaceType\">InterfaceType</a>&lt;PartialEq = <a class=\"struct\" href=\"abi_stable/type_level/impl_enum/struct.Implemented.html\" title=\"struct abi_stable::type_level::impl_enum::Implemented\">Implemented</a>&lt;<a class=\"struct\" href=\"abi_stable/type_level/trait_marker/struct.PartialEq.html\" title=\"struct abi_stable::type_level::trait_marker::PartialEq\">PartialEq</a>&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#604-609\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;E</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<E>","abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CNonExhaustive%3CE,+S,+I2%3E%3E-for-NonExhaustive%3CE,+S,+I1%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#550-557\">Source</a><a href=\"#impl-PartialEq%3CNonExhaustive%3CE,+S,+I2%3E%3E-for-NonExhaustive%3CE,+S,+I1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I1, I2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I2&gt;&gt; for <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I1&gt;<div class=\"where\">where\n    I1: <a class=\"trait\" href=\"abi_stable/trait.InterfaceType.html\" title=\"trait abi_stable::InterfaceType\">InterfaceType</a>&lt;PartialEq = <a class=\"struct\" href=\"abi_stable/type_level/impl_enum/struct.Implemented.html\" title=\"struct abi_stable::type_level::impl_enum::Implemented\">Implemented</a>&lt;<a class=\"struct\" href=\"abi_stable/type_level/trait_marker/struct.PartialEq.html\" title=\"struct abi_stable::type_level::trait_marker::PartialEq\">PartialEq</a>&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#554-556\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<NonExhaustive<E, S, I2>>","abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CE%3E-for-NonExhaustive%3CE,+S,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#585-597\">Source</a><a href=\"#impl-PartialOrd%3CE%3E-for-NonExhaustive%3CE,+S,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;E&gt; for <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.GetEnumInfo.html\" title=\"trait abi_stable::nonexhaustive_enum::GetEnumInfo\">GetEnumInfo</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,\n    I: <a class=\"trait\" href=\"abi_stable/trait.InterfaceType.html\" title=\"trait abi_stable::InterfaceType\">InterfaceType</a>&lt;PartialOrd = <a class=\"struct\" href=\"abi_stable/type_level/impl_enum/struct.Implemented.html\" title=\"struct abi_stable::type_level::impl_enum::Implemented\">Implemented</a>&lt;<a class=\"struct\" href=\"abi_stable/type_level/trait_marker/struct.PartialOrd.html\" title=\"struct abi_stable::type_level::trait_marker::PartialOrd\">PartialOrd</a>&gt;&gt;,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;E&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#591-596\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;E</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<E>","abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CNonExhaustive%3CE,+S,+I2%3E%3E-for-NonExhaustive%3CE,+S,+I1%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#569-581\">Source</a><a href=\"#impl-PartialOrd%3CNonExhaustive%3CE,+S,+I2%3E%3E-for-NonExhaustive%3CE,+S,+I1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I1, I2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I2&gt;&gt; for <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I1&gt;<div class=\"where\">where\n    I1: <a class=\"trait\" href=\"abi_stable/trait.InterfaceType.html\" title=\"trait abi_stable::InterfaceType\">InterfaceType</a>&lt;PartialOrd = <a class=\"struct\" href=\"abi_stable/type_level/impl_enum/struct.Implemented.html\" title=\"struct abi_stable::type_level::impl_enum::Implemented\">Implemented</a>&lt;<a class=\"struct\" href=\"abi_stable/type_level/trait_marker/struct.PartialOrd.html\" title=\"struct abi_stable::type_level::trait_marker::PartialOrd\">PartialOrd</a>&gt;&gt;,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I2&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#574-580\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I2&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<NonExhaustive<E, S, I2>>","abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-NonExhaustive%3CE,+S,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#639-656\">Source</a><a href=\"#impl-Serialize-for-NonExhaustive%3CE,+S,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I&gt; <a class=\"trait\" href=\"serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"abi_stable/trait.InterfaceType.html\" title=\"trait abi_stable::InterfaceType\">InterfaceType</a>&lt;Serialize = <a class=\"struct\" href=\"abi_stable/type_level/impl_enum/struct.Implemented.html\" title=\"struct abi_stable::type_level::impl_enum::Implemented\">Implemented</a>&lt;<a class=\"struct\" href=\"abi_stable/type_level/trait_marker/struct.Serialize.html\" title=\"struct abi_stable::type_level::trait_marker::Serialize\">Serialize</a>&gt;&gt; + <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.SerializeEnum.html\" title=\"trait abi_stable::nonexhaustive_enum::SerializeEnum\">SerializeEnum</a>&lt;E&gt;,\n    I::<a class=\"associatedtype\" href=\"abi_stable/nonexhaustive_enum/trait.SerializeEnum.html#associatedtype.Proxy\" title=\"type abi_stable::nonexhaustive_enum::SerializeEnum::Proxy\">Proxy</a>: <a class=\"trait\" href=\"serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a>,</div></h3><div class=\"docblock\"><p>First it serializes a <code>NonExhaustive&lt;_&gt;</code> into a proxy,then it serializes that proxy.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#645-655\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde_core/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;Z&gt;(&amp;self, serializer: Z) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Z::<a class=\"associatedtype\" href=\"serde_core/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde_core::ser::Serializer::Ok\">Ok</a>, Z::<a class=\"associatedtype\" href=\"serde_core/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde_core::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    Z: <a class=\"trait\" href=\"serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde_core/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StableAbi-for-NonExhaustive%3CE,+S,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#187\">Source</a><a href=\"#impl-StableAbi-for-NonExhaustive%3CE,+S,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I&gt; <a class=\"trait\" href=\"abi_stable/trait.StableAbi.html\" title=\"trait abi_stable::StableAbi\">StableAbi</a> for <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html\" title=\"trait abi_stable::abi_stability::get_static_equivalent::GetStaticEquivalent_\">__GetStaticEquivalent_</a> + <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.NonExhaustiveMarker.html\" title=\"trait abi_stable::nonexhaustive_enum::NonExhaustiveMarker\">NonExhaustiveMarker</a>&lt;S&gt;,\n    S: <a class=\"trait\" href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html\" title=\"trait abi_stable::abi_stability::get_static_equivalent::GetStaticEquivalent_\">__GetStaticEquivalent_</a>,\n    I: <a class=\"trait\" href=\"abi_stable/abi_stability/get_static_equivalent/trait.GetStaticEquivalent_.html\" title=\"trait abi_stable::abi_stability::get_static_equivalent::GetStaticEquivalent_\">__GetStaticEquivalent_</a> + <a class=\"trait\" href=\"abi_stable/trait.InterfaceType.html\" title=\"trait abi_stable::InterfaceType\">InterfaceType</a>,\n    NonExhaustiveVtable_Ref&lt;E, S, I&gt;: <a class=\"trait\" href=\"abi_stable/trait.StableAbi.html\" title=\"trait abi_stable::StableAbi\">StableAbi</a>,\n    &lt;E as <a class=\"trait\" href=\"abi_stable/nonexhaustive_enum/trait.NonExhaustiveMarker.html\" title=\"trait abi_stable::nonexhaustive_enum::NonExhaustiveMarker\">NonExhaustiveMarker</a>&lt;S&gt;&gt;::<a class=\"associatedtype\" href=\"abi_stable/nonexhaustive_enum/trait.NonExhaustiveMarker.html#associatedtype.Marker\" title=\"type abi_stable::nonexhaustive_enum::NonExhaustiveMarker::Marker\">Marker</a>: <a class=\"trait\" href=\"abi_stable/trait.StableAbi.html\" title=\"trait abi_stable::StableAbi\">__StableAbi</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.LAYOUT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#187\">Source</a><a href=\"#associatedconstant.LAYOUT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"abi_stable/trait.StableAbi.html#associatedconstant.LAYOUT\" class=\"constant\">LAYOUT</a>: &amp;'static <a class=\"struct\" href=\"abi_stable/type_layout/struct.TypeLayout.html\" title=\"struct abi_stable::type_layout::TypeLayout\">TypeLayout</a></h4></section></summary><div class='docblock'>The layout of the type provided by implementors.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IsNonZeroType\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#187\">Source</a><a href=\"#associatedtype.IsNonZeroType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"abi_stable/trait.StableAbi.html#associatedtype.IsNonZeroType\" class=\"associatedtype\">IsNonZeroType</a> = <a class=\"struct\" href=\"abi_stable/reexports/struct.False.html\" title=\"struct abi_stable::reexports::False\">False</a></h4></section></summary><div class='docblock'>Whether this type has a single invalid bit-pattern. <a href=\"abi_stable/trait.StableAbi.html#associatedtype.IsNonZeroType\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.ABI_CONSTS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/abi_stable/abi_stability/stable_abi_trait.rs.html#76-79\">Source</a><a href=\"#associatedconstant.ABI_CONSTS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"abi_stable/trait.StableAbi.html#associatedconstant.ABI_CONSTS\" class=\"constant\">ABI_CONSTS</a>: <a class=\"struct\" href=\"abi_stable/abi_stability/stable_abi_trait/struct.AbiConsts.html\" title=\"struct abi_stable::abi_stability::stable_abi_trait::AbiConsts\">AbiConsts</a> = _</h4></section></summary><div class='docblock'><code>const</code>-equivalents of the associated types.</div></details></div></details>","StableAbi","abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"],["<section id=\"impl-Eq-for-NonExhaustive%3CE,+S,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/abi_stable/nonexhaustive_enum/nonexhaustive.rs.html#543-548\">Source</a><a href=\"#impl-Eq-for-NonExhaustive%3CE,+S,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, S, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"abi_stable/nonexhaustive_enum/struct.NonExhaustive.html\" title=\"struct abi_stable::nonexhaustive_enum::NonExhaustive\">NonExhaustive</a>&lt;E, S, I&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,\n    I: <a class=\"trait\" href=\"abi_stable/trait.InterfaceType.html\" title=\"trait abi_stable::InterfaceType\">InterfaceType</a>&lt;Eq = <a class=\"struct\" href=\"abi_stable/type_level/impl_enum/struct.Implemented.html\" title=\"struct abi_stable::type_level::impl_enum::Implemented\">Implemented</a>&lt;<a class=\"struct\" href=\"abi_stable/type_level/trait_marker/struct.Eq.html\" title=\"struct abi_stable::type_level::trait_marker::Eq\">Eq</a>&gt;&gt;,</div></h3></section>","Eq","abi_stable::for_examples::ValidTag_NE","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveFor","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWI","abi_stable::nonexhaustive_enum::nonexhaustive::NonExhaustiveWS"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[94505]}