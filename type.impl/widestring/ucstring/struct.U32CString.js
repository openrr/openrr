(function() {
    var type_impls = Object.fromEntries([["widestring",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CU32CStr%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-AsMut%3CU32CStr%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<U32CStr>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5Bu32%5D%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-AsRef%3C%5Bu32%5D%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[u32]>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CU32CStr%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-AsRef%3CU32CStr%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<U32CStr>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CU32Str%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-AsRef%3CU32Str%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<U32Str>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3CU32CStr%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-Borrow%3CU32CStr%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<U32CStr>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3CU32CStr%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-BorrowMut%3CU32CStr%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<U32CStr>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-Clone-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#1649-1654\">Source</a><a href=\"#impl-Debug-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#1651-1653\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-Default-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-Deref-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-DerefMut-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-Drop-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26T%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-From%3C%26T%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt;&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;'a T</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&'a T>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBox%3CU32CStr%3E%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-From%3CBox%3CU32CStr%3E%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt;&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Box<U32CStr>>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-Hash-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut __H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CI%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-Index%3CI%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>], Output = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<I>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-Ord-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1013-1015\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1052-1054\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1078-1080\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26U32CStr%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-PartialEq%3C%26U32CStr%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a U32CStr>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26U32Str%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-PartialEq%3C%26U32Str%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a U32Str>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CCow%3C'a,+U32CStr%3E%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-PartialEq%3CCow%3C'a,+U32CStr%3E%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt;&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Cow<'a, U32CStr>>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CCow%3C'a,+U32Str%3E%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-PartialEq%3CCow%3C'a,+U32Str%3E%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt;&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Cow<'a, U32Str>>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CU32CStr%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-PartialEq%3CU32CStr%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<U32CStr>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CU32Str%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-PartialEq%3CU32Str%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<U32Str>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CU32String%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-PartialEq%3CU32String%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"widestring/ustring/struct.U32String.html\" title=\"struct widestring::ustring::U32String\">U32String</a>&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ustring/struct.U32String.html\" title=\"struct widestring::ustring::U32String\">U32String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<U32String>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CUtf32Str%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-PartialEq%3CUtf32Str%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Utf32Str>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CUtf32String%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-PartialEq%3CUtf32String%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a>&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Utf32String>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-PartialEq-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3C%26U32CStr%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-PartialOrd%3C%26U32CStr%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;&amp;'a <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;&amp;'a <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<&'a U32CStr>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3C%26U32Str%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-PartialOrd%3C%26U32Str%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;&amp;'a <a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;&amp;'a <a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<&'a U32Str>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CCow%3C'a,+U32CStr%3E%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-PartialOrd%3CCow%3C'a,+U32CStr%3E%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt;&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Cow<'a, U32CStr>>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CCow%3C'a,+U32Str%3E%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-PartialOrd%3CCow%3C'a,+U32Str%3E%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt;&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Cow<'a, U32Str>>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CU32CStr%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-PartialOrd%3CU32CStr%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<U32CStr>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CU32Str%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-PartialOrd%3CU32Str%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<U32Str>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CU32String%3E-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-PartialOrd%3CU32String%3E-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"widestring/ustring/struct.U32String.html\" title=\"struct widestring::ustring::U32String\">U32String</a>&gt; for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ustring/struct.U32String.html\" title=\"struct widestring::ustring::U32String\">U32String</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<U32String>","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-PartialOrd-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#1211-1640\">Source</a><a href=\"#impl-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_chars\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#1247-1257\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_chars\" class=\"fn\">from_chars</a>(v: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"widestring/error/struct.ContainsNul.html\" title=\"struct widestring::error::ContainsNul\">ContainsNul</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a <a href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\"><code>U32CString</code></a> from a container of character data, checking for invalid nul\nvalues.</p>\n<p>This method will consume the provided data and use the underlying elements to construct a\nnew string. The data will be scanned for invalid nul values anywhere except the last\ncharacter.\nThe resulting string will always be nul-terminated even if the original string is not.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>This function will return an error if the data contains a nul value anywhere except the\nlast character.\nThe returned error will contain the <a href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;u32&gt;</code></a> as well as the position of the nul value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n<span class=\"kw\">let </span>v: Vec&lt;char&gt; = <span class=\"string\">\"Test\"</span>.chars().collect();\n<span class=\"comment\">// Create a wide string from the vector\n</span><span class=\"kw\">let </span>wcstr = U32CString::from_chars(v).unwrap();</code></pre></div>\n<p>The following example demonstrates errors from nul values in a vector.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n<span class=\"kw\">let </span>v: Vec&lt;char&gt; = <span class=\"string\">\"T\\u{0}est\"</span>.chars().collect();\n<span class=\"comment\">// Create a wide string from the vector\n</span><span class=\"kw\">let </span>res = U32CString::from_chars(v);\n<span class=\"macro\">assert!</span>(res.is_err());\n<span class=\"macro\">assert_eq!</span>(res.err().unwrap().nul_position(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_chars_truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#1277-1287\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_chars_truncate\" class=\"fn\">from_chars_truncate</a>(v: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>&gt;&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a <a href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\"><code>U32CString</code></a> from a container of character data, truncating at the first nul\nvalue.</p>\n<p>This method will consume the provided data and use the underlying elements to construct a\nnew string. The string will be truncated at the first nul value in the string.\nThe resulting string will always be nul-terminated even if the original string is not.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n<span class=\"kw\">let </span>v: Vec&lt;char&gt; = <span class=\"string\">\"Test\\u{0}\"</span>.chars().collect();\n<span class=\"comment\">// Create a wide string from the vector\n</span><span class=\"kw\">let </span>wcstr = U32CString::from_chars_truncate(v);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_chars_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#1300-1310\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_chars_unchecked\" class=\"fn\">from_chars_unchecked</a>(v: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>&gt;&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a <a href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\"><code>U32CString</code></a> from character data without checking for nul values.</p>\n<p>A terminating nul value will be appended if the vector does not already have a terminating\nnul.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This method is equivalent to <a href=\"widestring/ucstring/struct.U32CString.html#method.from_chars\" title=\"associated function widestring::ucstring::U32CString::from_chars\"><code>from_chars</code></a> except that no runtime\nassertion is made that <code>v</code> contains no interior nul values. Providing a vector with nul\nvalues anywhere but the last character will result in an invalid <a href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\"><code>U32CString</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#1350-1353\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"widestring/error/struct.ContainsNul.html\" title=\"struct widestring::error::ContainsNul\">ContainsNul</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a <a href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\"><code>U32CString</code></a> copy from a <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\" title=\"primitive str\"><code>str</code></a>, encoding it as UTF-32 and checking for\ninvalid interior nul values.</p>\n<p>This makes a string copy of the <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\" title=\"primitive str\"><code>str</code></a>. Since <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\" title=\"primitive str\"><code>str</code></a> will always be valid UTF-8, the\nresulting <a href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\"><code>U32CString</code></a> will also be valid UTF-32.</p>\n<p>The string will be scanned for nul values, which are invalid anywhere except the last\ncharacter.\nThe resulting string will always be nul-terminated even if the original string is not.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>This function will return an error if the data contains a nul value anywhere except the\nlast character.\nThe returned error will contain a <a href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;u32&gt;</code></a> as well as the position of the nul value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n<span class=\"kw\">let </span>s = <span class=\"string\">\"MyString\"</span>;\n<span class=\"comment\">// Create a wide string from the string\n</span><span class=\"kw\">let </span>wcstr = U32CString::from_str(s).unwrap();</code></pre></div>\n<p>The following example demonstrates errors from nul values in a string.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n<span class=\"kw\">let </span>s = <span class=\"string\">\"My\\u{0}String\"</span>;\n<span class=\"comment\">// Create a wide string from the string\n</span><span class=\"kw\">let </span>res = U32CString::from_str(s);\n<span class=\"macro\">assert!</span>(res.is_err());\n<span class=\"macro\">assert_eq!</span>(res.err().unwrap().nul_position(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#1380-1383\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_str_unchecked\" class=\"fn\">from_str_unchecked</a>(s: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a <a href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\"><code>U32CString</code></a> copy from a <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\" title=\"primitive str\"><code>str</code></a>, encoding it as UTF-32, without checking for\nnul values.</p>\n<p>This makes a string copy of the <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\" title=\"primitive str\"><code>str</code></a>. Since <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\" title=\"primitive str\"><code>str</code></a> will always be valid UTF-8, the\nresulting <a href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\"><code>U32CString</code></a> will also be valid UTF-32.</p>\n<p>The resulting string will always be nul-terminated even if the original string is not.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This method is equivalent to <a href=\"widestring/ucstring/struct.U32CString.html#method.from_str\" title=\"associated function widestring::ucstring::U32CString::from_str\"><code>from_str</code></a> except that no runtime assertion\nis made that <code>s</code> contains invalid nul values. Providing a string with nul values anywhere\nexcept the last character will result in an invalid <a href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\"><code>U32CString</code></a>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n<span class=\"kw\">let </span>s = <span class=\"string\">\"MyString\"</span>;\n<span class=\"comment\">// Create a wide string from the string\n</span><span class=\"kw\">let </span>wcstr = <span class=\"kw\">unsafe </span>{ U32CString::from_str_unchecked(s) };</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#1405-1408\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_str_truncate\" class=\"fn\">from_str_truncate</a>(s: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a <a href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\"><code>U32CString</code></a> copy from a <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\" title=\"primitive str\"><code>str</code></a>, encoding it as UTF-32, truncating at the\nfirst nul terminator.</p>\n<p>This makes a string copy of the <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\" title=\"primitive str\"><code>str</code></a>. Since <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\" title=\"primitive str\"><code>str</code></a> will always be valid UTF-8, the\nresulting <a href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\"><code>U32CString</code></a> will also be valid UTF-32.</p>\n<p>The string will be truncated at the first nul value in the string.\nThe resulting string will always be nul-terminated even if the original string is not.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n<span class=\"kw\">let </span>s = <span class=\"string\">\"My\\u{0}String\"</span>;\n<span class=\"comment\">// Create a wide string from the string\n</span><span class=\"kw\">let </span>wcstr = U32CString::from_str_truncate(s);\n<span class=\"macro\">assert_eq!</span>(wcstr.to_string_lossy(), <span class=\"string\">\"My\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_char_ptr_str\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#1436-1438\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_char_ptr_str\" class=\"fn\">from_char_ptr_str</a>(p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a new wide C string copied from a nul-terminated <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> string pointer.</p>\n<p>This will scan for nul values beginning with <code>p</code>. The first nul value will be used as the\nnul terminator for the string, similar to how libc string functions such as <code>strlen</code> work.</p>\n<p>If you wish to avoid copying the string pointer, use <a href=\"widestring/ucstr/struct.U32CStr.html#method.from_char_ptr_str\" title=\"associated function widestring::ucstr::U32CStr::from_char_ptr_str\"><code>U32CStr::from_char_ptr_str</code></a> instead.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid or has a\nnul terminator, and the function could scan past the underlying buffer.</p>\n<p>In addition, the data must meet the safety conditions of <a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\">std::slice::from_raw_parts</a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function panics if <code>p</code> is null.</p>\n<h5 id=\"caveat\"><a class=\"doc-anchor\" href=\"#caveat\">§</a>Caveat</h5>\n<p>The lifetime for the returned string is inferred from its usage. To prevent accidental\nmisuse, it’s suggested to tie the lifetime to whichever source lifetime is safe in the\ncontext, such as by providing a helper function taking the lifetime of a host value for the\nstring, or by explicit annotation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_char_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#1467-1469\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_char_ptr\" class=\"fn\">from_char_ptr</a>(\n    p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"widestring/error/struct.ContainsNul.html\" title=\"struct widestring::error::ContainsNul\">ContainsNul</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a wide C string copied from a <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> pointer and a length, checking for invalid\ninterior nul values.</p>\n<p>The <code>len</code> argument is the number of elements, <strong>not</strong> the number of bytes, and does\n<strong>not</strong> include the nul terminator of the string. If <code>len</code> is <code>0</code>, <code>p</code> is allowed to be a\nnull pointer.</p>\n<p>The resulting string will always be nul-terminated even if the pointer data is not.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>This will scan the pointer string for an interior nul value and error if one is found. To\navoid scanning for interior nuls, <a href=\"widestring/ucstring/struct.U32CString.html#method.from_ptr_unchecked\" title=\"associated function widestring::ucstring::U32CString::from_ptr_unchecked\"><code>from_ptr_unchecked</code></a> may be\nused instead.\nThe returned error will contain a <a href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> as well as the position of the nul value.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid for <code>len</code>\nelements.</p>\n<p>In addition, the data must meet the safety conditions of <a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\">std::slice::from_raw_parts</a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>len</code> is greater than 0 but <code>p</code> is a null pointer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_char_ptr_truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#1492-1494\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_char_ptr_truncate\" class=\"fn\">from_char_ptr_truncate</a>(p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a wide C string copied from a <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> pointer and a length, truncating at the\nfirst nul terminator.</p>\n<p>The <code>len</code> argument is the number of elements, <strong>not</strong> the number of bytes. This will scan\nfor nul values beginning with <code>p</code> until offset <code>len</code>. The first nul value will be used as\nthe nul terminator for the string, ignoring any remaining values left before <code>len</code>. If no\nnul value is found, the whole string of length <code>len</code> is used, and a new nul-terminator\nwill be added to the resulting string. If <code>len</code> is <code>0</code>, <code>p</code> is allowed to be a null pointer.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid for <code>len</code>\nelements.</p>\n<p>In addition, the data must meet the safety conditions of <a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\">std::slice::from_raw_parts</a>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>len</code> is greater than 0 but <code>p</code> is a null pointer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_char_ptr_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#1519-1521\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_char_ptr_unchecked\" class=\"fn\">from_char_ptr_unchecked</a>(p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a wide C string copied from a <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> pointer and a length without checking for\nany nul values.</p>\n<p>The <code>len</code> argument is the number of elements, <strong>not</strong> the number of bytes, and does\n<strong>not</strong> include the nul terminator of the string. If <code>len</code> is <code>0</code>, <code>p</code> is allowed to be a\nnull pointer.</p>\n<p>The resulting string will always be nul-terminated even if the pointer data is not.</p>\n<h5 id=\"safety-5\"><a class=\"doc-anchor\" href=\"#safety-5\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid for <code>len</code>\nelements.</p>\n<p>In addition, the data must meet the safety conditions of <a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\">std::slice::from_raw_parts</a>.</p>\n<p>The interior values of the pointer are not scanned for nul. Any interior nul values or\nwill result in an invalid C string.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>len</code> is greater than 0 but <code>p</code> is a null pointer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_os_str\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#1567-1570\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_os_str\" class=\"fn\">from_os_str</a>(s: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"widestring/error/struct.ContainsNul.html\" title=\"struct widestring::error::ContainsNul\">ContainsNul</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a <a href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\"><code>U32CString</code></a> copy from an <a href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\"><code>OsStr</code></a>, checking for invalid\nnul values.</p>\n<p>This makes a string copy of the <a href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\"><code>OsStr</code></a>. Since <a href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\"><code>OsStr</code></a>\nmakes no guarantees that it is valid data, there is no guarantee that the resulting\n<a href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\"><code>U32CString</code></a> will be valid UTF-32.</p>\n<p>The string will be scanned for nul values, which are invlaid anywhere except the last\ncharacter.\nThe resulting string will always be nul-terminated even if the string is not.</p>\n<p>Note that the encoding of <a href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\"><code>OsStr</code></a> is platform-dependent, so on\nsome platforms this may make an encoding conversions, while on other platforms no changes to\nthe string will be made.</p>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h5>\n<p>This function will return an error if the data contains a nul value anywhere except the\nlast character.\nThe returned error will contain a <a href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;u32&gt;</code></a> as well as the position of the nul value.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n<span class=\"kw\">let </span>s = <span class=\"string\">\"MyString\"</span>;\n<span class=\"comment\">// Create a wide string from the string\n</span><span class=\"kw\">let </span>wcstr = U32CString::from_os_str(s).unwrap();</code></pre></div>\n<p>The following example demonstrates errors from nul values in a string.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n<span class=\"kw\">let </span>s = <span class=\"string\">\"My\\u{0}String\"</span>;\n<span class=\"comment\">// Create a wide string from the string\n</span><span class=\"kw\">let </span>res = U32CString::from_os_str(s);\n<span class=\"macro\">assert!</span>(res.is_err());\n<span class=\"macro\">assert_eq!</span>(res.err().unwrap().nul_position(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_os_str_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#1604-1607\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_os_str_unchecked\" class=\"fn\">from_os_str_unchecked</a>(s: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a <a href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\"><code>U32CString</code></a> copy from an <a href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\"><code>OsStr</code></a>, without checking for\nnul values.</p>\n<p>This makes a string copy of the <a href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\"><code>OsStr</code></a>. Since <a href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\"><code>OsStr</code></a>\nmakes no guarantees that it is valid data, there is no guarantee that the resulting\n<a href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\"><code>U32CString</code></a> will be valid UTF-32.</p>\n<p>The resulting string will always be nul-terminated even if the string is not.</p>\n<p>Note that the encoding of <a href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\"><code>OsStr</code></a> is platform-dependent, so on\nsome platforms this may make an encoding conversions, while on other platforms no changes to\nthe string will be made.</p>\n<h5 id=\"safety-6\"><a class=\"doc-anchor\" href=\"#safety-6\">§</a>Safety</h5>\n<p>This method is equivalent to <a href=\"widestring/ucstring/struct.U32CString.html#method.from_os_str\" title=\"associated function widestring::ucstring::U32CString::from_os_str\"><code>from_os_str</code></a> except that no runtime\nassertion is made that <code>s</code> contains invalid nul values. Providing a string with nul values\nanywhere except the last character will result in an invalid <a href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\"><code>U32CString</code></a>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n<span class=\"kw\">let </span>s = <span class=\"string\">\"MyString\"</span>;\n<span class=\"comment\">// Create a wide string from the string\n</span><span class=\"kw\">let </span>wcstr = <span class=\"kw\">unsafe </span>{ U32CString::from_os_str_unchecked(s) };</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_os_str_truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#1636-1639\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_os_str_truncate\" class=\"fn\">from_os_str_truncate</a>(s: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a <a href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\"><code>U32CString</code></a> copy from an <a href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\"><code>OsStr</code></a>, truncating at the first\nnul terminator.</p>\n<p>This makes a string copy of the <a href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\"><code>OsStr</code></a>. Since <a href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\"><code>OsStr</code></a>\nmakes no guarantees that it is valid data, there is no guarantee that the resulting\n<a href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\"><code>U32CString</code></a> will be valid UTF-32.</p>\n<p>The string will be truncated at the first nul value in the string.\nThe resulting string will always be nul-terminated even if the string is not.</p>\n<p>Note that the encoding of <a href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\"><code>OsStr</code></a> is platform-dependent, so on\nsome platforms this may make an encoding conversions, while on other platforms no changes to\nthe string will be made.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n<span class=\"kw\">let </span>s = <span class=\"string\">\"My\\u{0}String\"</span>;\n<span class=\"comment\">// Create a wide string from the string\n</span><span class=\"kw\">let </span>wcstr = U32CString::from_os_str_truncate(s);\n<span class=\"macro\">assert_eq!</span>(wcstr.to_string_lossy(), <span class=\"string\">\"My\"</span>);</code></pre></div>\n</div></details></div></details>",0,"widestring::ucstring::WideCString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUL_TERMINATOR\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub const <a href=\"widestring/ucstring/struct.U32CString.html#associatedconstant.NUL_TERMINATOR\" class=\"constant\">NUL_TERMINATOR</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a> = 0u32</h4></section></summary><div class=\"docblock\"><p>The nul terminator character value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a new empty wide C string.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_vec\" class=\"fn\">from_vec</a>(v: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"widestring/error/struct.ContainsNul.html\" title=\"struct widestring::error::ContainsNul\">ContainsNul</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a wide C string from a container of wide character data.</p>\n<p>This method will consume the provided data and use the underlying elements to\nconstruct a new string. The data will be scanned for invalid interior nul values.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>This function will return an error if the data contains a nul value that is not the\nterminating nul.\nThe returned error will contain the original <a href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> as well as the position of the\nnul value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">84u32</span>, <span class=\"number\">104u32</span>, <span class=\"number\">101u32</span>]; <span class=\"comment\">// 'T' 'h' 'e'\n// Create a wide string from the vector\n</span><span class=\"kw\">let </span>wcstr = U32CString::from_vec(v).unwrap();</code></pre></div>\n<p>Empty vectors are valid and will return an empty string with a nul terminator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n<span class=\"kw\">let </span>wcstr = U32CString::from_vec(<span class=\"macro\">vec!</span>[]).unwrap();\n<span class=\"macro\">assert_eq!</span>(wcstr, U32CString::default());</code></pre></div>\n<p>The following example demonstrates errors from nul values in a vector.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">84u32</span>, <span class=\"number\">0u32</span>, <span class=\"number\">104u32</span>, <span class=\"number\">101u32</span>]; <span class=\"comment\">// 'T' NUL 'h' 'e'\n// Create a wide string from the vector\n</span><span class=\"kw\">let </span>res = U32CString::from_vec(v);\n<span class=\"macro\">assert!</span>(res.is_err());\n<span class=\"macro\">assert_eq!</span>(res.err().unwrap().nul_position(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec_truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_vec_truncate\" class=\"fn\">from_vec_truncate</a>(v: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a wide C string from a container of wide character data, truncating at\nthe first nul terminator.</p>\n<p>The string will be truncated at the first nul value in the data.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">84u32</span>, <span class=\"number\">104u32</span>, <span class=\"number\">101u32</span>, <span class=\"number\">0u32</span>]; <span class=\"comment\">// 'T' 'h' 'e' NUL\n// Create a wide string from the vector\n</span><span class=\"kw\">let </span>wcstr = U32CString::from_vec_truncate(v);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_vec_unchecked\" class=\"fn\">from_vec_unchecked</a>(v: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a wide C string from a vector without checking for interior nul values.</p>\n<p>A terminating nul value will be appended if the vector does not already have a\nterminating nul.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This method is equivalent to <a href=\"widestring/ucstring/struct.U32CString.html#method.from_vec\" title=\"associated function widestring::ucstring::U32CString::from_vec\"><code>from_vec</code></a> except that no runtime\nassertion is made that <code>v</code> contains no interior nul values. Providing a vector with\nany nul values that are not the last value in the vector will result in an invalid\nC string.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ustr\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_ustr\" class=\"fn\">from_ustr</a>(s: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"widestring/error/struct.ContainsNul.html\" title=\"struct widestring::error::ContainsNul\">ContainsNul</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a wide C string from anything that can be converted to a wide string\nslice.</p>\n<p>The string will be scanned for invalid interior nul values.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>This function will return an error if the data contains a nul value that is not the\nterminating nul.\nThe returned error will contain a <a href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> as well as the position of the nul value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ustr_truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_ustr_truncate\" class=\"fn\">from_ustr_truncate</a>(s: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a wide C string from anything that can be converted to a wide string\nslice, truncating at the first nul terminator.</p>\n<p>The string will be truncated at the first nul value in the string.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ustr_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_ustr_unchecked\" class=\"fn\">from_ustr_unchecked</a>(s: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a wide C string from anything that can be converted to a wide string\nslice, without scanning for invalid nul values.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This method is equivalent to <a href=\"widestring/ucstring/struct.U32CString.html#method.from_ustr\" title=\"associated function widestring::ucstring::U32CString::from_ustr\"><code>from_ustr</code></a> except that no runtime\nassertion is made that <code>v</code> contains no interior nul values. Providing a string with\nany nul values that are not the last value in the vector will result in an invalid\nC string.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ptr_str\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_ptr_str\" class=\"fn\">from_ptr_str</a>(p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a new wide C string copied from a nul-terminated string pointer.</p>\n<p>This will scan for nul values beginning with <code>p</code>. The first nul value will be used\nas the nul terminator for the string, similar to how libc string functions such as\n<code>strlen</code> work.</p>\n<p>If you wish to avoid copying the string pointer, use <a href=\"widestring/ucstr/struct.U16CStr.html#method.from_ptr_str\" title=\"associated function widestring::ucstr::U16CStr::from_ptr_str\"><code>U16CStr::from_ptr_str</code></a> or\n<a href=\"widestring/ucstr/struct.U32CStr.html#method.from_ptr_str\" title=\"associated function widestring::ucstr::U32CStr::from_ptr_str\"><code>U32CStr::from_ptr_str</code></a> instead.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid or\nhas a nul terminator, and the function could scan past the underlying buffer.</p>\n<p>In addition, the data must meet the safety conditions of\n<a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\">std::slice::from_raw_parts</a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function panics if <code>p</code> is null.</p>\n<h5 id=\"caveat\"><a class=\"doc-anchor\" href=\"#caveat\">§</a>Caveat</h5>\n<p>The lifetime for the returned string is inferred from its usage. To prevent\naccidental misuse, it’s suggested to tie the lifetime to whichever source lifetime\nis safe in the context, such as by providing a helper function taking the lifetime\nof a host value for the string, or by explicit annotation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_ptr\" class=\"fn\">from_ptr</a>(\n    p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"widestring/error/struct.ContainsNul.html\" title=\"struct widestring::error::ContainsNul\">ContainsNul</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a wide C string copied from a pointer and a length, checking for invalid\ninterior nul values.</p>\n<p>The <code>len</code> argument is the number of elements, <strong>not</strong> the number of bytes, and does\n<strong>not</strong> include the nul terminator of the string. If <code>len</code> is <code>0</code>, <code>p</code> is allowed to\nbe a null pointer.</p>\n<p>The resulting string will always be nul-terminated even if the pointer data is not.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>This will scan the pointer string for an interior nul value and error if one is\nfound. To avoid scanning for interior nuls,\n<a href=\"widestring/ucstring/struct.U32CString.html#method.from_ptr_unchecked\" title=\"associated function widestring::ucstring::U32CString::from_ptr_unchecked\"><code>from_ptr_unchecked</code></a> may be used instead.\nThe returned error will contain a <a href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> as well as the position of the nul value.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid for\n<code>len</code> elements.</p>\n<p>In addition, the data must meet the safety conditions of\n<a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\">std::slice::from_raw_parts</a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>len</code> is greater than 0 but <code>p</code> is a null pointer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ptr_truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_ptr_truncate\" class=\"fn\">from_ptr_truncate</a>(p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a wide C string copied from a pointer and a length, truncating at the\nfirst nul terminator.</p>\n<p>The <code>len</code> argument is the number of elements, <strong>not</strong> the number of bytes. This will\nscan for nul values beginning with <code>p</code> until offset <code>len</code>. The first nul value will\nbe used as the nul terminator for the string, ignoring any remaining values left\nbefore <code>len</code>. If no nul value is found, the whole string of length <code>len</code> is used,\nand a new nul-terminator will be added to the resulting string. If <code>len</code> is <code>0</code>, <code>p</code>\nis allowed to be a null pointer.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid for\n<code>len</code> elements.</p>\n<p>In addition, the data must meet the safety conditions of\n<a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\">std::slice::from_raw_parts</a>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>len</code> is greater than 0 but <code>p</code> is a null pointer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ptr_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_ptr_unchecked\" class=\"fn\">from_ptr_unchecked</a>(p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a wide C string copied from a pointer and a length without checking for\nany nul values.</p>\n<p>The <code>len</code> argument is the number of elements, <strong>not</strong> the number of bytes, and does\n<strong>not</strong> include the nul terminator of the string. If <code>len</code> is <code>0</code>, <code>p</code> is allowed to\nbe a null pointer.</p>\n<p>The resulting string will always be nul-terminated even if the pointer data is not.</p>\n<h5 id=\"safety-5\"><a class=\"doc-anchor\" href=\"#safety-5\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid for\n<code>len</code> elements.</p>\n<p>In addition, the data must meet the safety conditions of\n<a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\">std::slice::from_raw_parts</a>.</p>\n<p>The interior values of the pointer are not scanned for nul. Any interior nul values\nor will result in an invalid C string.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>len</code> is greater than 0 but <code>p</code> is a null pointer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ucstr\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.as_ucstr\" class=\"fn\">as_ucstr</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h4></section></summary><div class=\"docblock\"><p>Converts to a wide C string slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ucstr\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.as_mut_ucstr\" class=\"fn\">as_mut_ucstr</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h4></section></summary><div class=\"docblock\"><p>Converts to a mutable wide C string slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_ustring\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.into_ustring\" class=\"fn\">into_ustring</a>(self) -&gt; <a class=\"struct\" href=\"widestring/ustring/struct.U32String.html\" title=\"struct widestring::ustring::U32String\">U32String</a></h4></section></summary><div class=\"docblock\"><p>Converts this string into a wide string without a nul terminator.</p>\n<p>The resulting string will <strong>not</strong> contain a nul-terminator, and will contain no\nother nul values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_ustring_with_nul\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.into_ustring_with_nul\" class=\"fn\">into_ustring_with_nul</a>(self) -&gt; <a class=\"struct\" href=\"widestring/ustring/struct.U32String.html\" title=\"struct widestring::ustring::U32String\">U32String</a></h4></section></summary><div class=\"docblock\"><p>Converts this string into a wide string with a nul terminator.</p>\n<p>The resulting vector will contain a nul-terminator and no interior nul values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.into_vec\" class=\"fn\">into_vec</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the string into a <a href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> without a nul terminator, consuming the string in\nthe process.</p>\n<p>The resulting vector will <strong>not</strong> contain a nul-terminator, and will contain no\nother nul values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_vec_with_nul\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.into_vec_with_nul\" class=\"fn\">into_vec_with_nul</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the string into a <a href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a>, consuming the string in the process.</p>\n<p>The resulting vector will contain a nul-terminator and no interior nul values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.into_raw\" class=\"fn\">into_raw</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Transfers ownership of the string to a C caller.</p>\n<h5 id=\"safety-6\"><a class=\"doc-anchor\" href=\"#safety-6\">§</a>Safety</h5>\n<p>The pointer <em>must</em> be returned to Rust and reconstituted using\n<a href=\"widestring/ucstring/struct.U32CString.html#method.from_raw\" title=\"associated function widestring::ucstring::U32CString::from_raw\"><code>from_raw</code></a> to be properly deallocated. Specifically, one should\n<em>not</em> use the standard C <code>free</code> function to deallocate this string. Failure to call\n<a href=\"widestring/ucstring/struct.U32CString.html#method.from_raw\" title=\"associated function widestring::ucstring::U32CString::from_raw\"><code>from_raw</code></a> will lead to a memory leak.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.from_raw\" class=\"fn\">from_raw</a>(p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Retakes ownership of a wide C string that was transferred to C.</p>\n<p>This should only be used in combination with <a href=\"widestring/ucstring/struct.U32CString.html#method.into_raw\" title=\"method widestring::ucstring::U32CString::into_raw\"><code>into_raw</code></a>. To\nconstruct a new wide C string from a pointer, use\n<a href=\"widestring/ucstring/struct.U32CString.html#method.from_ptr_str\" title=\"associated function widestring::ucstring::U32CString::from_ptr_str\"><code>from_ptr_str</code></a>.</p>\n<h5 id=\"safety-7\"><a class=\"doc-anchor\" href=\"#safety-7\">§</a>Safety</h5>\n<p>This should only ever be called with a pointer that was earlier obtained by calling\n<a href=\"widestring/ucstring/struct.U32CString.html#method.into_raw\" title=\"method widestring::ucstring::U32CString::into_raw\"><code>into_raw</code></a>. Additionally, the length of the string will be\nrecalculated from the pointer by scanning for the nul-terminator.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if <code>p</code> is a null pointer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_ucstr\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstring/struct.U32CString.html#tymethod.into_boxed_ucstr\" class=\"fn\">into_boxed_ucstr</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts this wide C string into a boxed wide C string slice.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::{U32CString, U32CStr};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">102u32</span>, <span class=\"number\">111u32</span>, <span class=\"number\">111u32</span>]; <span class=\"comment\">// \"foo\"\n</span><span class=\"kw\">let </span>c_string = U32CString::from_vec(v.clone()).unwrap();\n<span class=\"kw\">let </span>boxed = c_string.into_boxed_ucstr();\nv.push(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>boxed, U32CStr::from_slice(<span class=\"kw-2\">&amp;</span>v).unwrap());</code></pre></div>\n</div></details></div></details>",0,"widestring::ucstring::WideCString"],["<section id=\"impl-Eq-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-Eq-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section>","Eq","widestring::ucstring::WideCString"],["<section id=\"impl-StructuralPartialEq-for-U32CString\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-StructuralPartialEq-for-U32CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h3></section>","StructuralPartialEq","widestring::ucstring::WideCString"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[174909]}