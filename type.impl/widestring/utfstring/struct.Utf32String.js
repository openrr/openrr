(function() {
    var type_impls = Object.fromEntries([["widestring",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26Utf32Str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Add%3C%26Utf32Str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: &amp;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&Utf32Str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Add%3C%26str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26Utf32Str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-AddAssign%3C%26Utf32Str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<&Utf32Str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-AddAssign%3C%26str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<&str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3C%5Bchar%5D%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2545-2550\">Source</a><a href=\"#impl-AsMut%3C%5Bchar%5D%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>]&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2547-2549\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>]</h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<[char]>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CUtf32Str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-AsMut%3CUtf32Str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<Utf32Str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5Bchar%5D%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2552-2557\">Source</a><a href=\"#impl-AsRef%3C%5Bchar%5D%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>]&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2554-2556\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>]</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[char]>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5Bu32%5D%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-AsRef%3C%5Bu32%5D%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[u32]>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CU32Str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-AsRef%3CU32Str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<U32Str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CUtf32Str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-AsRef%3CUtf32Str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Utf32Str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3CUtf32Str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Borrow%3CUtf32Str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<Utf32Str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3CUtf32Str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-BorrowMut%3CUtf32Str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<Utf32Str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Clone-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Debug-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Default-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Deref-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-DerefMut-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Display-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26Utf32Str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Extend%3C%26Utf32Str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;&amp;'a <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt;&gt;(&amp;mut self, iter: T)</h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#417\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a Utf32Str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26char%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Extend%3C%26char%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>&gt;&gt;(&amp;mut self, iter: T)</h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#417\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a char>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Extend%3C%26str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt;&gt;(&amp;mut self, iter: T)</h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#417\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CBox%3CUtf32Str%3E%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Extend%3CBox%3CUtf32Str%3E%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt;&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt;&gt;&gt;(&amp;mut self, iter: T)</h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#417\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<Box<Utf32Str>>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CCow%3C'a,+Utf32Str%3E%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Extend%3CCow%3C'a,+Utf32Str%3E%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt;&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt;&gt;&gt;(&amp;mut self, iter: T)</h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#417\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<Cow<'a, Utf32Str>>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CString%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Extend%3CString%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;&gt;(&amp;mut self, iter: T)</h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#417\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<String>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CUtf32String%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Extend%3CUtf32String%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a>&gt;&gt;(&amp;mut self, iter: T)</h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#417\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<Utf32String>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3Cchar%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Extend%3Cchar%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>&gt;&gt;(&amp;mut self, iter: T)</h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#417\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<char>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5Bchar%5D%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2566-2571\">Source</a><a href=\"#impl-From%3C%26%5Bchar%5D%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>]&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2568-2570\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>]) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&[char]>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26Utf32Str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-From%3C%26Utf32Str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: &amp;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&Utf32Str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26Utf32String%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-From%3C%26Utf32String%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: &amp;<a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&Utf32String>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+Utf32Str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-From%3C%26mut+Utf32Str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: &amp;mut <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&mut Utf32Str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-From%3C%26str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCow%3C'_,+Utf32Str%3E%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-From%3CCow%3C'_,+Utf32Str%3E%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt;&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Cow<'_, Utf32Str>>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CString%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-From%3CString%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<String>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec%3Cchar%3E%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2559-2564\">Source</a><a href=\"#impl-From%3CVec%3Cchar%3E%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>&gt;&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2561-2563\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec<char>>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C%26Utf32Str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-FromIterator%3C%26Utf32Str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt;&gt;(iter: T) -&gt; Self</h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<&'a Utf32Str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C%26char%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-FromIterator%3C%26char%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>&gt;&gt;(iter: T) -&gt; Self</h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<&'a char>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C%26str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-FromIterator%3C%26str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt;&gt;(iter: T) -&gt; Self</h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<&'a str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CBox%3CUtf32Str%3E%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-FromIterator%3CBox%3CUtf32Str%3E%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt;&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt;&gt;&gt;(iter: T) -&gt; Self</h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<Box<Utf32Str>>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CCow%3C'a,+Utf32Str%3E%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-FromIterator%3CCow%3C'a,+Utf32Str%3E%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt;&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt;&gt;&gt;(iter: T) -&gt; Self</h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<Cow<'a, Utf32Str>>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CString%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-FromIterator%3CString%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;&gt;(iter: T) -&gt; Self</h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<String>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CUtf32String%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-FromIterator%3CUtf32String%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a>&gt;&gt;(iter: T) -&gt; Self</h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<Utf32String>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3Cchar%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-FromIterator%3Cchar%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>&gt;&gt;(iter: T) -&gt; Self</h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<char>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-FromStr-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" title=\"type core::str::traits::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Hash-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut __H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CI%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Index%3CI%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>], Output = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<I>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CI%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-IndexMut%3CI%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;I&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>], Output = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<I>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Ord-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1013-1015\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1052-1054\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1078-1080\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26Utf16Str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2601-2606\">Source</a><a href=\"#impl-PartialEq%3C%26Utf16Str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf16Str.html\" title=\"struct widestring::utfstr::Utf16Str\">Utf16Str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2603-2605\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf16Str.html\" title=\"struct widestring::utfstr::Utf16Str\">Utf16Str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&Utf16Str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26Utf32Str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-PartialEq%3C%26Utf32Str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&Utf32Str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-PartialEq%3C%26str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5Bchar%5D%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2580-2585\">Source</a><a href=\"#impl-PartialEq%3C%5Bchar%5D%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>]&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2582-2584\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[char]>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CCow%3C'_,+Utf32Str%3E%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-PartialEq%3CCow%3C'_,+Utf32Str%3E%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt;&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Cow<'_, Utf32Str>>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CCow%3C'_,+str%3E%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-PartialEq%3CCow%3C'_,+str%3E%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt;&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Cow<'_, str>>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CString%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-PartialEq%3CString%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<String>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CU32CStr%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-PartialEq%3CU32CStr%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<U32CStr>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CU32CString%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-PartialEq%3CU32CString%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<U32CString>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CU32Str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-PartialEq%3CU32Str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<U32Str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CU32String%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-PartialEq%3CU32String%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"widestring/ustring/struct.U32String.html\" title=\"struct widestring::ustring::U32String\">U32String</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ustring/struct.U32String.html\" title=\"struct widestring::ustring::U32String\">U32String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<U32String>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CUtf16String%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2587-2592\">Source</a><a href=\"#impl-PartialEq%3CUtf16String%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"widestring/utfstring/struct.Utf16String.html\" title=\"struct widestring::utfstring::Utf16String\">Utf16String</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2589-2591\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/utfstring/struct.Utf16String.html\" title=\"struct widestring::utfstring::Utf16String\">Utf16String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Utf16String>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CUtf32Str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-PartialEq%3CUtf32Str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Utf32Str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cstr%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-PartialEq%3Cstr%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-PartialEq-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-PartialOrd-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26%5Bu32%5D%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2656-2663\">Source</a><a href=\"#impl-TryFrom%3C%26%5Bu32%5D%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2657\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"widestring/error/struct.Utf32Error.html\" title=\"struct widestring::error::Utf32Error\">Utf32Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2660-2662\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&[u32]>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26U32CStr%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-TryFrom%3C%26U32CStr%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"widestring/error/struct.Utf32Error.html\" title=\"struct widestring::error::Utf32Error\">Utf32Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: &amp;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&U32CStr>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26U32Str%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-TryFrom%3C%26U32Str%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"widestring/error/struct.Utf32Error.html\" title=\"struct widestring::error::Utf32Error\">Utf32Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: &amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&U32Str>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CU32CString%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-TryFrom%3CU32CString%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"widestring/error/struct.Utf32Error.html\" title=\"struct widestring::error::Utf32Error\">Utf32Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<U32CString>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CU32String%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-TryFrom%3CU32String%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"widestring/ustring/struct.U32String.html\" title=\"struct widestring::ustring::U32String\">U32String</a>&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"widestring/error/struct.Utf32Error.html\" title=\"struct widestring::error::Utf32Error\">Utf32Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: <a class=\"struct\" href=\"widestring/ustring/struct.U32String.html\" title=\"struct widestring::ustring::U32String\">U32String</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<U32String>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CVec%3Cu32%3E%3E-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2638-2645\">Source</a><a href=\"#impl-TryFrom%3CVec%3Cu32%3E%3E-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2639\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"widestring/error/struct.Utf32Error.html\" title=\"struct widestring::error::Utf32Error\">Utf32Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2642-2644\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<Vec<u32>>","widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a new empty string.</p>\n<p>Given that the string is empty, this will not allocate any initial buffer. While\nthat means this initial operation is very inexpensive, it may cause excessive\nallocations later when you add data. If you have an idea of how much data the\nstring will hold, consider <a href=\"widestring/utfstring/struct.Utf32String.html#method.with_capacity\" title=\"associated function widestring::utfstring::Utf32String::with_capacity\"><code>with_capacity</code></a> instead to\nprevent excessive re-allocation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a new empty string with a particular capacity.</p>\n<p>This string has an internal buffer to hold its data. The capacity is the length of\nthat buffer, and can be queried with the <a href=\"widestring/utfstring/struct.Utf32String.html#method.capacity\" title=\"method widestring::utfstring::Utf32String::capacity\"><code>capacity</code></a> method. This\nmethod creates and empty string, but one with an initial buffer that can hold\n<code>capacity</code> elements. This is useful when you may be appending a bunch of data to\nthe string, reducing the number of reallocations it needs to do.</p>\n<p>If the given capacity is <code>0</code>, no allocation will occur, and this method is identical\nto the <a href=\"widestring/utfstring/struct.Utf32String.html#method.new\" title=\"associated function widestring::utfstring::Utf32String::new\"><code>new</code></a> method.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.from_vec_unchecked\" class=\"fn\">from_vec_unchecked</a>(v: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a> vector to a string without checking that the string contains valid\nUTF-32.</p>\n<p>See the safe version, <a href=\"widestring/utfstring/struct.Utf32String.html#method.from_vec\" title=\"associated function widestring::utfstring::Utf32String::from_vec\"><code>from_vec</code></a>, for more information.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This function is unsafe because it does not check that the vector passed to it is valid\nUTF-32. If this constraint is violated, undefined behavior results as it is assumed the\n<a href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\"><code>Utf32String</code></a> is always valid UTF-32.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::Utf32String;\n\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">0x1f496</span>];\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"kw\">unsafe </span>{ Utf32String::from_vec_unchecked(sparkle_heart) };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"💖\"</span>, sparkle_heart);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.from_str\" class=\"fn\">from_str</a>&lt;S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt;(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;S</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Re-encodes a UTF-8–encoded string slice into a UTF-32–encoded string.</p>\n<p>This operation is lossless and infallible, but requires a memory allocation.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::Utf32String;\n<span class=\"kw\">let </span>music = Utf32String::from_str(<span class=\"string\">\"𝄞music\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">utf32str!</span>(<span class=\"string\">\"𝄞music\"</span>), music);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_utfstr\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.as_utfstr\" class=\"fn\">as_utfstr</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a></h4></section></summary><div class=\"docblock\"><p>Converts a string into a string slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_utfstr\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.as_mut_utfstr\" class=\"fn\">as_mut_utfstr</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a></h4></section></summary><div class=\"docblock\"><p>Converts a string into a mutable string slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ustr\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.as_ustr\" class=\"fn\">as_ustr</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a></h4></section></summary><div class=\"docblock\"><p>Converts this string into a wide string of undefined encoding.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.into_vec\" class=\"fn\">into_vec</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string into a vector of its elements.</p>\n<p>This consumes the string without copying its contents.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_utfstr\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.push_utfstr\" class=\"fn\">push_utfstr</a>&lt;S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt;(&amp;mut self, string: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;S</a>)</h4></section></summary><div class=\"docblock\"><p>Appends a given string slice onto the end of this string.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::Utf32String;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = Utf32String::from_str(<span class=\"string\">\"foo\"</span>);\ns.push_utfstr(<span class=\"macro\">utf32str!</span>(<span class=\"string\">\"bar\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">utf32str!</span>(<span class=\"string\">\"foobar\"</span>), s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns this string’s capacity, in number of elements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Ensures that this string’s capacity is at least <code>additional</code> elements larger than\nits length.</p>\n<p>The capacity may be increased by more than <code>additional</code> elements if it chooses, to\nprevent frequent reallocations.</p>\n<p>If you do not want this “at least” behavior, see the\n<a href=\"widestring/utfstring/struct.Utf32String.html#method.reserve_exact\" title=\"method widestring::utfstring::Utf32String::reserve_exact\"><code>reserve_exact</code></a> method.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity overflows <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\" title=\"primitive usize\"><code>usize</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_exact\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.reserve_exact\" class=\"fn\">reserve_exact</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Ensures that this string’s capacity is <code>additional</code> elements larger than its length.</p>\n<p>Consider using the <a href=\"widestring/utfstring/struct.Utf32String.html#method.reserve\" title=\"method widestring::utfstring::Utf32String::reserve\"><code>reserve</code></a> method unless you absolutely know\nbetter than the allocator.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the new capacity overflows <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\" title=\"primitive usize\"><code>usize</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of this string to match its length.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.shrink_to\" class=\"fn\">shrink_to</a>(&amp;mut self, min_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of this string with a lower bound.</p>\n<p>The capacity will remain at least as large as both the length and the supplied\nvalue.</p>\n<p>If the current capacity is less than the lower limit, this is a no-op.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]</h4></section></summary><div class=\"docblock\"><p>Returns a slice of this string’s contents.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.as_mut_vec\" class=\"fn\">as_mut_vec</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the contents of this string.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This function is unsafe because it does not check that the values in the vector are valid\nUTF-16. If this constraint is violated, it may cause undefined beahvior with future\nusers of the string, as it is assumed that this string is always valid UTF-16.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the length of this string in number of elements, not <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s or\ngraphemes.</p>\n<p>In other words, it might not be what a human considers the length of the string.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this string has a length of zero, and <code>false</code> otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Truncates the string, removing all contents.</p>\n<p>While this means the string will have a length of zero, it does not touch its\ncapacity.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_utfstr\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.into_boxed_utfstr\" class=\"fn\">into_boxed_utfstr</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts this string into a boxed string slice.</p>\n<p>This will drop excess capacity.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_str\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.push_str\" class=\"fn\">push_str</a>&lt;S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt;(&amp;mut self, string: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;S</a>)</h4></section></summary><div class=\"docblock\"><p>Appends a given UTF-8 string slice onto the end of this string, converting it to\nUTF-16.</p>\n</div></details></div></details>",0,"widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1842-2543\">Source</a><a href=\"#impl-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1884-1887\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.from_vec\" class=\"fn\">from_vec</a>(v: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"widestring/error/struct.Utf32Error.html\" title=\"struct widestring::error::Utf32Error\">Utf32Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a> vector of UTF-32 data to a string.</p>\n<p>Not all slices of <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a> values are valid to convert, since <a href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\"><code>Utf32String</code></a> requires that\nit is always valid UTF-32. This function checks to ensure that the values are valid UTF-32,\nand then does the conversion. This does not do any copying.</p>\n<p>If you are sure that the slice is valid UTF-32, and you don’t want to incur the overhead of\nthe validity check, there is an unsafe version of this function,\n<a href=\"widestring/utfstring/struct.Utf32String.html#method.from_vec_unchecked\" title=\"associated function widestring::utfstring::Utf32String::from_vec_unchecked\"><code>from_vec_unchecked</code></a>, which has the same behavior but skips\nthe check.</p>\n<p>If you need a string slice, consider using <a href=\"widestring/utfstr/struct.Utf32Str.html#method.from_slice\" title=\"associated function widestring::utfstr::Utf32Str::from_slice\"><code>Utf32Str::from_slice</code></a> instead.</p>\n<p>The inverse of this method is <a href=\"widestring/utfstring/struct.Utf32String.html#method.into_vec\" title=\"method widestring::utfstring::Utf32String::into_vec\"><code>into_vec</code></a>.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if the vector is not UTF-32 with a description as to why the provided\nvector is not UTF-32. The error will contain the original <a href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> that can be reclaimed with\n<a href=\"widestring/error/struct.Utf32Error.html#method.into_vec\" title=\"method widestring::error::Utf32Error::into_vec\"><code>into_vec</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::Utf32String;\n\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">0x1f496</span>];\n<span class=\"kw\">let </span>sparkle_heart = Utf32String::from_vec(sparkle_heart).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"💖\"</span>, sparkle_heart);</code></pre></div>\n<p>With incorrect values that return an error:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::Utf32String;\n\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">0xd83d</span>, <span class=\"number\">0xdc96</span>]; <span class=\"comment\">// UTF-16 surrogates are invalid\n\n</span><span class=\"macro\">assert!</span>(Utf32String::from_vec(sparkle_heart).is_err());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice_lossy\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1930-1949\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.from_slice_lossy\" class=\"fn\">from_slice_lossy</a>(s: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a slice of <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a> data to a string, including invalid characters.</p>\n<p>Since the given <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a> slice may not be valid UTF-32, and <a href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\"><code>Utf32String</code></a> requires that\nit is always valid UTF-32, during the conversion this function replaces any invalid UTF-32\nsequences with <a href=\"https://doc.rust-lang.org/1.90.0/core/char/constant.REPLACEMENT_CHARACTER.html\" title=\"constant core::char::REPLACEMENT_CHARACTER\"><code>U+FFFD REPLACEMENT CHARACTER</code></a>, which\nlooks like this: �</p>\n<p>If you are sure that the slice is valid UTF-32, and you don’t want to incur the overhead of\nthe conversion, there is an unsafe version of this function,\n<a href=\"widestring/utfstring/struct.Utf32String.html#method.from_vec_unchecked\" title=\"associated function widestring::utfstring::Utf32String::from_vec_unchecked\"><code>from_vec_unchecked</code></a>, which has the same behavior but skips\nthe checks.</p>\n<p>This function returns a <a href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\"><code>Cow&lt;'_, Utf32Str&gt;</code></a>. If the given slice is\ninvalid UTF-32, then we need to insert our replacement characters which will change the size\nof the string, and hence, require an owned <a href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\"><code>Utf32String</code></a>. But if it’s already valid\nUTF-32, we don’t need a new allocation. This return type allows us to handle both cases.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::Utf32String;\n\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">0x1f496</span>];\n<span class=\"kw\">let </span>sparkle_heart = Utf32String::from_slice_lossy(<span class=\"kw-2\">&amp;</span>sparkle_heart);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">utf32str!</span>(<span class=\"string\">\"💖\"</span>), sparkle_heart);</code></pre></div>\n<p>With incorrect values that return an error:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::Utf32String;\n\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">0xd83d</span>, <span class=\"number\">0xdc96</span>]; <span class=\"comment\">// UTF-16 surrogates are invalid\n</span><span class=\"kw\">let </span>sparkle_heart = Utf32String::from_slice_lossy(<span class=\"kw-2\">&amp;</span>sparkle_heart);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">utf32str!</span>(<span class=\"string\">\"\\u{fffd}\\u{fffd}\"</span>), sparkle_heart);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ustring_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1975-1977\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.from_ustring_unchecked\" class=\"fn\">from_ustring_unchecked</a>(s: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"widestring/ustring/struct.U32String.html\" title=\"struct widestring::ustring::U32String\">U32String</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts a wide string of undefined encoding to a UTF-32 string without checking that the\nstring contains valid UTF-32.</p>\n<p>See the safe version, <a href=\"widestring/utfstring/struct.Utf32String.html#method.from_ustring\" title=\"associated function widestring::utfstring::Utf32String::from_ustring\"><code>from_ustring</code></a>, for more information.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This function is unsafe because it does not check that the string passed to it is valid\nUTF-32. If this constraint is violated, undefined behavior results as it is assumed the\n<a href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\"><code>Utf32String</code></a> is always valid UTF-32.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::{U32String, Utf32String};\n\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">0x1f496</span>];\n<span class=\"kw\">let </span>sparkle_heart = U32String::from_vec(sparkle_heart);\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"kw\">unsafe </span>{ Utf32String::from_ustring_unchecked(sparkle_heart) };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"💖\"</span>, sparkle_heart);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ustring\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2020-2022\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.from_ustring\" class=\"fn\">from_ustring</a>(s: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"widestring/ustring/struct.U32String.html\" title=\"struct widestring::ustring::U32String\">U32String</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"widestring/error/struct.Utf32Error.html\" title=\"struct widestring::error::Utf32Error\">Utf32Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a wide string of undefined encoding string into a UTF-32 string.</p>\n<p>Not all strings of undefined encoding are valid to convert, since <a href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\"><code>Utf32String</code></a> requires\nthat it is always valid UTF-32. This function checks to ensure that the string is valid\nUTF-32, and then does the conversion. This does not do any copying.</p>\n<p>If you are sure that the string is valid UTF-32, and you don’t want to incur the overhead of\nthe validity check, there is an unsafe version of this function,\n<a href=\"widestring/utfstring/struct.Utf32String.html#method.from_ustring_unchecked\" title=\"associated function widestring::utfstring::Utf32String::from_ustring_unchecked\"><code>from_ustring_unchecked</code></a>, which has the same behavior but\nskips the check.</p>\n<p>If you need a string slice, consider using <a href=\"widestring/utfstr/struct.Utf32Str.html#method.from_ustr\" title=\"associated function widestring::utfstr::Utf32Str::from_ustr\"><code>Utf32Str::from_ustr</code></a> instead.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>Returns an error if the string is not UTF-32 with a description as to why the provided\nstring is not UTF-32.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::{U32String, Utf32String};\n\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">0x1f496</span>];\n<span class=\"kw\">let </span>sparkle_heart = U32String::from_vec(sparkle_heart);\n<span class=\"kw\">let </span>sparkle_heart = Utf32String::from_ustring(sparkle_heart).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"💖\"</span>, sparkle_heart);</code></pre></div>\n<p>With incorrect values that return an error:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::{U32String, Utf32String};\n\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">0xd83d</span>, <span class=\"number\">0xdc96</span>]; <span class=\"comment\">// UTF-16 surrogates are invalid\n</span><span class=\"kw\">let </span>sparkle_heart = U32String::from_vec(sparkle_heart); <span class=\"comment\">// Valid for a U32String\n\n</span><span class=\"macro\">assert!</span>(Utf32String::from_ustring(sparkle_heart).is_err()); <span class=\"comment\">// But not for a Utf32String</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ustr_lossy\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2069-2071\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.from_ustr_lossy\" class=\"fn\">from_ustr_lossy</a>(s: &amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a wide string slice of undefined encoding to a UTF-32 string, including invalid\ncharacters.</p>\n<p>Since the given string slice may not be valid UTF-32, and <a href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\"><code>Utf32String</code></a> requires that\nit is always valid UTF-32, during the conversion this function replaces any invalid UTF-32\nsequences with <a href=\"https://doc.rust-lang.org/1.90.0/core/char/constant.REPLACEMENT_CHARACTER.html\" title=\"constant core::char::REPLACEMENT_CHARACTER\"><code>U+FFFD REPLACEMENT CHARACTER</code></a>, which\nlooks like this: �</p>\n<p>If you are sure that the slice is valid UTF-32, and you don’t want to incur the overhead of\nthe conversion, there is an unsafe version of this function,\n<a href=\"widestring/utfstring/struct.Utf32String.html#method.from_ustring_unchecked\" title=\"associated function widestring::utfstring::Utf32String::from_ustring_unchecked\"><code>from_ustring_unchecked</code></a>, which has the same behavior but\nskips the checks.</p>\n<p>This function returns a <a href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\"><code>Cow&lt;'_, Utf32Str&gt;</code></a>. If the given slice is\ninvalid UTF-32, then we need to insert our replacement characters which will change the size\nof the string, and hence, require an owned <a href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\"><code>Utf32String</code></a>. But if it’s already valid\nUTF-32, we don’t need a new allocation. This return type allows us to handle both cases.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::{U32Str, Utf32String};\n\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">0x1f496</span>];\n<span class=\"kw\">let </span>sparkle_heart = U32Str::from_slice(<span class=\"kw-2\">&amp;</span>sparkle_heart);\n<span class=\"kw\">let </span>sparkle_heart = Utf32String::from_ustr_lossy(sparkle_heart);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">utf32str!</span>(<span class=\"string\">\"💖\"</span>), sparkle_heart);</code></pre></div>\n<p>With incorrect values that return an error:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::{U32Str, Utf32String};\n\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">0xd83d</span>, <span class=\"number\">0xdc96</span>]; <span class=\"comment\">// UTF-16 surrogates are invalid\n</span><span class=\"kw\">let </span>sparkle_heart = U32Str::from_slice(<span class=\"kw-2\">&amp;</span>sparkle_heart);\n<span class=\"kw\">let </span>sparkle_heart = Utf32String::from_ustr_lossy(sparkle_heart);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">utf32str!</span>(<span class=\"string\">\"\\u{fffd}\\u{fffd}\"</span>), sparkle_heart);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ucstring_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2099-2101\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.from_ucstring_unchecked\" class=\"fn\">from_ucstring_unchecked</a>(s: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts a wide C string to a UTF-32 string without checking that the string contains\nvalid UTF-32.</p>\n<p>The resulting string does <em>not</em> contain the nul terminator.</p>\n<p>See the safe version, <a href=\"widestring/utfstring/struct.Utf32String.html#method.from_ucstring\" title=\"associated function widestring::utfstring::Utf32String::from_ucstring\"><code>from_ucstring</code></a>, for more information.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This function is unsafe because it does not check that the string passed to it is valid\nUTF-32. If this constraint is violated, undefined behavior results as it is assumed the\n<a href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\"><code>Utf32String</code></a> is always valid UTF-32.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::{U32CString, Utf32String};\n\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">0x1f496</span>];\n<span class=\"kw\">let </span>sparkle_heart = U32CString::from_vec(sparkle_heart).unwrap();\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"kw\">unsafe </span>{ Utf32String::from_ucstring_unchecked(sparkle_heart) };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"💖\"</span>, sparkle_heart);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ucstring\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2146-2148\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.from_ucstring\" class=\"fn\">from_ucstring</a>(s: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"widestring/error/struct.Utf32Error.html\" title=\"struct widestring::error::Utf32Error\">Utf32Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a wide C string into a UTF-32 string.</p>\n<p>The resulting string does <em>not</em> contain the nul terminator.</p>\n<p>Not all wide C strings are valid to convert, since <a href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\"><code>Utf32String</code></a> requires that\nit is always valid UTF-32. This function checks to ensure that the string is valid UTF-32,\nand then does the conversion. This does not do any copying.</p>\n<p>If you are sure that the string is valid UTF-32, and you don’t want to incur the overhead of\nthe validity check, there is an unsafe version of this function,\n<a href=\"widestring/utfstring/struct.Utf32String.html#method.from_ucstring_unchecked\" title=\"associated function widestring::utfstring::Utf32String::from_ucstring_unchecked\"><code>from_ucstring_unchecked</code></a>, which has the same behavior but\nskips the check.</p>\n<p>If you need a string slice, consider using <a href=\"widestring/utfstr/struct.Utf32Str.html#method.from_ucstr\" title=\"associated function widestring::utfstr::Utf32Str::from_ucstr\"><code>Utf32Str::from_ucstr</code></a> instead.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>Returns an error if the string is not UTF-32 with a description as to why the provided\nstring is not UTF-32.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::{U32CString, Utf32String};\n\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">0x1f496</span>];\n<span class=\"kw\">let </span>sparkle_heart = U32CString::from_vec(sparkle_heart).unwrap();\n<span class=\"kw\">let </span>sparkle_heart = Utf32String::from_ucstring(sparkle_heart).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"💖\"</span>, sparkle_heart);</code></pre></div>\n<p>With incorrect values that return an error:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::{U32CString, Utf32String};\n\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">0xd83d</span>, <span class=\"number\">0xdc96</span>]; <span class=\"comment\">// UTF-16 surrogates are invalid\n</span><span class=\"kw\">let </span>sparkle_heart = U32CString::from_vec(sparkle_heart).unwrap(); <span class=\"comment\">// Valid for a U32CString\n\n</span><span class=\"macro\">assert!</span>(Utf32String::from_ucstring(sparkle_heart).is_err()); <span class=\"comment\">// But not for a Utf32String</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ucstr_lossy\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2196-2198\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.from_ucstr_lossy\" class=\"fn\">from_ucstr_lossy</a>(s: &amp;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a wide C string slice of to a UTF-32 string, including invalid characters.</p>\n<p>The resulting string does <em>not</em> contain the nul terminator.</p>\n<p>Since the given string slice may not be valid UTF-32, and <a href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\"><code>Utf32String</code></a> requires that\nit is always valid UTF-32, during the conversion this function replaces any invalid UTF-32\nsequences with <a href=\"https://doc.rust-lang.org/1.90.0/core/char/constant.REPLACEMENT_CHARACTER.html\" title=\"constant core::char::REPLACEMENT_CHARACTER\"><code>U+FFFD REPLACEMENT CHARACTER</code></a>, which\nlooks like this: �</p>\n<p>If you are sure that the slice is valid UTF-32, and you don’t want to incur the overhead of\nthe conversion, there is an unsafe version of this function,\n<a href=\"widestring/utfstring/struct.Utf32String.html#method.from_ucstring_unchecked\" title=\"associated function widestring::utfstring::Utf32String::from_ucstring_unchecked\"><code>from_ucstring_unchecked</code></a>, which has the same behavior but\nskips the checks.</p>\n<p>This function returns a <a href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\"><code>Cow&lt;'_, Utf32Str&gt;</code></a>. If the given slice is\ninvalid UTF-32, then we need to insert our replacement characters which will change the size\nof the string, and hence, require an owned <a href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\"><code>Utf32String</code></a>. But if it’s already valid\nUTF-32, we don’t need a new allocation. This return type allows us to handle both cases.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::{U32CStr, Utf32String};\n\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">0x1f496</span>, <span class=\"number\">0x0</span>];\n<span class=\"kw\">let </span>sparkle_heart = U32CStr::from_slice(<span class=\"kw-2\">&amp;</span>sparkle_heart).unwrap();\n<span class=\"kw\">let </span>sparkle_heart = Utf32String::from_ucstr_lossy(sparkle_heart);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">utf32str!</span>(<span class=\"string\">\"💖\"</span>), sparkle_heart);</code></pre></div>\n<p>With incorrect values that return an error:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::{U32CStr, Utf32String};\n\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">0xd83d</span>, <span class=\"number\">0xdc96</span>, <span class=\"number\">0x0</span>]; <span class=\"comment\">// UTF-16 surrogates are invalid\n</span><span class=\"kw\">let </span>sparkle_heart = U32CStr::from_slice(<span class=\"kw-2\">&amp;</span>sparkle_heart).unwrap();\n<span class=\"kw\">let </span>sparkle_heart = Utf32String::from_ucstr_lossy(sparkle_heart);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">utf32str!</span>(<span class=\"string\">\"\\u{fffd}\\u{fffd}\"</span>), sparkle_heart);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_chars\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2218-2228\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.from_chars\" class=\"fn\">from_chars</a>(s: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>&gt;&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts a vector of <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s into a UTF-32 string.</p>\n<p>Since <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s are always valid UTF-32, this is infallible and efficient.</p>\n<p>If you need a string slice, consider using <a href=\"widestring/utfstr/struct.Utf32Str.html#method.from_char_slice\" title=\"associated function widestring::utfstr::Utf32Str::from_char_slice\"><code>Utf32Str::from_char_slice</code></a> instead.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::{U32CString, Utf32String};\n\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"string\">'💖'</span>];\n<span class=\"kw\">let </span>sparkle_heart = Utf32String::from_chars(sparkle_heart);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"💖\"</span>, sparkle_heart);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2245-2247\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, ch: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>)</h4></section></summary><div class=\"docblock\"><p>Appends the given <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> to the end of this string.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::Utf32String;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = Utf32String::from_str(<span class=\"string\">\"abc\"</span>);\n\ns.push(<span class=\"string\">'1'</span>);\ns.push(<span class=\"string\">'2'</span>);\ns.push(<span class=\"string\">'3'</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"abc123\"</span>, s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2264-2266\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.truncate\" class=\"fn\">truncate</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens this string to the specified length.</p>\n<p>If <code>new_len</code> is greater than the string’s current length, this has no effect.</p>\n<p>Note that this method has no effect on the allocated capacity of the string.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::Utf32String;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = Utf32String::from_str(<span class=\"string\">\"hello\"</span>);\ns.truncate(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"he\"</span>, s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2285-2290\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the last character from the string buffer and returns it.</p>\n<p>Returns <a href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if this string is empty.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::Utf32String;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = Utf32String::from_str(<span class=\"string\">\"foo\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(s.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">'o'</span>));\n<span class=\"macro\">assert_eq!</span>(s.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">'o'</span>));\n<span class=\"macro\">assert_eq!</span>(s.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">'f'</span>));\n\n<span class=\"macro\">assert_eq!</span>(s.pop(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2311-2324\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a></h4></section></summary><div class=\"docblock\"><p>Removes a <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> from this string at an offset and returns it.</p>\n<p>This is an <em>O(n)</em> operation, as it requires copying every element in the buffer.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>idx</code> is larger than or equal to the string’s length.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::Utf32String;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = Utf32String::from_str(<span class=\"string\">\"foo\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(s.remove(<span class=\"number\">1</span>), <span class=\"string\">'o'</span>);\n<span class=\"macro\">assert_eq!</span>(s.remove(<span class=\"number\">0</span>), <span class=\"string\">'f'</span>);\n<span class=\"macro\">assert_eq!</span>(s.remove(<span class=\"number\">0</span>), <span class=\"string\">'o'</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2354-2371\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the characters specified by the predicate.</p>\n<p>In other words, remove all characters <code>c</code> such that <code>f(c)</code> returns <code>false</code>. This method\noperates in place, visiting each character exactly once in the original order, and preserves\nthe order of the retained characters.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::Utf32String;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = Utf32String::from_str(<span class=\"string\">\"f_o_ob_ar\"</span>);\n\ns.retain(|c| c != <span class=\"string\">'_'</span>);\n\n<span class=\"macro\">assert_eq!</span>(s, <span class=\"string\">\"foobar\"</span>);</code></pre></div>\n<p>Because the elements are visited exactly once in the original order, external state may be\nused to decide which elements to keep.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::Utf32String;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = Utf32String::from_str(<span class=\"string\">\"abcde\"</span>);\n<span class=\"kw\">let </span>keep = [<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = keep.iter();\ns.retain(|<span class=\"kw\">_</span>| <span class=\"kw-2\">*</span>iter.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(s, <span class=\"string\">\"bce\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2394-2398\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>, ch: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>)</h4></section></summary><div class=\"docblock\"><p>Inserts a character into this string at an offset.</p>\n<p>This is an <em>O(n)</em> operation as it requires copying every element in the buffer.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>idx</code> is larger than the string’s length.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::Utf32String;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = Utf32String::with_capacity(<span class=\"number\">3</span>);\n\ns.insert(<span class=\"number\">0</span>, <span class=\"string\">'f'</span>);\ns.insert(<span class=\"number\">1</span>, <span class=\"string\">'o'</span>);\ns.insert(<span class=\"number\">1</span>, <span class=\"string\">'o'</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foo\"</span>, s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_utfstr\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2420-2424\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.insert_utfstr\" class=\"fn\">insert_utfstr</a>(&amp;mut self, idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>, string: &amp;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>)</h4></section></summary><div class=\"docblock\"><p>Inserts a UTF-32 string slice into this string at an offset.</p>\n<p>This is an <em>O(n)</em> operation as it requires copying every element in the buffer.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>idx</code> is larger than the string’s length.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::Utf32String;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = Utf32String::from_str(<span class=\"string\">\"bar\"</span>);\n\ns.insert_utfstr(<span class=\"number\">0</span>, <span class=\"macro\">utf32str!</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foobar\"</span>, s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_off\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2448-2450\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.split_off\" class=\"fn\">split_off</a>(&amp;mut self, at: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Splits the string into two at the given index.</p>\n<p>Returns a newly allocated string. <code>self</code> contains elements [0, at), and the returned string\ncontains elements [at, len).</p>\n<p>Note that the capacity of <code>self</code> does not change.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>at</code>it is beyond the last code point of the string.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::Utf32String;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hello = Utf32String::from_str(<span class=\"string\">\"Hello, World!\"</span>);\n<span class=\"kw\">let </span>world = hello.split_off(<span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(hello, <span class=\"string\">\"Hello, \"</span>);\n<span class=\"macro\">assert_eq!</span>(world, <span class=\"string\">\"World!\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2479-2499\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.drain\" class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"struct\" href=\"widestring/utfstring/struct.DrainUtf32.html\" title=\"struct widestring::utfstring::DrainUtf32\">DrainUtf32</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"DrainUtf32&lt;&#39;_&gt;\">ⓘ</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a draining iterator that removes the specified range in the string and yields the\nremoved <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s.</p>\n<p>Note: The element range is removed even if the iterator is not consumed until the end.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if the starting point or end point are out of bounds.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::Utf32String;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = Utf32String::from_str(<span class=\"string\">\"α is alpha, β is beta\"</span>);\n<span class=\"kw\">let </span>beta_offset = <span class=\"number\">12</span>;\n\n<span class=\"comment\">// Remove the range up until the β from the string\n</span><span class=\"kw\">let </span>t: Utf32String = s.drain(..beta_offset).collect();\n<span class=\"macro\">assert_eq!</span>(t, <span class=\"string\">\"α is alpha, \"</span>);\n<span class=\"macro\">assert_eq!</span>(s, <span class=\"string\">\"β is beta\"</span>);\n\n<span class=\"comment\">// A full range clears the string\n</span>s.drain(..);\n<span class=\"macro\">assert_eq!</span>(s, <span class=\"string\">\"\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_range\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2523-2529\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.replace_range\" class=\"fn\">replace_range</a>&lt;R&gt;(&amp;mut self, range: R, replace_with: &amp;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>)<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Removes the specified range in the string, and replaces it with the given string.</p>\n<p>The given string doesn’t need to be the same length as the range.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>Panics if the starting point or end point are out of bounds.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::{utf32str, Utf32String};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = Utf32String::from_str(<span class=\"string\">\"α is alpha, β is beta\"</span>);\n<span class=\"kw\">let </span>beta_offset = <span class=\"number\">12</span>;\n\n<span class=\"comment\">// Replace the range up until the β from the string\n</span>s.replace_range(..beta_offset, <span class=\"macro\">utf32str!</span>(<span class=\"string\">\"Α is capital alpha; \"</span>));\n<span class=\"macro\">assert_eq!</span>(s, <span class=\"string\">\"Α is capital alpha; β is beta\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_char_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#2537-2542\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/utfstring/struct.Utf32String.html#tymethod.into_char_vec\" class=\"fn\">into_char_vec</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts string into a <a href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> of <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s.</p>\n<p>This consumes the string without copying its contents.</p>\n</div></details></div></details>",0,"widestring::utfstring::WideUtfString"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Write-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Write-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Write.html\" title=\"trait core::fmt::Write\">Write</a> for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.write_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Write.html#tymethod.write_str\" class=\"fn\">write_str</a>(&amp;mut self, s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Writes a string slice into this writer, returning whether the write\nsucceeded. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Write.html#tymethod.write_str\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_char\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.write_char\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Write.html#method.write_char\" class=\"fn\">write_char</a>(&amp;mut self, c: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Writes a <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> into this writer, returning whether the write succeeded. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Write.html#method.write_char\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/fmt/mod.rs.html#209\">Source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, args: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Arguments.html\" title=\"struct core::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Glue for usage of the <a href=\"https://doc.rust-lang.org/1.90.0/core/macro.write.html\" title=\"macro core::write\"><code>write!</code></a> macro with implementors of this trait. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Write.html#method.write_fmt\">Read more</a></div></details></div></details>","Write","widestring::utfstring::WideUtfString"],["<section id=\"impl-Eq-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-Eq-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section>","Eq","widestring::utfstring::WideUtfString"],["<section id=\"impl-StructuralPartialEq-for-Utf32String\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-StructuralPartialEq-for-Utf32String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a></h3></section>","StructuralPartialEq","widestring::utfstring::WideUtfString"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[241695]}