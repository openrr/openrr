(function() {
    var type_impls = Object.fromEntries([["widestring",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CU32CStr%3E-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#impl-AsMut%3CU32CStr%3E-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt; for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<U32CStr>","widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5Bu32%5D%3E-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#impl-AsRef%3C%5Bu32%5D%3E-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]&gt; for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[u32]>","widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CU32CStr%3E-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#impl-AsRef%3CU32CStr%3E-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt; for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;Self</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<U32CStr>","widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CU32Str%3E-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#impl-AsRef%3CU32Str%3E-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt; for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<U32Str>","widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1961-1966\">Source</a><a href=\"#impl-Debug-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1963-1965\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#impl-Hash-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut __H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details></div></details>","Hash","widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CI%3E-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#impl-Index%3CI%3E-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt; for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>], Output = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<I>","widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#impl-Ord-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details></div></details>","Ord","widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26U32CStr%3E-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#impl-PartialEq%3C%26U32CStr%3E-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt; for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&U32CStr>","widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26U32Str%3E-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#impl-PartialEq%3C%26U32Str%3E-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt; for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&U32Str>","widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CU32CString%3E-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-PartialEq%3CU32CString%3E-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a>&gt; for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<U32CString>","widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CU32Str%3E-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#impl-PartialEq%3CU32Str%3E-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt; for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<U32Str>","widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CU32String%3E-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ustring.rs.html#1042-1167\">Source</a><a href=\"#impl-PartialEq%3CU32String%3E-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"widestring/ustring/struct.U32String.html\" title=\"struct widestring::ustring::U32String\">U32String</a>&gt; for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ustring.rs.html#1042-1167\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ustring/struct.U32String.html\" title=\"struct widestring::ustring::U32String\">U32String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<U32String>","widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CUtf32Str%3E-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstr.rs.html#650-827\">Source</a><a href=\"#impl-PartialEq%3CUtf32Str%3E-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>&gt; for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstr.rs.html#650-827\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/utfstr/struct.Utf32Str.html\" title=\"struct widestring::utfstr::Utf32Str\">Utf32Str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Utf32Str>","widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CUtf32String%3E-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#impl-PartialEq%3CUtf32String%3E-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a>&gt; for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/utfstring.rs.html#1001-1109\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/utfstring/struct.Utf32String.html\" title=\"struct widestring::utfstring::Utf32String\">Utf32String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Utf32String>","widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#impl-PartialEq-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CU32Str%3E-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#impl-PartialOrd%3CU32Str%3E-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt; for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<U32Str>","widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#impl-PartialOrd-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToOwned-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#impl-ToOwned-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a> for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h4></section></summary><div class='docblock'>The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/widestring/ucstring.rs.html#832-993\">Source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h4></section></summary><div class='docblock'>Creates owned data from borrowed data, usually by cloning. <a href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/alloc/borrow.rs.html#76\">Source</a></span><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: &amp;mut Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned\" title=\"type alloc::borrow::ToOwned::Owned\">Owned</a>)</h4></section></summary><div class='docblock'>Uses borrowed data to replace owned data, usually by cloning. <a href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details>","ToOwned","widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#impl-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUL_TERMINATOR\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub const <a href=\"widestring/ucstr/struct.U32CStr.html#associatedconstant.NUL_TERMINATOR\" class=\"constant\">NUL_TERMINATOR</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a> = 0u32</h4></section></summary><div class=\"docblock\"><p>The nul terminator character value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.new\" class=\"fn\">new</a>&lt;S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt;(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;S</a>) -&gt; &amp;Self</h4></section></summary><div class=\"docblock\"><p>Coerces a value into a wide C string slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ptr_str\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_ptr_str\" class=\"fn\">from_ptr_str</a>&lt;'a&gt;(p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>) -&gt; &amp;'a Self</h4></section></summary><div class=\"docblock\"><p>Constructs a wide C string slice from a nul-terminated string pointer.</p>\n<p>This will scan for nul values beginning with <code>p</code>. The first nul value will be used\nas the nul terminator for the string, similar to how libc string functions such as\n<code>strlen</code> work.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid or\nhas a nul terminator, and the function could scan past the underlying buffer.</p>\n<p>In addition, the data must meet the safety conditions of\n<a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\">std::slice::from_raw_parts</a>. In particular, the returned string reference <em>must not\nbe mutated</em> for the duration of lifetime <code>'a</code>, except inside an\n<a href=\"https://doc.rust-lang.org/1.90.0/core/cell/struct.UnsafeCell.html\" title=\"struct core::cell::UnsafeCell\"><code>UnsafeCell</code></a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function panics if <code>p</code> is null.</p>\n<h5 id=\"caveat\"><a class=\"doc-anchor\" href=\"#caveat\">§</a>Caveat</h5>\n<p>The lifetime for the returned string is inferred from its usage. To prevent\naccidental misuse, it’s suggested to tie the lifetime to whichever source lifetime\nis safe in the context, such as by providing a helper function taking the lifetime\nof a host value for the string, or by explicit annotation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ptr_str_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_ptr_str_mut\" class=\"fn\">from_ptr_str_mut</a>&lt;'a&gt;(p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>) -&gt; &amp;'a mut Self</h4></section></summary><div class=\"docblock\"><p>Constructs a mutable wide C string slice from a mutable nul-terminated string\npointer.</p>\n<p>This will scan for nul values beginning with <code>p</code>. The first nul value will be used\nas the nul terminator for the string, similar to how libc string functions such as\n<code>strlen</code> work.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid or\nhas a nul terminator, and the function could scan past the underlying buffer.</p>\n<p>In addition, the data must meet the safety conditions of\n<a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts_mut.html\" title=\"fn core::slice::raw::from_raw_parts_mut\">std::slice::from_raw_parts_mut</a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>This function panics if <code>p</code> is null.</p>\n<h5 id=\"caveat-1\"><a class=\"doc-anchor\" href=\"#caveat-1\">§</a>Caveat</h5>\n<p>The lifetime for the returned string is inferred from its usage. To prevent\naccidental misuse, it’s suggested to tie the lifetime to whichever source lifetime\nis safe in the context, such as by providing a helper function taking the lifetime\nof a host value for the string, or by explicit annotation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_ptr\" class=\"fn\">from_ptr</a>&lt;'a&gt;(\n    p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a Self, <a class=\"enum\" href=\"widestring/error/enum.NulError.html\" title=\"enum widestring::error::NulError\">NulError</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a wide C string slice from a pointer and a length.</p>\n<p>The <code>len</code> argument is the number of elements, <strong>not</strong> the number of bytes, and does\n<strong>not</strong> include the nul terminator of the string. Thus, a <code>len</code> of 0 is valid and\nmeans that <code>p</code> is a pointer directly to the nul terminator of the string.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>This will scan the pointer string for an interior nul value and error if one is\nfound before the nul terminator at <code>len</code> offset. To avoid scanning for interior\nnuls, <a href=\"widestring/ucstr/struct.U32CStr.html#method.from_ptr_unchecked\" title=\"associated function widestring::ucstr::U32CStr::from_ptr_unchecked\"><code>from_ptr_unchecked</code></a> may be used instead.</p>\n<p>An error is returned if the value at <code>len</code> offset is not a nul terminator.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid for\n<code>len + 1</code> elements.</p>\n<p>In addition, the data must meet the safety conditions of\n<a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\">std::slice::from_raw_parts</a>. In particular, the returned string reference <em>must not\nbe mutated</em> for the duration of lifetime <code>'a</code>, except inside an\n<a href=\"https://doc.rust-lang.org/1.90.0/core/cell/struct.UnsafeCell.html\" title=\"struct core::cell::UnsafeCell\"><code>UnsafeCell</code></a>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>This function panics if <code>p</code> is null.</p>\n<h5 id=\"caveat-2\"><a class=\"doc-anchor\" href=\"#caveat-2\">§</a>Caveat</h5>\n<p>The lifetime for the returned string is inferred from its usage. To prevent\naccidental misuse, it’s suggested to tie the lifetime to whichever source lifetime\nis safe in the context, such as by providing a helper function taking the lifetime\nof a host value for the string, or by explicit annotation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ptr_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_ptr_mut\" class=\"fn\">from_ptr_mut</a>&lt;'a&gt;(\n    p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a mut Self, <a class=\"enum\" href=\"widestring/error/enum.NulError.html\" title=\"enum widestring::error::NulError\">NulError</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a mutable wide C string slice from a mutable pointer and a length.</p>\n<p>The <code>len</code> argument is the number of elements, <strong>not</strong> the number of bytes, and does\n<strong>not</strong> include the nul terminator of the string. Thus, a <code>len</code> of 0 is valid and\nmeans that <code>p</code> is a pointer directly to the nul terminator of the string.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>This will scan the pointer string for an interior nul value and error if one is\nfound before the nul terminator at <code>len</code> offset. To avoid scanning for interior\nnuls, <a href=\"widestring/ucstr/struct.U32CStr.html#method.from_ptr_unchecked_mut\" title=\"associated function widestring::ucstr::U32CStr::from_ptr_unchecked_mut\"><code>from_ptr_unchecked_mut</code></a> may be used instead.</p>\n<p>An error is returned if the value at <code>len</code> offset is not a nul terminator.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid for\n<code>len + 1</code> elements.</p>\n<p>In addition, the data must meet the safety conditions of\n<a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts_mut.html\" title=\"fn core::slice::raw::from_raw_parts_mut\">std::slice::from_raw_parts_mut</a>.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>This function panics if <code>p</code> is null.</p>\n<h5 id=\"caveat-3\"><a class=\"doc-anchor\" href=\"#caveat-3\">§</a>Caveat</h5>\n<p>The lifetime for the returned string is inferred from its usage. To prevent\naccidental misuse, it’s suggested to tie the lifetime to whichever source lifetime\nis safe in the context, such as by providing a helper function taking the lifetime\nof a host value for the string, or by explicit annotation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ptr_truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_ptr_truncate\" class=\"fn\">from_ptr_truncate</a>&lt;'a&gt;(\n    p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a Self, <a class=\"struct\" href=\"widestring/error/struct.MissingNulTerminator.html\" title=\"struct widestring::error::MissingNulTerminator\">MissingNulTerminator</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a wide C string slice from a pointer and a length, truncating at the\nfirst nul terminator.</p>\n<p>The <code>len</code> argument is the number of elements, <strong>not</strong> the number of bytes. This will\nscan for nul values beginning with <code>p</code> until offset <code>len</code>. The first nul value will\nbe used as the nul terminator for the string, ignoring any remaining values left\nbefore <code>len</code>.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>If no nul terminator is found after <code>len</code> + 1 elements, an error is returned.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid or\nhas a nul terminator, and the function could scan past the underlying buffer.</p>\n<p>In addition, the data must meet the safety conditions of\n<a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\">std::slice::from_raw_parts</a>. In particular, the returned string reference <em>must not\nbe mutated</em> for the duration of lifetime <code>'a</code>, except inside an\n<a href=\"https://doc.rust-lang.org/1.90.0/core/cell/struct.UnsafeCell.html\" title=\"struct core::cell::UnsafeCell\"><code>UnsafeCell</code></a>.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>This function panics if <code>p</code> is null.</p>\n<h5 id=\"caveat-4\"><a class=\"doc-anchor\" href=\"#caveat-4\">§</a>Caveat</h5>\n<p>The lifetime for the returned string is inferred from its usage. To prevent\naccidental misuse, it’s suggested to tie the lifetime to whichever source lifetime\nis safe in the context, such as by providing a helper function taking the lifetime\nof a host value for thev string, or by explicit annotation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ptr_truncate_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_ptr_truncate_mut\" class=\"fn\">from_ptr_truncate_mut</a>&lt;'a&gt;(\n    p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a mut Self, <a class=\"struct\" href=\"widestring/error/struct.MissingNulTerminator.html\" title=\"struct widestring::error::MissingNulTerminator\">MissingNulTerminator</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a mutable wide C string slice from a mutable pointer and a length,\ntruncating at the first nul terminator.</p>\n<p>The <code>len</code> argument is the number of elements, <strong>not</strong> the number of bytes. This will\nscan for nul values beginning with <code>p</code> until offset <code>len</code>. The first nul value will\nbe used as the nul terminator for the string, ignoring any remaining values left\nbefore <code>len</code>.</p>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h5>\n<p>If no nul terminator is found after <code>len</code> + 1 elements, an error is returned.</p>\n<h5 id=\"safety-5\"><a class=\"doc-anchor\" href=\"#safety-5\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid or\nhas a nul terminator, and the function could scan past the underlying buffer.</p>\n<p>In addition, the data must meet the safety conditions of\n<a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts_mut.html\" title=\"fn core::slice::raw::from_raw_parts_mut\">std::slice::from_raw_parts_mut</a>.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>This function panics if <code>p</code> is null.</p>\n<h5 id=\"caveat-5\"><a class=\"doc-anchor\" href=\"#caveat-5\">§</a>Caveat</h5>\n<p>The lifetime for the returned string is inferred from its usage. To prevent\naccidental misuse, it’s suggested to tie the lifetime to whichever source lifetime\nis safe in the context, such as by providing a helper function taking the lifetime\nof a host value for the string, or by explicit annotation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ptr_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_ptr_unchecked\" class=\"fn\">from_ptr_unchecked</a>&lt;'a&gt;(p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; &amp;'a Self</h4></section></summary><div class=\"docblock\"><p>Constructs a wide C string slice from a pointer and a length without checking for\nany nul values.</p>\n<p>The <code>len</code> argument is the number of elements, <strong>not</strong> the number of bytes, and does\n<strong>not</strong> include the nul terminator of the string. Thus, a <code>len</code> of 0 is valid and\nmeans that <code>p</code> is a pointer directly to the nul terminator of the string.</p>\n<h5 id=\"safety-6\"><a class=\"doc-anchor\" href=\"#safety-6\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid for\n<code>len + 1</code> elements, nor that it has a terminating nul value.</p>\n<p>In addition, the data must meet the safety conditions of\n<a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\">std::slice::from_raw_parts</a>. In particular, the returned string reference <em>must not\nbe mutated</em> for the duration of lifetime <code>'a</code>, except inside an\n<a href=\"https://doc.rust-lang.org/1.90.0/core/cell/struct.UnsafeCell.html\" title=\"struct core::cell::UnsafeCell\"><code>UnsafeCell</code></a>.</p>\n<p>The interior values of the pointer are not scanned for nul. Any interior nul values\nor a missing nul terminator at pointer offset <code>len</code> + 1 will result in an invalid\nstring slice.</p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h5>\n<p>This function panics if <code>p</code> is null.</p>\n<h5 id=\"caveat-6\"><a class=\"doc-anchor\" href=\"#caveat-6\">§</a>Caveat</h5>\n<p>The lifetime for the returned string is inferred from its usage. To prevent\naccidental misuse, it’s suggested to tie the lifetime to whichever source lifetime\nis safe in the context, such as by providing a helper function taking the lifetime\nof a host value for the string, or by explicit annotation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ptr_unchecked_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_ptr_unchecked_mut\" class=\"fn\">from_ptr_unchecked_mut</a>&lt;'a&gt;(\n    p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>,\n) -&gt; &amp;'a mut Self</h4></section></summary><div class=\"docblock\"><p>Constructs a mutable wide C string slice from a mutable pointer and a length without\nchecking for any nul values.</p>\n<p>The <code>len</code> argument is the number of elements, <strong>not</strong> the number of bytes, and does\n<strong>not</strong> include the nul terminator of the string. Thus, a <code>len</code> of 0 is valid and\nmeans that <code>p</code> is a pointer directly to the nul terminator of the string.</p>\n<h5 id=\"safety-7\"><a class=\"doc-anchor\" href=\"#safety-7\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid for\n<code>len + 1</code> elements, nor that is has a terminating nul value.</p>\n<p>In addition, the data must meet the safety conditions of\n<a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts_mut.html\" title=\"fn core::slice::raw::from_raw_parts_mut\">std::slice::from_raw_parts_mut</a>.</p>\n<p>The interior values of the pointer are not scanned for nul. Any interior nul values\nor a missing nul terminator at pointer offset <code>len</code> + 1 will result in an invalid\nstring slice.</p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h5>\n<p>This function panics if <code>p</code> is null.</p>\n<h5 id=\"caveat-7\"><a class=\"doc-anchor\" href=\"#caveat-7\">§</a>Caveat</h5>\n<p>The lifetime for the returned string is inferred from its usage. To prevent\naccidental misuse, it’s suggested to tie the lifetime to whichever source lifetime\nis safe in the context, such as by providing a helper function taking the lifetime\nof a host value for the string, or by explicit annotation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_slice\" class=\"fn\">from_slice</a>(slice: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;Self, <a class=\"enum\" href=\"widestring/error/enum.NulError.html\" title=\"enum widestring::error::NulError\">NulError</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a wide C string slice from a slice of values with a terminating nul,\nchecking for invalid interior nul values.</p>\n<p>The slice must have at least one item, the nul terminator, even for an empty string.</p>\n<h5 id=\"errors-4\"><a class=\"doc-anchor\" href=\"#errors-4\">§</a>Errors</h5>\n<p>If there are nul values in the slice except for the last value, an error is\nreturned.</p>\n<p>An error is also returned if the last value of the slice is not a nul terminator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_slice_mut\" class=\"fn\">from_slice_mut</a>(slice: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Self, <a class=\"enum\" href=\"widestring/error/enum.NulError.html\" title=\"enum widestring::error::NulError\">NulError</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a mutable wide C string slice from a mutable slice of values with a\nterminating nul, checking for invalid interior nul values.</p>\n<p>The slice must have at least one item, the nul terminator, even for an empty string.</p>\n<h5 id=\"errors-5\"><a class=\"doc-anchor\" href=\"#errors-5\">§</a>Errors</h5>\n<p>If there are nul values in the slice except for the last value, an error is\nreturned.</p>\n<p>An error is also returned if the last value of the slice is not a nul terminator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice_truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_slice_truncate\" class=\"fn\">from_slice_truncate</a>(slice: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;Self, <a class=\"struct\" href=\"widestring/error/struct.MissingNulTerminator.html\" title=\"struct widestring::error::MissingNulTerminator\">MissingNulTerminator</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a wide C string slice from a slice of values, truncating at the first nul\nterminator.</p>\n<p>The slice will be scanned for nul values. When a nul value is found, it is treated\nas the terminator for the string, and the string slice will be truncated to that\nnul.</p>\n<h5 id=\"errors-6\"><a class=\"doc-anchor\" href=\"#errors-6\">§</a>Errors</h5>\n<p>If there are no nul values in the slice, an error is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice_truncate_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_slice_truncate_mut\" class=\"fn\">from_slice_truncate_mut</a>(\n    slice: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Self, <a class=\"struct\" href=\"widestring/error/struct.MissingNulTerminator.html\" title=\"struct widestring::error::MissingNulTerminator\">MissingNulTerminator</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a mutable wide C string slice from a mutable slice of values, truncating\nat the first nul terminator.</p>\n<p>The slice will be scanned for nul values. When a nul value is found, it is treated\nas the terminator for the string, and the string slice will be truncated to that\nnul.</p>\n<h5 id=\"errors-7\"><a class=\"doc-anchor\" href=\"#errors-7\">§</a>Errors</h5>\n<p>If there are no nul values in the slice, an error is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_slice_unchecked\" class=\"fn\">from_slice_unchecked</a>(slice: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]) -&gt; &amp;Self</h4></section></summary><div class=\"docblock\"><p>Constructs a wide C string slice from a slice of values without checking for a\nterminating or interior nul values.</p>\n<h5 id=\"safety-8\"><a class=\"doc-anchor\" href=\"#safety-8\">§</a>Safety</h5>\n<p>This function is unsafe because it can lead to invalid string slice values when the\nslice is missing a terminating nul value or there are non-terminating interior nul\nvalues in the slice. In particular, an empty slice will result in an invalid\nstring slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice_unchecked_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_slice_unchecked_mut\" class=\"fn\">from_slice_unchecked_mut</a>(slice: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]) -&gt; &amp;mut Self</h4></section></summary><div class=\"docblock\"><p>Constructs a mutable wide C string slice from a mutable slice of values without\nchecking for a terminating or interior nul values.</p>\n<h5 id=\"safety-9\"><a class=\"doc-anchor\" href=\"#safety-9\">§</a>Safety</h5>\n<p>This function is unsafe because it can lead to invalid string slice values when the\nslice is missing a terminating nul value or there are non-terminating interior nul\nvalues in the slice. In particular, an empty slice will result in an invalid\nstring slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ucstring\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.to_ucstring\" class=\"fn\">to_ucstring</a>(&amp;self) -&gt; <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h4></section></summary><div class=\"docblock\"><p>Copies the string reference to a new owned wide C string.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ustring\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.to_ustring\" class=\"fn\">to_ustring</a>(&amp;self) -&gt; <a class=\"struct\" href=\"widestring/ustring/struct.U32String.html\" title=\"struct widestring::ustring::U32String\">U32String</a></h4></section></summary><div class=\"docblock\"><p>Copies the string reference to a new owned wide string.</p>\n<p>The resulting wide string will <strong>not</strong> have a nul terminator.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n<span class=\"kw\">let </span>wcstr = U32CString::from_str(<span class=\"string\">\"MyString\"</span>).unwrap();\n<span class=\"comment\">// Convert U32CString to a U32String\n</span><span class=\"kw\">let </span>wstr = wcstr.to_ustring();\n\n<span class=\"comment\">// U32CString will have a terminating nul\n</span><span class=\"kw\">let </span>wcvec = wcstr.into_vec_with_nul();\n<span class=\"macro\">assert_eq!</span>(wcvec[wcvec.len()-<span class=\"number\">1</span>], <span class=\"number\">0</span>);\n<span class=\"comment\">// The resulting U32String will not have the terminating nul\n</span><span class=\"kw\">let </span>wvec = wstr.into_vec();\n<span class=\"macro\">assert_ne!</span>(wvec[wvec.len()-<span class=\"number\">1</span>], <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]</h4></section></summary><div class=\"docblock\"><p>Converts to a slice of the underlying elements.</p>\n<p>The slice will <strong>not</strong> include the nul terminator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]</h4></section></summary><div class=\"docblock\"><p>Converts to a mutable slice of the underlying elements.</p>\n<p>The slice will <strong>not</strong> include the nul terminator.</p>\n<h5 id=\"safety-10\"><a class=\"doc-anchor\" href=\"#safety-10\">§</a>Safety</h5>\n<p>This method is unsafe because you can violate the invariants of this type when\nmutating the slice (i.e. by adding interior nul values).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice_with_nul\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.as_slice_with_nul\" class=\"fn\">as_slice_with_nul</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]</h4></section></summary><div class=\"docblock\"><p>Converts to a slice of the underlying elements, including the nul terminator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the string.</p>\n<p>The caller must ensure that the string outlives the pointer this function returns,\nor else it will end up pointing to garbage.</p>\n<p>The caller must also ensure that the memory the pointer (non-transitively) points to\nis never written to (except inside an <code>UnsafeCell</code>) using this pointer or any\npointer derived from it. If you need to mutate the contents of the string, use\n<a href=\"widestring/ucstr/struct.U32CStr.html#method.as_mut_ptr\" title=\"method widestring::ucstr::U32CStr::as_mut_ptr\"><code>as_mut_ptr</code></a>.</p>\n<p>Modifying the container referenced by this string may cause its buffer to be\nreallocated, which would also make any pointers to it invalid.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable raw pointer to the string.</p>\n<p>The caller must ensure that the string outlives the pointer this function returns,\nor else it will end up pointing to garbage.</p>\n<p>Modifying the container referenced by this string may cause its buffer to be\nreallocated, which would also make any pointers to it invalid.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr_range\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.as_ptr_range\" class=\"fn\">as_ptr_range</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the two raw pointers spanning the string slice.</p>\n<p>The returned range is half-open, which means that the end pointer points one past\nthe last element of the slice. This way, an empty slice is represented by two equal\npointers, and the difference between the two pointers represents the size of the\nslice.</p>\n<p>See <a href=\"widestring/ucstr/struct.U32CStr.html#method.as_ptr\" title=\"method widestring::ucstr::U32CStr::as_ptr\"><code>as_ptr</code></a> for warnings on using these pointers. The end pointer\nrequires extra caution, as it does not point to a valid element in the slice.</p>\n<p>This function is useful for interacting with foreign interfaces which use two\npointers to refer to a range of elements in memory, as is common in C++.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr_range\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.as_mut_ptr_range\" class=\"fn\">as_mut_ptr_range</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the two unsafe mutable pointers spanning the string slice.</p>\n<p>The returned range is half-open, which means that the end pointer points one past\nthe last element of the slice. This way, an empty slice is represented by two equal\npointers, and the difference between the two pointers represents the size of the\nslice.</p>\n<p>See <a href=\"widestring/ucstr/struct.U32CStr.html#method.as_mut_ptr\" title=\"method widestring::ucstr::U32CStr::as_mut_ptr\"><code>as_mut_ptr</code></a> for warnings on using these pointers. The end\npointer requires extra caution, as it does not point to a valid element in the\nslice.</p>\n<p>This function is useful for interacting with foreign interfaces which use two\npointers to refer to a range of elements in memory, as is common in C++.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the length of the string as number of elements (<strong>not</strong> number of bytes)\n<strong>not</strong> including nul terminator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether this string contains no data (i.e. is only the nul terminator).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_ucstring\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.into_ucstring\" class=\"fn\">into_ucstring</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;Self&gt;) -&gt; <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h4></section></summary><div class=\"docblock\"><p>Converts a boxed wide C string slice into an owned wide C string without copying or\nallocating.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">102u32</span>, <span class=\"number\">111u32</span>, <span class=\"number\">111u32</span>]; <span class=\"comment\">// \"foo\"\n</span><span class=\"kw\">let </span>c_string = U32CString::from_vec(v.clone()).unwrap();\n<span class=\"kw\">let </span>boxed = c_string.into_boxed_ucstr();\n<span class=\"macro\">assert_eq!</span>(boxed.into_ucstring(), U32CString::from_vec(v).unwrap());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ustr\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.as_ustr\" class=\"fn\">as_ustr</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a></h4></section></summary><div class=\"docblock\"><p>Returns a wide string slice to this wide C string slice.</p>\n<p>The wide string slice will <em>not</em> include the nul-terminator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ustr_with_nul\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.as_ustr_with_nul\" class=\"fn\">as_ustr_with_nul</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a></h4></section></summary><div class=\"docblock\"><p>Returns a wide string slice to this wide C string slice.</p>\n<p>The wide string slice will include the nul-terminator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ustr\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.as_mut_ustr\" class=\"fn\">as_mut_ustr</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable wide string slice to this wide C string slice.</p>\n<p>The wide string slice will <em>not</em> include the nul-terminator.</p>\n<h5 id=\"safety-11\"><a class=\"doc-anchor\" href=\"#safety-11\">§</a>Safety</h5>\n<p>This method is unsafe because you can violate the invariants of this type when\nmutating the string (i.e. by adding interior nul values).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.display\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.display\" class=\"fn\">display</a>(&amp;self) -&gt; <a class=\"struct\" href=\"widestring/ucstr/struct.Display.html\" title=\"struct widestring::ucstr::Display\">Display</a>&lt;'_, <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an object that implements <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\"><code>Display</code></a> for printing\nstrings that may contain non-Unicode data.</p>\n<p>A wide C string might data of any encoding. This function assumes the string is encoded in\nUTF-32, and returns a struct implements the\n<a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\"><code>Display</code></a> trait in a way that decoding the string is lossy but\nno heap allocations are performed, such as by\n<a href=\"widestring/ucstr/struct.U32CStr.html#method.to_string_lossy\" title=\"method widestring::ucstr::U32CStr::to_string_lossy\"><code>to_string_lossy</code></a>.</p>\n<p>By default, invalid Unicode data is replaced with\n<a href=\"https://doc.rust-lang.org/1.90.0/core/char/constant.REPLACEMENT_CHARACTER.html\" title=\"constant core::char::REPLACEMENT_CHARACTER\"><code>U+FFFD REPLACEMENT CHARACTER</code></a> (�). If you wish\nto simply skip any invalid Uncode data and forego the replacement, you may use the\n<a href=\"https://doc.rust-lang.org/1.90.0/alloc/fmt/index.html#sign0\" title=\"mod alloc::fmt\">alternate formatting</a> with <code>{:#}</code>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CStr;\n\n<span class=\"comment\">// 𝄞mus&lt;invalid&gt;ic&lt;invalid&gt;\n</span><span class=\"kw\">let </span>s = U32CStr::from_slice(<span class=\"kw-2\">&amp;</span>[\n    <span class=\"number\">0x1d11e</span>, <span class=\"number\">0x006d</span>, <span class=\"number\">0x0075</span>, <span class=\"number\">0x0073</span>, <span class=\"number\">0xDD1E</span>, <span class=\"number\">0x0069</span>, <span class=\"number\">0x0063</span>, <span class=\"number\">0xD834</span>, <span class=\"number\">0x0000</span>,\n]).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, s.display()),\n<span class=\"string\">\"𝄞mus�ic�\"\n</span>);</code></pre></div>\n<p>Using alternate formatting style to skip invalid values entirely:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CStr;\n\n<span class=\"comment\">// 𝄞mus&lt;invalid&gt;ic&lt;invalid&gt;\n</span><span class=\"kw\">let </span>s = U32CStr::from_slice(<span class=\"kw-2\">&amp;</span>[\n    <span class=\"number\">0x1d11e</span>, <span class=\"number\">0x006d</span>, <span class=\"number\">0x0075</span>, <span class=\"number\">0x0073</span>, <span class=\"number\">0xDD1E</span>, <span class=\"number\">0x0069</span>, <span class=\"number\">0x0063</span>, <span class=\"number\">0xD834</span>, <span class=\"number\">0x0000</span>,\n]).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:#}\"</span>, s.display()),\n<span class=\"string\">\"𝄞music\"\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.get\" class=\"fn\">get</a>&lt;I&gt;(&amp;self, i: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>], Output = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a subslice of the string.</p>\n<p>This is the non-panicking alternative to indexing the string. Returns <a href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\nwhenever equivalent indexing operation would panic.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.get_mut\" class=\"fn\">get_mut</a>&lt;I&gt;(&amp;mut self, i: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut <a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>], Output = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a mutable subslice of the string.</p>\n<p>This is the non-panicking alternative to indexing the string. Returns <a href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\nwhenever equivalent indexing operation would panic.</p>\n<h5 id=\"safety-12\"><a class=\"doc-anchor\" href=\"#safety-12\">§</a>Safety</h5>\n<p>This method is unsafe because you can violate the invariants of this type when\nmutating the memory the pointer points to (i.e. by adding interior nul values).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>&lt;I&gt;(&amp;self, i: I) -&gt; &amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>], Output = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns an unchecked subslice of the string.</p>\n<p>This is the unchecked alternative to indexing the string.</p>\n<h5 id=\"safety-13\"><a class=\"doc-anchor\" href=\"#safety-13\">§</a>Safety</h5>\n<p>Callers of this function are responsible that these preconditions are satisfied:</p>\n<ul>\n<li>The starting index must not exceed the ending index;</li>\n<li>Indexes must be within bounds of the original slice.</li>\n</ul>\n<p>Failing that, the returned string slice may reference invalid memory.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>&lt;I&gt;(&amp;mut self, i: I) -&gt; &amp;mut <a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>], Output = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>]&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns aa mutable, unchecked subslice of the string.</p>\n<p>This is the unchecked alternative to indexing the string.</p>\n<h5 id=\"safety-14\"><a class=\"doc-anchor\" href=\"#safety-14\">§</a>Safety</h5>\n<p>Callers of this function are responsible that these preconditions are satisfied:</p>\n<ul>\n<li>The starting index must not exceed the ending index;</li>\n<li>Indexes must be within bounds of the original slice.</li>\n</ul>\n<p>Failing that, the returned string slice may reference invalid memory.</p>\n<p>This method is unsafe because you can violate the invariants of this type when\nmutating the memory the pointer points to (i.e. by adding interior nul values).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.split_at\" class=\"fn\">split_at</a>(&amp;self, mid: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; (&amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>, &amp;<a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>)</h4></section></summary><div class=\"docblock\"><p>Divide one string slice into two at an index.</p>\n<p>The argument, <code>mid</code>, should be an offset from the start of the string.</p>\n<p>The two slices returned go from the start of the string slice to <code>mid</code>, and from\n<code>mid</code> to the end of the string slice.</p>\n<p>To get mutable string slices instead, see the <a href=\"widestring/ucstr/struct.U32CStr.html#method.split_at_mut\" title=\"method widestring::ucstr::U32CStr::split_at_mut\"><code>split_at_mut</code></a>\nmethod.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.split_at_mut\" class=\"fn\">split_at_mut</a>(&amp;mut self, mid: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; (&amp;mut <a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>, &amp;mut <a class=\"struct\" href=\"widestring/ustr/struct.U32Str.html\" title=\"struct widestring::ustr::U32Str\">U32Str</a>)</h4></section></summary><div class=\"docblock\"><p>Divide one mutable string slice into two at an index.</p>\n<p>The argument, <code>mid</code>, should be an offset from the start of the string.</p>\n<p>The two slices returned go from the start of the string slice to <code>mid</code>, and from\n<code>mid</code> to the end of the string slice.</p>\n<p>To get immutable string slices instead, see the <a href=\"widestring/ucstr/struct.U32CStr.html#method.split_at\" title=\"method widestring::ucstr::U32CStr::split_at\"><code>split_at</code></a> method.</p>\n<h5 id=\"safety-15\"><a class=\"doc-anchor\" href=\"#safety-15\">§</a>Safety</h5>\n<p>This method is unsafe because you can violate the invariants of this type when\nmutating the memory the pointer points to (i.e. by adding interior nul values).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.repeat\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.repeat\" class=\"fn\">repeat</a>(&amp;self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"widestring/ucstring/struct.U32CString.html\" title=\"struct widestring::ucstring::U32CString\">U32CString</a></h4></section></summary><div class=\"docblock\"><p>Creates a new owned string by repeating this string <code>n</code> times.</p>\n<h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h5>\n<p>This function will panic if the capacity would overflow.</p>\n</div></details></div></details>",0,"widestring::ucstr::WideCStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1435-1952\">Source</a><a href=\"#impl-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_char_ptr_str\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1462-1464\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_char_ptr_str\" class=\"fn\">from_char_ptr_str</a>&lt;'a&gt;(p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>) -&gt; &amp;'a Self</h4></section></summary><div class=\"docblock\"><p>Constructs a string reference from a <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> nul-terminated string pointer.</p>\n<p>This will scan for nul values beginning with <code>p</code>. The first nul value will be used as the\nnul terminator for the string, similar to how libc string functions such as <code>strlen</code> work.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid or has a\nnul terminator, and the function could scan past the underlying buffer.</p>\n<p>In addition, the data must meet the safety conditions of <a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\">std::slice::from_raw_parts</a>.\nIn particular, the returned string reference <em>must not be mutated</em> for the duration of\nlifetime <code>'a</code>, except inside an <a href=\"https://doc.rust-lang.org/1.90.0/core/cell/struct.UnsafeCell.html\" title=\"struct core::cell::UnsafeCell\"><code>UnsafeCell</code></a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function panics if <code>p</code> is null.</p>\n<h5 id=\"caveat\"><a class=\"doc-anchor\" href=\"#caveat\">§</a>Caveat</h5>\n<p>The lifetime for the returned string is inferred from its usage. To prevent accidental\nmisuse, it’s suggested to tie the lifetime to whichever source lifetime is safe in the\ncontext, such as by providing a helper function taking the lifetime of a host value for the\nstring, or by explicit annotation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_char_ptr_str_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1490-1492\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_char_ptr_str_mut\" class=\"fn\">from_char_ptr_str_mut</a>&lt;'a&gt;(p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>) -&gt; &amp;'a mut Self</h4></section></summary><div class=\"docblock\"><p>Constructs a mutable string reference from a mutable <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> nul-terminated string pointer.</p>\n<p>This will scan for nul values beginning with <code>p</code>. The first nul value will be used as the\nnul terminator for the string, similar to how libc string functions such as <code>strlen</code> work.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid or has a\nnul terminator, and the function could scan past the underlying buffer.</p>\n<p>In addition, the data must meet the safety conditions of <a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts_mut.html\" title=\"fn core::slice::raw::from_raw_parts_mut\">std::slice::from_raw_parts_mut</a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>This function panics if <code>p</code> is null.</p>\n<h5 id=\"caveat-1\"><a class=\"doc-anchor\" href=\"#caveat-1\">§</a>Caveat</h5>\n<p>The lifetime for the returned string is inferred from its usage. To prevent accidental\nmisuse, it’s suggested to tie the lifetime to whichever source lifetime is safe in the\ncontext, such as by providing a helper function taking the lifetime of a host value for the\nstring, or by explicit annotation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_char_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1527-1529\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_char_ptr\" class=\"fn\">from_char_ptr</a>&lt;'a&gt;(\n    p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a Self, <a class=\"enum\" href=\"widestring/error/enum.NulError.html\" title=\"enum widestring::error::NulError\">NulError</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a string reference from a <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> pointer and a length.</p>\n<p>The <code>len</code> argument is the number of elements, <strong>not</strong> the number of bytes, and does\n<strong>not</strong> include the nul terminator of the string. Thus, a <code>len</code> of 0 is valid and means\nthat <code>p</code> is a pointer directly to the nul terminator of the string.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>This will scan the pointer string for an interior nul value and error if one is found\nbefore the nul terminator at <code>len</code> offset. To avoid scanning for interior nuls,\n<a href=\"widestring/ucstr/struct.U32CStr.html#method.from_ptr_unchecked\" title=\"associated function widestring::ucstr::U32CStr::from_ptr_unchecked\"><code>from_ptr_unchecked</code></a> may be used instead.</p>\n<p>An error is returned if the value at <code>len</code> offset is not a nul terminator.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid for <code>len + 1</code> elements.</p>\n<p>In addition, the data must meet the safety conditions of <a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\">std::slice::from_raw_parts</a>.\nIn particular, the returned string reference <em>must not be mutated</em> for the duration of\nlifetime <code>'a</code>, except inside an <a href=\"https://doc.rust-lang.org/1.90.0/core/cell/struct.UnsafeCell.html\" title=\"struct core::cell::UnsafeCell\"><code>UnsafeCell</code></a>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>This function panics if <code>p</code> is null.</p>\n<h5 id=\"caveat-2\"><a class=\"doc-anchor\" href=\"#caveat-2\">§</a>Caveat</h5>\n<p>The lifetime for the returned string is inferred from its usage. To prevent accidental\nmisuse, it’s suggested to tie the lifetime to whichever source lifetime is safe in the\ncontext, such as by providing a helper function taking the lifetime of a host value for the\nstring, or by explicit annotation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_char_ptr_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1562-1567\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_char_ptr_mut\" class=\"fn\">from_char_ptr_mut</a>&lt;'a&gt;(\n    p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a mut Self, <a class=\"enum\" href=\"widestring/error/enum.NulError.html\" title=\"enum widestring::error::NulError\">NulError</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a mutable string reference from a mutable <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> pointer and a length.</p>\n<p>The <code>len</code> argument is the number of elements, <strong>not</strong> the number of bytes, and does\n<strong>not</strong> include the nul terminator of the string. Thus, a <code>len</code> of 0 is valid and means\nthat <code>p</code> is a pointer directly to the nul terminator of the string.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>This will scan the pointer string for an interior nul value and error if one is found\nbefore the nul terminator at <code>len</code> offset. To avoid scanning for interior nuls,\n<a href=\"widestring/ucstr/struct.U32CStr.html#method.from_ptr_unchecked_mut\" title=\"associated function widestring::ucstr::U32CStr::from_ptr_unchecked_mut\"><code>from_ptr_unchecked_mut</code></a> may be used instead.</p>\n<p>An error is returned if the value at <code>len</code> offset is not a nul terminator.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid for <code>len + 1</code> elements.</p>\n<p>In addition, the data must meet the safety conditions of <a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts_mut.html\" title=\"fn core::slice::raw::from_raw_parts_mut\">std::slice::from_raw_parts_mut</a>.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>This function panics if <code>p</code> is null.</p>\n<h5 id=\"caveat-3\"><a class=\"doc-anchor\" href=\"#caveat-3\">§</a>Caveat</h5>\n<p>The lifetime for the returned string is inferred from its usage. To prevent accidental\nmisuse, it’s suggested to tie the lifetime to whichever source lifetime is safe in the\ncontext, such as by providing a helper function taking the lifetime of a host value for the\nstring, or by explicit annotation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_char_ptr_truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1599-1604\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_char_ptr_truncate\" class=\"fn\">from_char_ptr_truncate</a>&lt;'a&gt;(\n    p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a Self, <a class=\"struct\" href=\"widestring/error/struct.MissingNulTerminator.html\" title=\"struct widestring::error::MissingNulTerminator\">MissingNulTerminator</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a string reference from a <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> pointer and a length, truncating at the first\nnul terminator.</p>\n<p>The <code>len</code> argument is the number of elements, <strong>not</strong> the number of bytes. This will scan\nfor nul values beginning with <code>p</code> until offset <code>len</code>. The first nul value will be used as\nthe nul terminator for the string, ignoring any remaining values left before <code>len</code>.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>If no nul terminator is found after <code>len</code> + 1 elements, an error is returned.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid or has a\nnul terminator, and the function could scan past the underlying buffer.</p>\n<p>In addition, the data must meet the safety conditions of <a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\">std::slice::from_raw_parts</a>.\nIn particular, the returned string reference <em>must not be mutated</em> for the duration of\nlifetime <code>'a</code>, except inside an <a href=\"https://doc.rust-lang.org/1.90.0/core/cell/struct.UnsafeCell.html\" title=\"struct core::cell::UnsafeCell\"><code>UnsafeCell</code></a>.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>This function panics if <code>p</code> is null.</p>\n<h5 id=\"caveat-4\"><a class=\"doc-anchor\" href=\"#caveat-4\">§</a>Caveat</h5>\n<p>The lifetime for the returned string is inferred from its usage. To prevent accidental\nmisuse, it’s suggested to tie the lifetime to whichever source lifetime is safe in the\ncontext, such as by providing a helper function taking the lifetime of a host value for the\nstring, or by explicit annotation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_char_ptr_truncate_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1634-1639\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_char_ptr_truncate_mut\" class=\"fn\">from_char_ptr_truncate_mut</a>&lt;'a&gt;(\n    p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a mut Self, <a class=\"struct\" href=\"widestring/error/struct.MissingNulTerminator.html\" title=\"struct widestring::error::MissingNulTerminator\">MissingNulTerminator</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a mutable string reference from a mutable <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> pointer and a length,\ntruncating at the first nul terminator.</p>\n<p>The <code>len</code> argument is the number of elements, <strong>not</strong> the number of bytes. This will scan\nfor nul values beginning with <code>p</code> until offset <code>len</code>. The first nul value will be used as\nthe nul terminator for the string, ignoring any remaining values left before <code>len</code>.</p>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h5>\n<p>If no nul terminator is found after <code>len</code> + 1 elements, an error is returned.</p>\n<h5 id=\"safety-5\"><a class=\"doc-anchor\" href=\"#safety-5\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid or has a\nnul terminator, and the function could scan past the underlying buffer.</p>\n<p>In addition, the data must meet the safety conditions of <a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts_mut.html\" title=\"fn core::slice::raw::from_raw_parts_mut\">std::slice::from_raw_parts_mut</a>.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>This function panics if <code>p</code> is null.</p>\n<h5 id=\"caveat-5\"><a class=\"doc-anchor\" href=\"#caveat-5\">§</a>Caveat</h5>\n<p>The lifetime for the returned string is inferred from its usage. To prevent accidental\nmisuse, it’s suggested to tie the lifetime to whichever source lifetime is safe in the\ncontext, such as by providing a helper function taking the lifetime of a host value for the\nstring, or by explicit annotation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_char_ptr_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1672-1674\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_char_ptr_unchecked\" class=\"fn\">from_char_ptr_unchecked</a>&lt;'a&gt;(\n    p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>,\n) -&gt; &amp;'a Self</h4></section></summary><div class=\"docblock\"><p>Constructs a string reference from a <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> pointer and a length without checking for any\nnul values.</p>\n<p>The <code>len</code> argument is the number of elements, <strong>not</strong> the number of bytes, and does\n<strong>not</strong> include the nul terminator of the string. Thus, a <code>len</code> of 0 is valid and means\nthat <code>p</code> is a pointer directly to the nul terminator of the string.</p>\n<h5 id=\"safety-6\"><a class=\"doc-anchor\" href=\"#safety-6\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid for <code>len + 1</code> elements, nor that is has a terminating nul value.</p>\n<p>In addition, the data must meet the safety conditions of <a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\">std::slice::from_raw_parts</a>.\nIn particular, the returned string reference <em>must not be mutated</em> for the duration of\nlifetime <code>'a</code>, except inside an <a href=\"https://doc.rust-lang.org/1.90.0/core/cell/struct.UnsafeCell.html\" title=\"struct core::cell::UnsafeCell\"><code>UnsafeCell</code></a>.</p>\n<p>The interior values of the pointer are not scanned for nul. Any interior nul values or\na missing nul terminator at pointer offset <code>len</code> + 1 will result in an invalid string slice.</p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h5>\n<p>This function panics if <code>p</code> is null.</p>\n<h5 id=\"caveat-6\"><a class=\"doc-anchor\" href=\"#caveat-6\">§</a>Caveat</h5>\n<p>The lifetime for the returned string is inferred from its usage. To prevent accidental\nmisuse, it’s suggested to tie the lifetime to whichever source lifetime is safe in the\ncontext, such as by providing a helper function taking the lifetime of a host value for the\nstring, or by explicit annotation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_char_ptr_unchecked_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1705-1707\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_char_ptr_unchecked_mut\" class=\"fn\">from_char_ptr_unchecked_mut</a>&lt;'a&gt;(\n    p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>,\n) -&gt; &amp;'a mut Self</h4></section></summary><div class=\"docblock\"><p>Constructs a mutable string reference from a mutable <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> pointer and a length without\nchecking for any nul values.</p>\n<p>The <code>len</code> argument is the number of elements, <strong>not</strong> the number of bytes, and does\n<strong>not</strong> include the nul terminator of the string. Thus, a <code>len</code> of 0 is valid and means\nthat <code>p</code> is a pointer directly to the nul terminator of the string.</p>\n<h5 id=\"safety-7\"><a class=\"doc-anchor\" href=\"#safety-7\">§</a>Safety</h5>\n<p>This function is unsafe as there is no guarantee that the given pointer is valid for <code>len + 1</code> elements, nor that is has a terminating nul value.</p>\n<p>In addition, the data must meet the safety conditions of <a href=\"https://doc.rust-lang.org/1.90.0/core/slice/raw/fn.from_raw_parts_mut.html\" title=\"fn core::slice::raw::from_raw_parts_mut\">std::slice::from_raw_parts_mut</a>.</p>\n<p>The interior values of the pointer are not scanned for nul. Any interior nul values or\na missing nul terminator at pointer offset <code>len</code> + 1 will result in an invalid string slice.</p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h5>\n<p>This function panics if <code>p</code> is null.</p>\n<h5 id=\"caveat-7\"><a class=\"doc-anchor\" href=\"#caveat-7\">§</a>Caveat</h5>\n<p>The lifetime for the returned string is inferred from its usage. To prevent accidental\nmisuse, it’s suggested to tie the lifetime to whichever source lifetime is safe in the\ncontext, such as by providing a helper function taking the lifetime of a host value for the\nstring, or by explicit annotation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_char_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1719-1722\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_char_slice\" class=\"fn\">from_char_slice</a>(slice: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;Self, <a class=\"enum\" href=\"widestring/error/enum.NulError.html\" title=\"enum widestring::error::NulError\">NulError</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a string reference from a <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> slice with a terminating nul, checking for\ninvalid interior nul values.</p>\n<p>The slice must have at least one item, the nul terminator, even for an empty string.</p>\n<h5 id=\"errors-4\"><a class=\"doc-anchor\" href=\"#errors-4\">§</a>Errors</h5>\n<p>If there are nul values in the slice except for the last value, an error is returned.</p>\n<p>An error is also returned if the last value of the slice is not a nul terminator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_char_slice_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1734-1737\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_char_slice_mut\" class=\"fn\">from_char_slice_mut</a>(\n    slice: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Self, <a class=\"enum\" href=\"widestring/error/enum.NulError.html\" title=\"enum widestring::error::NulError\">NulError</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a mutable string reference from a mutable <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> slice with a terminating nul,\nchecking for invalid interior nul values.</p>\n<p>The slice must have at least one item, the nul terminator, even for an empty string.</p>\n<h5 id=\"errors-5\"><a class=\"doc-anchor\" href=\"#errors-5\">§</a>Errors</h5>\n<p>If there are nul values in the slice except for the last value, an error is returned.</p>\n<p>An error is also returned if the last value of the slice is not a nul terminator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_char_slice_truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1749-1752\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_char_slice_truncate\" class=\"fn\">from_char_slice_truncate</a>(\n    slice: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;Self, <a class=\"struct\" href=\"widestring/error/struct.MissingNulTerminator.html\" title=\"struct widestring::error::MissingNulTerminator\">MissingNulTerminator</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a string reference from a slice of <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> values, truncating at the first nul\nterminator.</p>\n<p>The slice will be scanned for nul values. When a nul value is found, it is treated as the\nterminator for the string, and the string slice will be truncated to that nul.</p>\n<h5 id=\"errors-6\"><a class=\"doc-anchor\" href=\"#errors-6\">§</a>Errors</h5>\n<p>If there are no nul values in the slice, an error is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_char_slice_truncate_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1764-1769\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_char_slice_truncate_mut\" class=\"fn\">from_char_slice_truncate_mut</a>(\n    slice: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Self, <a class=\"struct\" href=\"widestring/error/struct.MissingNulTerminator.html\" title=\"struct widestring::error::MissingNulTerminator\">MissingNulTerminator</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a mutable string reference from a mutable slice of <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> values, truncating at\nthe first nul terminator.</p>\n<p>The slice will be scanned for nul values. When a nul value is found, it is treated as the\nterminator for the string, and the string slice will be truncated to that nul.</p>\n<h5 id=\"errors-7\"><a class=\"doc-anchor\" href=\"#errors-7\">§</a>Errors</h5>\n<p>If there are no nul values in the slice, an error is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_char_slice_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1781-1784\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_char_slice_unchecked\" class=\"fn\">from_char_slice_unchecked</a>(slice: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>]) -&gt; &amp;Self</h4></section></summary><div class=\"docblock\"><p>Constructs a string reference from a <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> slice without checking for a terminating or\ninterior nul values.</p>\n<h5 id=\"safety-8\"><a class=\"doc-anchor\" href=\"#safety-8\">§</a>Safety</h5>\n<p>This function is unsafe because it can lead to invalid C string slice values when the slice\nis missing a terminating nul value or there are non-terminating interior nul values\nin the slice. In particular, an empty slice will result in an invalid string slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_char_slice_unchecked_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1796-1799\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.from_char_slice_unchecked_mut\" class=\"fn\">from_char_slice_unchecked_mut</a>(slice: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>]) -&gt; &amp;mut Self</h4></section></summary><div class=\"docblock\"><p>Constructs a mutable string reference from a mutable <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> slice without checking for a\nterminating or interior nul values.</p>\n<h5 id=\"safety-9\"><a class=\"doc-anchor\" href=\"#safety-9\">§</a>Safety</h5>\n<p>This function is unsafe because it can lead to invalid C string slice values when the slice\nis missing a terminating nul value or there are non-terminating interior nul values\nin the slice. In particular, an empty slice will result in an invalid string slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_os_string\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1829-1831\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.to_os_string\" class=\"fn\">to_os_string</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsString.html\" title=\"struct std::ffi::os_str::OsString\">OsString</a></h4></section></summary><div class=\"docblock\"><p>Decodes a string reference to an owned <a href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsString.html\" title=\"struct std::ffi::os_str::OsString\"><code>OsString</code></a>.</p>\n<p>This makes a string copy of this reference. Since <a href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\"><code>U32CStr</code></a> makes no guarantees that it\nis valid UTF-32, there is no guarantee that the resulting <a href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsString.html\" title=\"struct std::ffi::os_str::OsString\"><code>OsString</code></a>\nwill be valid data. The <a href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsString.html\" title=\"struct std::ffi::os_str::OsString\"><code>OsString</code></a> will <strong>not</strong> have a nul\nterminator.</p>\n<p>Note that the encoding of <a href=\"https://doc.rust-lang.org/1.90.0/std/ffi/os_str/struct.OsString.html\" title=\"struct std::ffi::os_str::OsString\"><code>OsString</code></a> is platform-dependent, so on\nsome platforms this may make an encoding conversions, while on other platforms no changes to\nthe string will be made.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n<span class=\"kw\">use </span>std::ffi::OsString;\n<span class=\"kw\">let </span>s = <span class=\"string\">\"MyString\"</span>;\n<span class=\"comment\">// Create a wide string from the string\n</span><span class=\"kw\">let </span>wstr = U32CString::from_str(s).unwrap();\n<span class=\"comment\">// Create an OsString from the wide string\n</span><span class=\"kw\">let </span>osstr = wstr.to_os_string();\n\n<span class=\"macro\">assert_eq!</span>(osstr, OsString::from(s));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_string\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1857-1859\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.to_string\" class=\"fn\">to_string</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, <a class=\"struct\" href=\"widestring/error/struct.Utf32Error.html\" title=\"struct widestring::error::Utf32Error\">Utf32Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Decodes the string reference to a <a href=\"https://doc.rust-lang.org/1.90.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a> if it contains valid UTF-32 data.</p>\n<p>This method assumes this string is encoded as UTF-32 and attempts to decode it as such. It\nwill *<em>not</em> have a nul terminator.</p>\n<h5 id=\"errors-8\"><a class=\"doc-anchor\" href=\"#errors-8\">§</a>Errors</h5>\n<p>Returns an error if the string contains any invalid UTF-32 data.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n<span class=\"kw\">let </span>s = <span class=\"string\">\"MyString\"</span>;\n<span class=\"comment\">// Create a wide string from the string\n</span><span class=\"kw\">let </span>wstr = U32CString::from_str(s).unwrap();\n<span class=\"comment\">// Create a regular string from the wide string\n</span><span class=\"kw\">let </span>s2 = wstr.to_string().unwrap();\n\n<span class=\"macro\">assert_eq!</span>(s2, s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_string_lossy\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1884-1886\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.to_string_lossy\" class=\"fn\">to_string_lossy</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Decodes the string reference to a <a href=\"https://doc.rust-lang.org/1.90.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a> even if it is invalid UTF-32 data.</p>\n<p>This method assumes this string is encoded as UTF-16 and attempts to decode it as such. Any\ninvalid sequences are replaced with\n<a href=\"https://doc.rust-lang.org/1.90.0/core/char/constant.REPLACEMENT_CHARACTER.html\" title=\"constant core::char::REPLACEMENT_CHARACTER\"><code>U+FFFD REPLACEMENT CHARACTER</code></a>, which looks like this:\n�. It will *<em>not</em> have a nul terminator.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>widestring::U32CString;\n<span class=\"kw\">let </span>s = <span class=\"string\">\"MyString\"</span>;\n<span class=\"comment\">// Create a wide string from the string\n</span><span class=\"kw\">let </span>wstr = U32CString::from_str(s).unwrap();\n<span class=\"comment\">// Create a regular string from the wide string\n</span><span class=\"kw\">let </span>s2 = wstr.to_string_lossy();\n\n<span class=\"macro\">assert_eq!</span>(s2, s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chars\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1901-1903\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.chars\" class=\"fn\">chars</a>(&amp;self) -&gt; <a class=\"struct\" href=\"widestring/ucstr/struct.CharsUtf32.html\" title=\"struct widestring::ucstr::CharsUtf32\">CharsUtf32</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"CharsUtf32&lt;&#39;_&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s of a string slice.</p>\n<p>As this string has no defined encoding, this method assumes the string is UTF-32. Since it\nmay consist of invalid UTF-32, the iterator returned by this method\nis an iterator over <code>Result&lt;char, DecodeUtf32Error&gt;</code> instead of <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s\ndirectly. If you would like a lossy iterator over <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>chars</code></a>s directly, instead\nuse <a href=\"widestring/ucstr/struct.U32CStr.html#method.chars_lossy\" title=\"method widestring::ucstr::U32CStr::chars_lossy\"><code>chars_lossy</code></a>.</p>\n<p>It’s important to remember that <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> represents a Unicode Scalar Value, and\nmay not match your idea of what a ‘character’ is. Iteration over grapheme clusters may be\nwhat you actually want. That functionality is not provided by by this crate.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chars_lossy\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1918-1920\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.chars_lossy\" class=\"fn\">chars_lossy</a>(&amp;self) -&gt; <a class=\"struct\" href=\"widestring/ucstr/struct.CharsLossyUtf32.html\" title=\"struct widestring::ucstr::CharsLossyUtf32\">CharsLossyUtf32</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"CharsLossyUtf32&lt;&#39;_&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a lossy iterator over the <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s of a string slice.</p>\n<p>As this string has no defined encoding, this method assumes the string is UTF-32. Since it\nmay consist of invalid UTF-32, the iterator returned by this method will replace invalid\ndata with\n<a href=\"https://doc.rust-lang.org/1.90.0/core/char/constant.REPLACEMENT_CHARACTER.html\" title=\"constant core::char::REPLACEMENT_CHARACTER\"><code>U+FFFD REPLACEMENT CHARACTER</code></a> (�). This is a lossy\nversion of <a href=\"widestring/ucstr/struct.U32CStr.html#method.chars\" title=\"method widestring::ucstr::U32CStr::chars\"><code>chars</code></a>.</p>\n<p>It’s important to remember that <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> represents a Unicode Scalar Value, and\nmay not match your idea of what a ‘character’ is. Iteration over grapheme clusters may be\nwhat you actually want. That functionality is not provided by by this crate.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.char_indices\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1934-1936\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.char_indices\" class=\"fn\">char_indices</a>(&amp;self) -&gt; <a class=\"struct\" href=\"widestring/ucstr/struct.CharIndicesUtf32.html\" title=\"struct widestring::ucstr::CharIndicesUtf32\">CharIndicesUtf32</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"CharIndicesUtf32&lt;&#39;_&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the chars of a string slice, and their positions.</p>\n<p>As this string has no defined encoding, this method assumes the string is UTF-32. Since it\nmay consist of invalid UTF-32, the iterator returned by this method is an iterator over\n<code>Result&lt;char, DecodeUtf32Error&gt;</code> as well as their positions, instead of\n<a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s directly. If you would like a lossy indices iterator over\n<a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>chars</code></a>s directly, instead use\n<a href=\"widestring/ucstr/struct.U32CStr.html#method.char_indices_lossy\" title=\"method widestring::ucstr::U32CStr::char_indices_lossy\"><code>char_indices_lossy</code></a>.</p>\n<p>The iterator yields tuples. The position is first, the <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> is second.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.char_indices_lossy\" class=\"method\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1949-1951\">Source</a><h4 class=\"code-header\">pub fn <a href=\"widestring/ucstr/struct.U32CStr.html#tymethod.char_indices_lossy\" class=\"fn\">char_indices_lossy</a>(&amp;self) -&gt; <a class=\"struct\" href=\"widestring/ucstr/struct.CharIndicesLossyUtf32.html\" title=\"struct widestring::ucstr::CharIndicesLossyUtf32\">CharIndicesLossyUtf32</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"CharIndicesLossyUtf32&lt;&#39;_&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a lossy iterator over the chars of a string slice, and their positions.</p>\n<p>As this string slice may consist of invalid UTF-32, the iterator returned by this method\nwill replace invalid values with\n<a href=\"https://doc.rust-lang.org/1.90.0/core/char/constant.REPLACEMENT_CHARACTER.html\" title=\"constant core::char::REPLACEMENT_CHARACTER\"><code>U+FFFD REPLACEMENT CHARACTER</code></a> (�), as well as the\npositions of all characters. This is a lossy version of\n<a href=\"widestring/ucstr/struct.U32CStr.html#method.char_indices\" title=\"method widestring::ucstr::U32CStr::char_indices\"><code>char_indices</code></a>.</p>\n<p>The iterator yields tuples. The position is first, the <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> is second.</p>\n</div></details></div></details>",0,"widestring::ucstr::WideCStr"],["<section id=\"impl-Eq-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#impl-Eq-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section>","Eq","widestring::ucstr::WideCStr"],["<section id=\"impl-StructuralPartialEq-for-U32CStr\" class=\"impl\"><a class=\"src rightside\" href=\"src/widestring/ucstr.rs.html#1110-1279\">Source</a><a href=\"#impl-StructuralPartialEq-for-U32CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"widestring/ucstr/struct.U32CStr.html\" title=\"struct widestring::ucstr::U32CStr\">U32CStr</a></h3></section>","StructuralPartialEq","widestring::ucstr::WideCStr"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[153524]}